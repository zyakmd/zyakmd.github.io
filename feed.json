{
    "version": "https://jsonfeed.org/version/1",
    "title": "世界上只有一种真正的英雄主义，就是认清了生活的真相后还依然热爱它",
    "subtitle": "",
    "icon": "https://zyakmd.github.io/images/favicon.ico",
    "description": "行到水穷处，坐看云起时",
    "home_page_url": "https://zyakmd.github.io",
    "items": [
        {
            "id": "https://zyakmd.github.io/2024/05/09/%E8%99%9A%E6%8B%9F%E4%B8%96%E7%95%8Ctricks/Windows%E7%9B%B8%E5%85%B3/",
            "url": "https://zyakmd.github.io/2024/05/09/%E8%99%9A%E6%8B%9F%E4%B8%96%E7%95%8Ctricks/Windows%E7%9B%B8%E5%85%B3/",
            "title": "Windows相关",
            "date_published": "2024-05-09T11:32:02.000Z",
            "content_html": "<p>mark 一些 Windows 的 bug</p>\n<h1 id=\"搜索框挂彩\"><a class=\"anchor\" href=\"#搜索框挂彩\">#</a> 搜索框挂彩</h1>\n<p>老 bug 了，锁屏之后就有可能触发</p>\n<p><strong>解决方法：</strong><br />\nWindows 是通过 <code>SearchHost</code>  程序提供搜索服务，若搜索栏无法使用可以重启 Windows Search。任务管理器的详细信息中找到 SearchHost.exe，结束进程会自动重启即可</p>\n<h1 id=\"声音挂彩\"><a class=\"anchor\" href=\"#声音挂彩\">#</a> 声音挂彩</h1>\n<p>之前看 B 站总是卡主无法加载，换播放策略等等。最后发现是联想笔记本有时候声音程序会挂（没有声音了，估计播放程序是要调用音频输出接口，就卡死了）。</p>\n<p><strong>解决方法：</strong><br />\n服务里重启 Windows Audio 服务即可</p>\n",
            "tags": [
                "日常使用"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/05/09/%E8%99%9A%E6%8B%9F%E4%B8%96%E7%95%8Ctricks/Clash%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99/",
            "url": "https://zyakmd.github.io/2024/05/09/%E8%99%9A%E6%8B%9F%E4%B8%96%E7%95%8Ctricks/Clash%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99/",
            "title": "Clash自定义规则",
            "date_published": "2024-05-09T06:30:11.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>情景：GPT 需要稳定的魔法，但这个魔法的自带规则⑧行，像国内我常用 Bing 搜索，规则里却没有直连，国际版有时候也会 bug。因此需要自定义规则，直接加在订阅的规则里会在更新订阅链接后被覆盖</p>\n<h1 id=\"解决\"><a class=\"anchor\" href=\"#解决\">#</a> 解决</h1>\n<p>在 <code>settings </code> 的 <code>Profiles</code>  的 <code>Parsers</code>  中设置预处理器内容</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">parsers</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//example.com/profile.yaml <span class=\"token comment\"># 你的订阅的 url</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">yaml</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">prepend-rules</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">-</span> DOMAIN<span class=\"token punctuation\">,</span>test.com<span class=\"token punctuation\">,</span>DIRECT <span class=\"token comment\"># 自定义规则</span></pre></td></tr></table></figure><p>在订阅配置文件触发刷新（包括自动更新）时，CFW 会读取该 <code>yaml</code>  字段定义的值，将对应值插入 / 合并到原配置文件中</p>\n<p>此外，这里还可以自定义 <code>proxies</code> ，以及更多参数见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmd0ay5wdy9jb250ZW50cy9wYXJzZXIuaHRtbA==\">官方文档</span></p>\n<p>调教好就可以流畅的一直开魔法了</p>\n",
            "tags": [
                "日常使用"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/05/08/%E9%80%9F%E8%A7%88/",
            "url": "https://zyakmd.github.io/2024/05/08/%E9%80%9F%E8%A7%88/",
            "title": "速览",
            "date_published": "2024-05-08T06:27:16.000Z",
            "content_html": "<p>对于本博客一些内容的手动分类管理。更多看标签 / 分类 / 直接搜索</p>\n<h1 id=\"ing\"><a class=\"anchor\" href=\"#ing\">#</a> ing</h1>\n<p>最近在处理的文章，比如有的项目学习要个把月，或者有的事情是持续的</p>\n<ul>\n<li><a href=\"/2024/03/21/Java%E7%AC%94%E8%AE%B0/\" title=\"Java学习\">Java学习</a></li>\n<li><a href=\"/2024/03/29/Docker/\" title=\"Docker\">Docker</a></li>\n</ul>\n<h1 id=\"will\"><a class=\"anchor\" href=\"#will\">#</a> will</h1>\n<p>挖了坑但暂时没打算填的，得看时间和实际情况。算个待办清单吧。<span class=\"spoiler\" title=\"你知道得太多了\">确定不填了就会删</span></p>\n<ul>\n<li><a href=\"/2024/04/19/%E5%86%8D%E6%B7%B1%E9%80%A0/\" title=\"进阶阅读\">进阶阅读</a></li>\n</ul>\n<h1 id=\"finish\"><a class=\"anchor\" href=\"#finish\">#</a> finish</h1>\n<p>主体定了的文章，有需要了还是会补充的，像 [界面相关]</p>\n<ul>\n<li>\n<p>本网站相关</p>\n<ul>\n<li><a href=\"/2024/03/06/hexo%E4%BD%BF%E7%94%A8/hexo+github/\" title=\"博客技术栈\">博客技术栈</a></li>\n<li><a href=\"/2024/03/07/hexo%E4%BD%BF%E7%94%A8/%E5%9C%A8obisidian%E4%B8%8A%E4%BD%BF%E7%94%A8/\" title=\"obisidian维护\">obisidian维护</a></li>\n<li><a href=\"/2024/03/07/hexo%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%AB%99%E6%A0%B7%E5%BC%8F/\" title=\"网站样式\">网站样式</a></li>\n<li><a href=\"/2024/03/09/hexo%E4%BD%BF%E7%94%A8/%E7%95%8C%E9%9D%A2%E7%9B%B8%E5%85%B3/\" title=\"界面相关\">界面相关</a></li>\n</ul>\n</li>\n<li>\n<p>学习与工作 <span class=\"spoiler\" title=\"你知道得太多了\">虽然现在都是 java 开发，但没人要就滚蛋了～，就会更新到时候的行业的内容！</span></p>\n<ul>\n<li><a href=\"/2024/03/13/MySQL/\" title=\"MySQL笔记\">MySQL笔记</a></li>\n<li><a href=\"/2024/03/22/%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/\" title=\"Spring项目优化\">Spring项目优化</a></li>\n<li><a href=\"/2024/04/01/RPC%E9%A1%B9%E7%9B%AE/\" title=\"RPC\">RPC</a></li>\n<li><a href=\"https://zyakmd.github.io/categories/spring%E5%A4%8D%E4%B9%A0/\">Spring 复习 categorie</a></li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://zyakmd.github.io/2024/05/08/%E5%85%85%E7%94%B5/",
            "url": "https://zyakmd.github.io/2024/05/08/%E5%85%85%E7%94%B5/",
            "title": "充电",
            "date_published": "2024-05-08T05:31:38.000Z",
            "content_html": "<p><span class=\"spoiler\" title=\"你知道得太多了\">纯个人 “稍后再看”，请无视</span><br />\n无论从什么方面，学无止尽，保持充电。</p>\n<h1 id=\"技术\"><a class=\"anchor\" href=\"#技术\">#</a> 技术</h1>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXpaNDIxSjc4Sy8/c3BtX2lkX2Zyb209MzMzLjEwMDcudGlhbm1hLjItMy02LmNsaWNrJmFtcDt2ZF9zb3VyY2U9NzExZDM1M2QwYzNiMzU4NzkyMDI3Y2ZjYmI3NTA1ZjM=\">独立开发的 5 点建议</span> ：虽然很遥远，但思想建设还是要有的，最近越来越觉得很多事情要提前系统的想 / 独立思考？/ 有长远规划？/ 等等，都是不同的表述，不一定哪个最精准，但只停留在当下跟着走是一定不行</label></li>\n</ul>\n<h1 id=\"个人修行\"><a class=\"anchor\" href=\"#个人修行\">#</a> 个人修行</h1>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThGNG0xVDdpWS8/c3BtX2lkX2Zyb209MzMzLjk5OS4wLjAmYW1wO3ZkX3NvdXJjZT03MTFkMzUzZDBjM2IzNTg3OTIwMjdjZmNiYjc1MDVmMw==\">收神纳性</span> ：私以为现代内耗与古时精气神的讲究是辩证统一的，当先信息冲刷和各种思虑太耗神，收的住 / 自律 才是良药</label></li>\n</ul>\n",
            "tags": [
                "私货",
                "个人"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/04/19/%E5%86%8D%E6%B7%B1%E9%80%A0/",
            "url": "https://zyakmd.github.io/2024/04/19/%E5%86%8D%E6%B7%B1%E9%80%A0/",
            "title": "再深造",
            "date_published": "2024-04-19T07:22:18.000Z",
            "content_html": "<p>这是一个书籍阅读记录文，之后还应当包含各种源码</p>\n<hr />\n<p>被大厂狠狠拷打，双 2 有的连简历都过不去，有次阿里云面的大佬给了个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnpob25ndGlhbnhpYS9hcnRpY2xlL2RldGFpbHMvODA5OTM4Mzc/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDI=\"> Java 学习路线建议</span>，而且互联网人事变动确实频繁，一切还得是自身硬。</p>\n<p>放下同质化的简历，漂浮的应用，回归底层去见森林，挑选了这些书籍开个新坑，放下大厂的执念。也不知道下个风口是哪，但搞开发肯定还是不过或缺的，终究有人要做应用服务，学好过不学。算法卷不了，争取下全栈，我要成为计算机糕手！</p>\n<ul>\n<li>核心技术卷 1、2</li>\n<li>java 编程思想</li>\n<li>Head First 设计模式</li>\n<li>Effective Java</li>\n<li>深入理解 java 虚拟机</li>\n<li>高性能 MySQL</li>\n<li>深入理解计算机系统</li>\n<li>Designing Data-Intensive Applications</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90YW5xaW5nYm8uY24vQ1NCb29rMDAxLyNKYXZh\">计算机专业书籍网站</span> ，解压密码 lun2020</p>\n<h1 id=\"核心技术卷\"><a class=\"anchor\" href=\"#核心技术卷\">#</a> 核心技术卷</h1>\n<h2 id=\"i-第8版\"><a class=\"anchor\" href=\"#i-第8版\">#</a> Ⅰ (第 8 版)</h2>\n<h3 id=\"第一-二章-java概述jdk环境\"><a class=\"anchor\" href=\"#第一-二章-java概述jdk环境\">#</a> 第一 - 二章 Java 概述 + JDK 环境</h3>\n<h3 id=\"第三章-基本的程序设计结构\"><a class=\"anchor\" href=\"#第三章-基本的程序设计结构\">#</a> 第三章 基本的程序设计结构</h3>\n<h3 id=\"第四章-对象与类\"><a class=\"anchor\" href=\"#第四章-对象与类\">#</a> 第四章 对象与类</h3>\n<h3 id=\"第五章-继承\"><a class=\"anchor\" href=\"#第五章-继承\">#</a> 第五章 继承</h3>\n<h3 id=\"第六章-接口与内部类\"><a class=\"anchor\" href=\"#第六章-接口与内部类\">#</a> 第六章 接口与内部类</h3>\n<h3 id=\"第七章-图形略\"><a class=\"anchor\" href=\"#第七章-图形略\">#</a> 第七章 图形（略）</h3>\n<h3 id=\"第八章-事件处理\"><a class=\"anchor\" href=\"#第八章-事件处理\">#</a> 第八章 事件处理</h3>\n<h3 id=\"第九章-swing略\"><a class=\"anchor\" href=\"#第九章-swing略\">#</a> 第九章 Swing（略）</h3>\n<h3 id=\"第十章-部署与applet\"><a class=\"anchor\" href=\"#第十章-部署与applet\">#</a> 第十章 部署与 Applet</h3>\n<h3 id=\"第十一章-异常-日志-断点-调试\"><a class=\"anchor\" href=\"#第十一章-异常-日志-断点-调试\">#</a> 第十一章 异常、日志、断点、调试</h3>\n<p>图形用户界面程序设计 和 Swing 用户界面组件的，这部分不探究了，不怎么用</p>\n<h3 id=\"第十二章-泛型\"><a class=\"anchor\" href=\"#第十二章-泛型\">#</a> 第十二章 泛型</h3>\n<h3 id=\"第十三章-集合\"><a class=\"anchor\" href=\"#第十三章-集合\">#</a> 第十三章 集合</h3>\n<h3 id=\"第十四章-多线程\"><a class=\"anchor\" href=\"#第十四章-多线程\">#</a> 第十四章 多线程 *</h3>\n<p>并发、线程、进程，重中之重。</p>\n",
            "tags": [
                "JAVA"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/04/01/RPC%E9%A1%B9%E7%9B%AE/",
            "url": "https://zyakmd.github.io/2024/04/01/RPC%E9%A1%B9%E7%9B%AE/",
            "title": "RPC项目",
            "date_published": "2024-04-01T10:08:06.000Z",
            "content_html": "<p>写个轮子，从设计到实现全过程参与，思考更多。</p>\n<h1 id=\"zy-rpc\"><a class=\"anchor\" href=\"#zy-rpc\">#</a> zy-RPC</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3p5YWttZC96eS1SUEM=\">我的源码分享</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXRoNHkxdzd3WD9wPTImYW1wO3ZkX3NvdXJjZT03MTFkMzUzZDBjM2IzNTg3OTIwMjdjZmNiYjc1MDVmMw==\">参考</span></p>\n<h2 id=\"git使用\"><a class=\"anchor\" href=\"#git使用\">#</a> Git 使用</h2>\n<p>虽然 git clone 过很多，但没怎么 push 过，本博客也是 hexo 代劳了相关操作。简单记录下</p>\n<ol>\n<li>初始化 <code>git init</code> ，初始化一次就好</li>\n<li><code>git add .</code>  将项目上所有的文件添加到仓库中的意思，如果想添加某个特定的文件，只需把。换成这个特定的文件名即可</li>\n<li><code>git commit -m &quot;first commit&quot;</code> ，&quot;&quot; 内表示你对这次提交的注释，就是 github 上对应文件行中间的那个注释。此时是先提交到本地仓库（本地有才能 push）</li>\n<li><code>git remote add origin url</code>  ，就是设置 clone 时的那个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly94eHg=\">https://xxx</span> url 地址为远程仓库，也就是你的 git 项目仓库地址</li>\n<li><code>git push -u origin xx</code>  push 到 origin（远程仓库的默认名，可改）的 xx 分支</li>\n</ol>\n<p>1，4 第一次要设置，之后就是 add（idea 的话可以自动添加），commit，push 就好了</p>\n<h2 id=\"概念及架构\"><a class=\"anchor\" href=\"#概念及架构\">#</a> 概念及架构</h2>\n<p>RPC（Remote Procedure Call）远程过程调用协议，是一个协议，具体落地自己实现。</p>\n<p>RPC 和 HTTP 有什么区别呢？</p>\n<ul>\n<li>场景：在微服务下，A 服务调用 B 服务（要数据）就是远程调用</li>\n<li>意义：传统可以使用 http，但会有很多没必要的数据（协议头臃肿？），增加传输负担，降低速率，在服务和服务间有的数据响应的需求就可以通过自定义协议。</li>\n</ul>\n<h3 id=\"技术栈\"><a class=\"anchor\" href=\"#技术栈\">#</a> 技术栈</h3>\n<ul>\n<li>Spring Boot （实现自定义注解等）</li>\n<li>Netty（处理异步事件 —— 请求发送和结果接收），future、promise</li>\n<li>Zookeeper（注册中心）：Curator 类进行注册、发现等</li>\n<li>SPI</li>\n<li>自定义协议、重试机制、容错机制、拦截</li>\n</ul>\n<p><strong>思考过程：</strong></p>\n<ul>\n<li>最简单就是服务 A（调用方）直接写死拿服务 B（提供方）</li>\n<li>写死了修改麻烦，怎么自动呢？添加个注册中心后，先发现后调用</li>\n<li>那万一提供方挂了，好比服务器宕机 —— 自然想到分布式，提供方也可以有多个，那就需要规划路由层处理（负载均衡）</li>\n<li>我们知道进程通讯底层都是以字节流 / 字符串的形式进行数据传输，使用二进制而非传递对象。因此在路由选择后又应该有序列化处理</li>\n<li>提供方也不该谁都可以调用，因此需要安全校验（token），也就是加拦截器，对其统一处理，又可以规划一个连接器链</li>\n<li>此时我们从原始的（调用方、提供方），扩展到了（注册中心、调用方、路由层、序列化、拦截器、提供方）</li>\n<li>是一个高耦合的整体，我们希望除了提供方和调用方都能解耦（双方使用都依赖一个公共模块即可快速对接）</li>\n<li>那就是：SPI（类似 IOC 和 AOP），注册中心、路由层、序列化、拦截器都由 SPI 动态加载</li>\n<li>某个提供方失败了也应该有处理方案，也就是要有容灾 / 容错机制来保证高可用</li>\n<li>提供方不该同步提供服务吧？线程池</li>\n<li>接口不能两个小组口头约定吧，再解耦，在公共依赖模块中还应该有一个接口包统一双方的使用。</li>\n<li>但两者一个是针对 RPC 的模块，一个设计业务，而且业务可能变动频繁，RPC 大致定了就定了，因此还是再拆个业务模块出来，乃至于不同业务不同模块？好像又会很多，不知道实际开放中是怎样处理的</li>\n</ul>\n<h2 id=\"设计思路\"><a class=\"anchor\" href=\"#设计思路\">#</a> 设计思路</h2>\n<p>根据需要，也就是上面的演变过程，设计了不同的包，同时除了调用方和提供方之外都可以用一个 SPI 模块处理，实现解耦。此外对于一些具体的功能要细分解耦，像代理中有包含初始化、和具体的操作，初始化里又有配置文件的加载、bean 初始化，这些都应该拆解到如注册中心初始化、序列化初始化等（工厂模式加载）。</p>\n<h3 id=\"路由层\"><a class=\"anchor\" href=\"#路由层\">#</a> 路由层</h3>\n<p>根据负载均衡的算法算则提供的服务，提升高可用</p>\n<ul>\n<li>用哈希增加节点的时候，会有影响</li>\n<li>可以用确保一致性的哈希环</li>\n<li>为了避免服务挂了，设计当前访问信息的时候还可以加个备用节点</li>\n<li>轮询由调用方完成，内存自增就行了，而不是提供方处理</li>\n</ul>\n<h3 id=\"协议层\"><a class=\"anchor\" href=\"#协议层\">#</a> 协议层</h3>\n<p>通信要定制好双方协议<br />\n包括安全校验、状态显示、传输过程可能出现的粘包半包问题的处理、序列化（多以工具类实现，根据需求选择即可）</p>\n<p><img data-src=\"image-20240424213042381.png\" alt=\"\" /></p>\n<ul>\n<li>魔数：可以安全校验</li>\n<li>版本：协议版本</li>\n<li>消息类型：请求 / 响应（最基本的）</li>\n<li>状态：成功与否</li>\n<li>请求 id：timeout、唯一性等处理</li>\n<li>序列化方式长度：不像 int、long 等固定长</li>\n<li>请求体的数据长度：处理粘包、半包问题</li>\n<li>请求体：具体的请求内容</li>\n</ul>\n<h4 id=\"通讯处理\"><a class=\"anchor\" href=\"#通讯处理\">#</a> 通讯处理</h4>\n<p>使用 Bootstrap，Bootstrap 是 Netty 提供的一个便利的工厂类，可以通过它来完成客户端或服务端的 Netty 初始化。</p>\n<ul>\n<li>ServerBootstrap 用于服务端</li>\n<li>Bootstrap 用于客户端</li>\n</ul>\n<p>（1）EventLoopGroup：不论是服务端还是客户端，都必须指定 EventLoopGroup。在这个例子中，指定了 NioEventLoopGroup，表示一个 NIO 的 EventLoopGroup。<br />\n（2）ChannelType：指定 Channel 的类型。因为是客户端，所以使用了 NioSocketChannel。<br />\n（3）Handler：设置处理数据的 Handler</p>\n<p>在 Netty 中，Channel 是一个 Socket 的抽象，它为用户提供了关于 Socket 状态 (是否是连 接还是断开) 以及对 Socket 的读写等操作。每当 Netty 建立了一个连接后，都会有一个对应 的 Channel 实例</p>\n<ul>\n<li>NioSocketChannel，代表异步的客户端 TCP Socket 连接 （this）</li>\n<li>NioServerSocketChannel，异步的服务器 Socket 连接</li>\n<li>NioDatagramChannel，异步的 UDP 连接 NioSctpChannel，异步的客户端 Sctp 连接</li>\n<li>NioSctpServerChannel，异步的 Sctp 服务器端连接</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个客户 / 服务端的引导类  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bootstrap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建反应器轮询组，指定轮询的线程数  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>eventLoopGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Bootstrap 是 Netty 提供的一个便利的工厂类，可以通过它来完成客户端或服务端的 Netty 初始化  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span>eventLoopGroup<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 并设置到 Bootstrap 引导类实例  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NioSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 设置通道的 IO 类型。Netty 不止支持 Java NIO，也支持阻塞式的 OIO。  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelOption</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SO_KEEPALIVE</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 设置传输通道的配置选项，第二个表示是否开启 TCP 底层心跳机制，true 为开启，false 为关闭。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInitializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> socketChannel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t            <span class=\"token comment\">// 向子通道流水线添加一个 Handler 业务处理器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>xxHandler<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 连接，通过调用 sync () 同步方法阻塞直到绑定成功</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">ChannelFuture</span> future <span class=\"token operator\">=</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 写入数据  </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>future<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>等待响应就是用 future，Future 表示一个可能还没有完成的异步任务的结果</p>\n<div class=\"note info no-icon\">\n<ul>\n<li>get（）方法可以当任务结束后返回一个结果，如果调用时，工作还没有结束，则会阻塞线程，直到任务执行完毕</li>\n<li>get（long timeout,TimeUnit unit）做多等待 timeout 的时间就会返回结果</li>\n<li>cancel（boolean mayInterruptIfRunning）方法可以用来停止一个任务，如果任务可以停止（通过 mayInterruptIfRunning 来进行判断），则可以返回 true, 如果任务已经完成或者已经停止，或者这个任务无法停止，则会返回 false.</li>\n<li>isDone（）方法判断当前方法是否完成</li>\n<li>isCancel（）方法判断当前方法是否取消</li>\n</ul>\n</div>\n<p>Selector 在 Java NIO 中可以<strong>检测到一个或者多个 Channel</strong>，并能够<strong>知晓通道是否为诸如读写事件做好准备的组件</strong>。这样，一个单独的线程可以<strong>管理多个 Channel</strong>，从而管理多个网络连接。这样的单个线程管理管理多个 Channel 可以<strong>极大的减少线程间切换的开销</strong>。<br />\n也就是下面的 poller？<br />\nnetty 是一款非阻塞框架，acceptor 接收请求，poller 起 select 的作用，像一个列车一样，把请求来回在 acceptor 和线程池之间传递，因为如果没有 poller，就不是 NIO 了而是传统的 BIO，NIO 的作用就是创建一个通道 channel，用这个通道来处理一堆请求。</p>\n<p>netty 的实例化，需要启动两个 EventLoopGroup，一个用于处理客户端连接的事件，另一个用于处理客户端发送的数据的事件。</p>\n<ol>\n<li><strong>Boss Group（老板组）：</strong> 负责处理客户端连接请求的事件。当客户端发起连接请求时，Boss Group 接收并处理这些连接请求，将连接分配给 Worker Group 中的一个 EventLoop 处理。</li>\n<li><strong>Worker Group（工人组）：</strong> 负责处理客户端发送的数据的事件。一旦客户端的连接被接受，Worker Group 就会负责处理连接上的读写操作，处理数据的传输和处理逻辑。</li>\n</ol>\n<p>使用两个 EventLoopGroup 的好处是可以将连接的接收和处理逻辑分开，提高了系统的并发处理能力和性能。Boss Group 负责接受连接请求并分发给 Worker Group 处理，Worker Group 负责处理连接上的读写操作，实现了连接的异步处理。</p>\n<p>此外，使用两个 EventLoopGroup 还可以更好地控制线程池的大小，使得连接请求和数据处理的线程池能够根据实际情况进行灵活调整，提高了系统的灵活性和可维护性</p>\n<h4 id=\"可能存在的问题\"><a class=\"anchor\" href=\"#可能存在的问题\">#</a> 可能存在的问题</h4>\n<blockquote>\n<p>现象分析</p>\n</blockquote>\n<p><strong>粘包</strong></p>\n<ul>\n<li>现象，发送 abc def，接收 abcdef</li>\n<li>原因\n<ul>\n<li>应用层：接收方 ByteBuf 设置太大（Netty 默认 1024）</li>\n<li>滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大，这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包</li>\n<li>Nagle 算法： TCP 协议如果发送的网络数据包太小，那么他本身会启用 Nagle 算法（可配置是否启用）对较小的数据包进行合并</li>\n</ul>\n</li>\n</ul>\n<p>举个例子理解：<br />\n<img data-src=\"https://pic3.zhimg.com/80/v2-ef77947c1c0c490369f8ce0c3cca3c1a_720w.webp\" alt=\"\" /><br />\n假设客户端分别发送了两个数据包 D1 和 D2 给服务端，由于服务端一次读取到的字节数是不确定的，故可能存在以下 4 种情况。</p>\n<ul>\n<li>服务端分两次读取到了两个独立的数据包，分别是 D1 和 D2，没有粘包和拆包；</li>\n<li>服务端一次接收到了两个数据包，D1 和 D2 粘合在一起，被称为 TCP 粘包；</li>\n<li>服务端分两次读取到了两个数据包，第一次读取到了完整的 D1 包和 D2 包的部分内容，第二次读取到了 D2 包的剩余内容，这被称为 TCP 拆包；</li>\n<li>服务端分两次读取到了两个数据包，第一次读取到了 D1 包的部分内容 D1_1，第二次读取到了 D1 包的剩余内容 D1_2 和 D2 包的整包。</li>\n</ul>\n<p>如果此时服务端 TCP 接收滑窗非常小，而数据包 D1 和 D2 比较大，很有可能会发生第五种可能，即服务端分多次才能将 D1 和 D2 包接收完全，期间发生多次拆包。</p>\n<p><strong>半 / 拆包</strong></p>\n<ul>\n<li>现象，发送 abcdef，接收 abc def</li>\n<li>原因\n<ul>\n<li>应用层：接收方 ByteBuf 小于实际发送数据量</li>\n<li>滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时放不下了，只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包</li>\n<li>MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包。MSS 是 TCP 报文段中的数据字段的最大长度。数据字段加上 TCP 首部才等于整个的 TCP 报文段。所以 MSS 并不是 TCP 报文段的最大长度，而是：MSS=TCP 报文段长度 - TCP 首部长</li>\n</ul>\n</li>\n</ul>\n<p>本质是因为 TCP 是流式协议，消息无边界</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<h3 id=\"拦截层\"><a class=\"anchor\" href=\"#拦截层\">#</a> 拦截层</h3>\n<p>在服务发送前后和服务接受前后通过一个 filter 链（filter LIst，责任链设计模式）可以进行一系列的增强操作。可以实现如  限流（加锁 + 释放锁）等</p>\n<h3 id=\"spi\"><a class=\"anchor\" href=\"#spi\">#</a> SPI</h3>\n<p>使用 SPI 后对于整个程序的拓展性有了极大的提升。</p>\n<ul>\n<li>制定好接口规范协议后，其他服务按照你制定好的服务协议。随后使用 SPI 进行可插拔方式来加载不同的类。</li>\n<li>例如：jdbcl 驱动，我先制定好一个协议，我不管你是什么 sql 厂商，你都遵循我的协议来，然后我使用 spi 机制来进行加载类就行。</li>\n<li>java 中 ServiceLoader 的懒加载、Spring MVC、Spring Boot 的装配等等都是该思想</li>\n</ul>\n<p>通过 SPI 机制（配置文件中也是 key，value 的格式）去按需加载 bean，类名加载到 Map，调用的时候若没有再初始化，并没有直接打破双亲委派机制，而是在双亲委派机制之上提供了一种动态加载服务实现类的方式。<br />\n它通过在指定的路径下的  <code>META-INF/services</code>  目录中的配置文件中列出服务接口的实现类，然后通过  <code>ServiceLoader</code>  类在运行时动态加载这些实现类。这样的机制使得服务接口的实现类可以由不同的类加载器加载，而不受双亲委派机制的限制</p>\n<h3 id=\"容错层-高可用\"><a class=\"anchor\" href=\"#容错层-高可用\">#</a> 容错层 （高可用）</h3>\n<p>在服务提供方发生错误时 (无法提供服务)，此时有可能还会有其他服务能提供，因此还需要尝试找其他服务。</p>\n<ul>\n<li>硬编码：在发送方的代理类方法中，catch 里直接写相应的措施</li>\n<li>抽离出来，同样可以用 SPI 那套解决</li>\n</ul>\n<p>内容不多，重点是设计架构时的思维</p>\n<h3 id=\"并发处理-高并发\"><a class=\"anchor\" href=\"#并发处理-高并发\">#</a> 并发处理 （高并发）</h3>\n<p>对于某一具体的提供方，当处理多请求时，同步就效率太低了。可以加入个线程池进行异步处理。还可以结合拒绝策略，自定义某个返回状态，让调用方换个提供方。</p>\n<h3 id=\"一些代码tips\"><a class=\"anchor\" href=\"#一些代码tips\">#</a> 一些代码 tips</h3>\n<ul>\n<li>Spring 在一些 <code>@Enablexx</code>  注解中，往往 import 某个想被执行的类。通过该方式就可以替换掉 “使用反射应用配置文件” 的模式。比如设置个自定义注解 <code>EnableConsumerRpc</code>   <code>@Import(ConsumerPostProcessor.class)</code>  ，在 ConsumerPostProcessor 实现  <code>BeanPostProcessor, EnvironmentAware, InitializingBean</code>  从而实现环境配置、初始化一些 bean、代理层注入的操作。在 Consumer 的 main 使用 <code>EnableConsumerRpc</code>  注解就完成了相关配置。</li>\n<li></li>\n</ul>\n<h3 id=\"待处理\"><a class=\"anchor\" href=\"#待处理\">#</a> 待处理</h3>\n<ul>\n<li>PropertiesUtils 读取配置的方法还没吃透</li>\n</ul>\n<h2 id=\"遇到过的问题\"><a class=\"anchor\" href=\"#遇到过的问题\">#</a> 遇到过的问题</h2>\n<ul>\n<li>本地不适用注册时指定通信 ok，调试服务器 zookeeper 时注册成功了，提供方显示调用成功，但调用方显示调用失败（连接成功，通信了） <code>java.util.concurrent.TimeoutException</code>  5000 MILLISECONDS 超时了，增加到 10 s 还是超时，不是服务器慢？然而从打印的结果，确实是从发送请求到报异常是 10s，超时错没问题。但 provider 不到 20ms 就响应了。只能是结果未能正常返回，排查下 provider 看下。\n<ul>\n<li>破案了， <code>socketChannel Handle</code>  中最后一步操作是  <code>ChannelHandlerContext.writeAndFlush()</code>  客户端中单独做了个 sendRequest 方法来实现，而服务端，参考别人写的，其实是写在了一个独立的后置处理中（因为不是主体业务一直没实现），没发现回传被绑定在这了，从而一直没实现服务端对 future 的响应...... 之前确实没接触，流程还是不完善，应该是从小往外的过程（迭代），而所谓的预设框架（学别人的）有点纰漏就会出问题。没毛病，自己写了个 <code>writeAndFlush</code>  搞定</li>\n</ul>\n</li>\n<li>consumer 中断后 provider 显示强制关闭了一个现有连接，不应该是调用完自动断开了吗？</li>\n<li>对于调用和提供方都还是需要依赖 RPC 模块（架构独立出来），跑一下 Rpc 打包成 jar 包双方也独立出来能不能跑？模拟实际开发互不可见的情况；√成了，但是中间遇到了依赖打包的问题。</li>\n<li>第一次特别慢。客户端连接 zookeeper 慢。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhc3VhbGxjL2FydGljbGUvZGV0YWlscy8xMTkwMDY3MDM=\">解决</span></li>\n</ul>\n<h2 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h2>\n<ul>\n<li>漏洞？requestId 用的 AtomicLong 自增， 那对于多个调用方，自增 id 不就可能一样？不一定影响使用，但数据不规范，还是需要一个中转？那不又成了 CS 模式</li>\n<li><code>final byte[] serialization</code>  为什么直接用 final 修饰？（被初始化赋值之后，就不能再被赋值了。有偏颇，虽然不能再指向其他对象，但是它指向的对象的内容是可变的。引用类型是这样，基本数据类型就是定值）这个只是指定序列化方法（json 或者别的），不是对内容进行序列化。很多地方有无 final 测试下</li>\n<li>高性能如何做到呢？</li>\n<li>在 postProcessAfterInitialization 中每个每个服务都注册了一个 RegistryService？不对，用的 SpiLoader.getInstance ().get (registryService); 始终是一个管理</li>\n<li>远程连接每次都是新开不会自动关闭，（打开的文件、数据库连接）等需要手动，其他由线程池开启的任务，通过定期释放线程池？Handler 说是会自动释放，但关闭程序还是会显现失去连接</li>\n</ul>\n<h2 id=\"扩展\"><a class=\"anchor\" href=\"#扩展\">#</a> 扩展</h2>\n<ul>\n<li>目前实现的服务查询方法都直接调用 ZooKeeper。 如果经常查询服务，还可以使用 ServiceCache</li>\n<li>开源的高性能 RPC 框架 ——Dubbo</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbHNoYW4vcC8xMTQyMzI2OS5odG1s\">打包依赖问题</span></li>\n</ul>\n<h2 id=\"面试问题\"><a class=\"anchor\" href=\"#面试问题\">#</a> 面试问题</h2>\n<ol>\n<li>在项目中使用了代理设计模式来简化用户调用流程，请解释一下代理设计模式在该项目中的具体应用和优势。</li>\n</ol>\n<ul>\n<li>代理设计模式可以简化用户逻辑，将实现细节交还给开发者。像 Mybatis 的 Mapper 层也是一样（解析参数、连接数据库等一些列操作进行了封装）。具体的又有动态（jdk 和 xx）、静态，回看 java 笔记</li>\n</ul>\n<ol start=\"2\">\n<li>项目中提到支持多种序列化方式，例如 Hessian 和 json，请说明在选择序列化方式时需要考虑哪些因素并举例说明不同序列化方式的适用场景。</li>\n</ol>\n<ul>\n<li>\n<p>两个进程之间通信（无论同不同主机，采用何种管道（Pipes）、消息队列（Message Queues）、共享内存（Shared Memory）、信号量（Semaphores）、套接字（Sockets））底层都是以字节流 / 字符串的形式进行数据传输，使用二进制而非传递对象。</p>\n</li>\n<li>\n<p>选择 Hessian 还是 JSON 序列化取决于具体的应用场景和需求。如果你需要高效的网络通信、跨语言支持，并且可以接受一定的可读性差，那么可以选择 Hessian。如果你更看重可读性（语法结构简单清晰，采用了键值对的形式）、通用性和浏览器端的适用性，那么 JSON 可能更适合你的需求。我们希望服务之间是尽快响应的，不像一个外部请求那样需要可读性，因此最后选择 Hessian。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>你可以详细解释一下项目中使用的序列化机制的选择和实现方式，并说明在实际应用中如何评估和选择合适的序列化方式。</li>\n</ol>\n<ul>\n<li>就是上面的区别，根据需求，实现的话就是官网拉取一个实现类，有固定的模板，并没有做这方面创新</li>\n</ul>\n<ol start=\"4\">\n<li>你可以详细解释一下项目中使用的负载均衡算法的选择和实现方式，并说明在实际应用中如何评估和调整负载均衡策略。</li>\n</ol>\n<ul>\n<li>轮询：</li>\n<li>一致性哈希：比取余哈希，更均匀分布、灵活性、故障恢复能力、降低数据迁移成本和简化管理等优点</li>\n<li>实际应用：根据服务器不同的负载能力而选择策略</li>\n</ul>\n<ol start=\"5\">\n<li>你可以详细解释一下在使用 Zookeeper 和 Redis 作为注册中心时，它们各自的作用和优势是什么，并举例说明它们在该项目中的具体应用。</li>\n</ol>\n<ul>\n<li>Zookeeper：有临时节点和私有节点，服务下线后，临时节点也关闭。</li>\n<li>Redis：要不断轮询，对服务续签 / 解除。</li>\n<li>除了注册和修改的差异，前者有监听，后者没那么好实现。拿取都是从缓存中。因此在很稳定的服务情景可以选择 Redis，但需要频繁调整的，比如有个更新服务器临时下线等，还是 Zookeeper 好用</li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>在负载均衡策略中，你提到了轮询和一致性哈希算法，请解释一下这两种算法的原理和适用场景，并说明在该项目中如何实现这些负载均衡策略。（问题 4）</p>\n</li>\n<li>\n<p>容错机制在分布式系统中非常重要，请详细说明在该项目中引入的容错机制是如何工作的，并举例说明它们如何提高系统的健壮性和可用性。</p>\n</li>\n</ol>\n<ul>\n<li>如 a、b、c 报错，通常来说不是在业务层面，因为业务逻辑一致，这出问题了都会挂。更多是某个服务宕机、超时了，这个时候我们需要有故障转移。某个提供不了服务可以转到别的，保证健壮性和可用性。但也不能一致转移导致死循环，因此设计了一个最大重试次数。具体的看业务场景，如果不重要，比如一些日志记录，那就可以直接 fastfail。</li>\n</ul>\n<ol start=\"8\">\n<li>拦截器层在该项目中被用来实现哪些功能？请列举一些常见的拦截器类型，并解释它们的作用和如何实现。</li>\n</ol>\n<ul>\n<li>双方之间安全校验 - token 拦截器</li>\n<li>限流操作，加锁，释放锁（前置和后置）</li>\n<li></li>\n</ul>\n<ol start=\"9\">\n<li>在项目中引入了拦截器层，请解释一下在该项目中如何定义和使用拦截器，并说明拦截器在系统中的执行顺序和作用。</li>\n</ol>\n<ul>\n<li>SPI 的机制、来加载拦截器，遵顼规则统一加载。并写了个拦截器链统一进行拦截器处理。</li>\n<li>顺序就是服务、客服端业务的前后</li>\n</ul>\n<ol start=\"10\">\n<li>SPI 层在该项目中被用作基础架构，请解释一下系统 SPI 和用户 SPI 的区别和作用，并说明它们在项目中的具体应用场景。</li>\n</ol>\n<ul>\n<li>系统 SPI：系统 bean 统一加载管理</li>\n<li>用户 SPI：对于自定义的一些增强的功能，</li>\n<li>所有的模块、像代理设计模式、注册中心、序列化、负载均衡、容错机制等都可以通过 SPI 选择加载，将 key-value 写在配置文件里</li>\n</ul>\n<ol start=\"11\">\n<li>在项目中使用了 SPI 层来实现高拓展性，请说明一下在该项目中如何定义和使用 SPI 接口，并解释一下 SPI 的工作原理和实现方式。</li>\n</ol>\n<ul>\n<li>SPI 是 java 提供服务发现的一个机制，和 new 不同，需要配置文件 key-value，使用对应的语法去加载对应的类，JavaSE 是都加载，我们只是按需加载。</li>\n<li>ServiceLoader 可以继续扩展，打破了 java 类的双亲委派机制，属于更上层的，用户类加载不到，但是读取了上下文去加载\n<ul>\n<li>双亲委派机制是 Java 类加载器的一种重要原则，它指的是当一个类加载器收到加载类的请求时，首先将加载任务委派给其父类加载器完成，只有在父类加载器无法完成加载任务时，子类加载器才会尝试自己加载。这样的机制保证了类的唯一性和类加载的一致性。</li>\n<li>SPI 机制并没有直接打破双亲委派机制，而是在双亲委派机制之上提供了一种动态加载服务实现类的方式。它通过在指定的路径下的  <code>META-INF/services</code>  目录中的配置文件中列出服务接口的实现类，然后通过  <code>ServiceLoader</code>  类在运行时动态加载这些实现类。这样的机制使得服务接口的实现类可以由不同的类加载器加载，而不受双亲委派机制的限制</li>\n</ul>\n</li>\n</ul>\n<ol start=\"12\">\n<li>Netty 在该项目中被用作什么角色？请解释一下 Netty 的主要特点和优势，并说明在该项目中为什么选择 Netty 作为网络通信框架。</li>\n</ol>\n<ul>\n<li>本来是 socket，但较为复杂，具有高性能（多路复用、零拷贝、内存池、多线程），可以处理大量的并发连接和高吞吐量的数据传输。</li>\n<li>异步非阻塞，Java Socket 则是同步阻塞的模型，每个连接都需要占用一个线程，当连接数增加时，会导致线程资源的浪费和系统性能下降\n<ul>\n<li>基于事件驱动的模型。EventLoop，事件循环负责处理所有的 I/O 事件，包括接收连接、读取数据、写入数据等。Netty 通常会有多个事件循环，每个事件循环运行在一个单独的线程中。</li>\n<li>使用 Java NIO（New I/O）提供了非阻塞的 I/O 操作，这意味着当一个 I/O 操作不能立即完成时，线程不会被阻塞，而是会继续处理其他任务或事件。当 I/O 操作完成时，Netty 会通知事件循环，并将结果返回给调用方。</li>\n<li>回调、Selector 负责监视多个通道的状态，并在通道就绪时通知事件循环。</li>\n</ul>\n</li>\n<li>Java Socket 主要支持 TCP 和 UDP，Netty 支持多种网络协议的实现，包括 TCP、UDP、HTTP、WebSocket 等</li>\n</ul>\n<ol start=\"13\">\n<li>你在项目中提到了自定义传输协议数据格式，请详细解释一下自定义传输协议的设计思路和实现方式，并说明为什么选择自定义传输协议。</li>\n</ol>\n<ul>\n<li>为什么：进程之间数据传输，要指定好格式，如果不指定的话，接收方如何确定是否是调用方发送而不是别的，以及如何获取到消息、解读。还可以解决粘包问题。</li>\n<li>魔数：安全校验；数据类型：请求还是响应，确定业务类型；状态：发送 / 返回的成功 / 失败；ID；序列化方式和长度；数据长度</li>\n</ul>\n<ol start=\"14\">\n<li>项目中使用了 Spring Boot 的自动装配机制，请解释一下自动装配的原理和工作方式，并说明在该项目中如何利用自动装配来简化配置过程。</li>\n</ol>\n<ul>\n<li>注解的方式，import () 来加载</li>\n</ul>\n<ol start=\"15\">\n<li>你在项目中提到了高拓展性，请解释一下在该项目中如何实现高拓展性，并举例说明用户如何根据配置策略引入和替换模块。</li>\n</ol>\n<ul>\n<li>SPI 统一管理模块。比如用户加了个注册中心，在 key 和 value 加上，SPI 去找，对应上了就会加载</li>\n</ul>\n<ol start=\"16\">\n<li>项目中提到了重试策略，请解释一下在该项目中如何实现重试策略，并说明如何避免重试导致的潜在问题，例如请求重复执行等。</li>\n</ol>\n<ul>\n<li>如何保证幂等性，提供方要实现幂等性、唯一索引、或者 redis 去重（UUID）</li>\n</ul>\n<ol start=\"17\">\n<li>请说明一下在该项目中遇到的主要挑战和问题，并解释你是如何解决这些挑战和问题的</li>\n</ol>\n<ul>\n<li>一开始没用 SPI，后续发现扩展行为就比较麻烦，参考了 dubbo</li>\n<li>zookeeper 作为注册中心遇到的问题</li>\n<li>redis 自己实现，服务发现、更新等。每个服务自身续签的时候还要轮询别的服务并删除</li>\n</ul>\n<ol start=\"18\">\n<li>实现的 rpc 跟 dubbo 有什么区别，为什么不用 dubbo 要用这个 rpc？</li>\n</ol>\n<ul>\n<li>更轻量化，实现基本的服务调用</li>\n</ul>\n<ol start=\"19\">\n<li>\n<p>如果把 rpc 改成分布式架构，应该怎么改 ，哪一部分要改成分本式？注册中心改成分布式，客户端的接口的幂等性和多个分布式注册中心之间的数据一致性怎么保证或者平衡？心跳检测是在一个单线程定时器里，这一部分要不要分布式一下？</p>\n</li>\n<li>\n<p>服务端节点应该怎么优雅地上下线？客户端什么时候会拉取最新的服务节点？拉取的是所有的服务节点还是部分服务节点？为什么？</p>\n</li>\n<li>\n<p>客户端和服务端的定时器的区别？</p>\n</li>\n<li>\n<p>rpc 为什么要基于 tcp？能不能用 udp？该怎么改或者定怎样的传输协议，可靠性传输相关的要不要考虑一下？</p>\n</li>\n<li>\n<p>能不能在除了 rpc 的应用层，在别的层（比如传输层和网络层）做负载均衡？大概该怎么做？</p>\n</li>\n</ol>\n<hr />\n<h1 id=\"这是分界线最终实现是上面的下面的是学习过程中整理的\"><a class=\"anchor\" href=\"#这是分界线最终实现是上面的下面的是学习过程中整理的\">#</a> 这是分界线，最终实现是上面的，下面的是学习过程中整理的</h1>\n<p>一些内容可能有偏颇，因为当时学的还不深入，参考项目也是别的，如果是也想学习一个 RPC 看上面就好，下面的仅自我留档，不用管</p>\n<h1 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h1>\n<p>RPC（Remote Procedure Call）远程过程调用协议，一种通过网络从远程计算机上请求服务，而不需要了解底层网络技术的协议。RPC 它假定某些协议的存在，例如 TPC/UDP 等，为通信程序之间携带信息数据。在 OSI 网络七层模型中，RPC 跨越了传输层和应用层，RPC 使得开发，包括网络分布式多程序在内的应用程序更加容易。</p>\n<p>过程是什么？ 过程就是业务处理、计算任务，更直白的说，就是程序，就是想调用本地方法一样调用远程的过程。可以让客户端直接调用服务端方法就像调用本地方法一样简单的框架，比如 Dubbo、Motan、gRPC 这些。 如果需要和 HTTP 协议打交道，解析和封装 HTTP 请求和响应。这类框架并不能算是 “RPC 框架”，比如 Feign。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjUyODE4OQ==\">入门参考</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMDA2NTY3NjQ=\">实现参考 1</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZpZWdvMTk5OS93eHktcnBj\"> 实现参考 2</span></p>\n<p>一个最简单的 RPC 框架使用示意图如下图所示：<br />\n<img data-src=\"https://github.com/viego1999/wxy-rpc/raw/master/images/%E7%AE%80%E5%8D%95RPC%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"\" /></p>\n<p>RPC 框架一般必须包含三个组件，分别是<strong>客户端、服务端</strong>以及<strong>注册中心</strong>，一次完整的 RPC 调用流程一般为：</p>\n<ol>\n<li>服务端启动服务后，将他提供的服务列表发布到注册中心（服务注册）；</li>\n<li>客户端会向注册中心订阅相关的服务地址（服务订阅）；</li>\n<li>客户端通常会利用本地代理模块 Proxy 向服务端发起远程过程调用，Proxy 负责将调用的方法、参数等数据转化为网络字节流；</li>\n<li>客户端从服务列表中根据负载均衡策略选择一个服务地址，并将数据通过网络发送给服务端；</li>\n<li>服务端得到数据后，调用对应的服务，然后将结果通过网络返回给客户端。</li>\n</ol>\n<h1 id=\"和mq的区别\"><a class=\"anchor\" href=\"#和mq的区别\">#</a> 和 MQ 的区别</h1>\n<hr />\n<p>主要使用场景的区别，如下：  （现在觉得不全对，提供方也可以用线程池实现内部调用的异步，也没有规定调用方不能用吧）<br />\nMQ 适用于 消息上游 与 下游 解耦，不关注下游执行结果，异步；<br />\nRPC 适用于 消息上游 关注下游执行结果，同步；</p>\n<p>解释下 同步和异步：<br />\n<strong>同步</strong>是指所有的操作都做完，才返回给用户。 <strong>异步</strong>是指 将用户请求放入消息队列，并反馈给用户，然后程序再去执行操作。</p>\n<p><strong>同步</strong>就相当于是 当客户端发送请求给服务端，在等待服务端响应的请求时，客户端不做其他的事情。当服务端做完了才返回到客户端。这样的话客户端需要一直等待。用户使用起来会有不友好。</p>\n<p><strong>异步</strong>就是，当客户端发送给服务端请求时，在等待服务端响应的时候，客户端可以做其他的事情，这样节约了时间，提高了效率。</p>\n<hr />\n<p>话是这么摘过来的，但<a href=\"#RPC%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F\">该小节</a>也有 RPC 异步的操作，感觉不是这么靠这个分开。MQ 更解耦一些。通过消息队列能处理更多的请求，之前自己阿里服务器开了个 RocketMQ 确实响应要几秒，适合大量非即时的需求，小量即时的 RPC 应该更适合？但耦合度高？其实也通过模块分离、中间层接口进行了解耦</p>\n<h1 id=\"框架思路\"><a class=\"anchor\" href=\"#框架思路\">#</a> 框架思路</h1>\n<p>一般情况下， RPC 框架不仅要提供服务发现功能，还要提供负载均衡、容错等功能，这样的 RPC 框架才算真正合格的</p>\n<p>简单说一下设计一个最基本的 RPC 框架的思路：</p>\n<p><img data-src=\"https://pic4.zhimg.com/80/v2-4986c5136b9926338257b3acb137626f_720w.webp\" alt=\"\" /></p>\n<ol>\n<li><strong>注册中心</strong> ：注册中心首先是要有的，推荐使用 Zookeeper。注册中心负责服务地址的注册与查找，相当于目录服务。服务端启动的时候将服务名称及其对应的地址 (ip+port) 注册到注册中心，服务消费端根据服务名称找到对应的服务地址。有了服务地址之后，服务消费端就可以通过网络请求服务端了。</li>\n<li><strong>网络传输</strong> ：既然要调用远程的方法就要发请求，请求中至少要包含你调用的类名、方法名以及相关参数吧！推荐基于 NIO 的 Netty 框架。</li>\n<li><strong>序列化</strong> ：既然涉及到网络传输就一定涉及到序列化，你不可能直接使用 JDK 自带的序列化吧！JDK 自带的序列化效率低并且有安全漏洞。 所以，你还要考虑使用哪种序列化协议，比较常用的有 hession2、kyro、protostuff。</li>\n<li><strong>动态代理</strong> ： 另外，动态代理也是需要的。因为 RPC 的主要目的就是让我们调用远程方法像调用本地方法一样简单，使用动态代理可以屏蔽远程方法调用的细节比如网络传输。也就是说当你调用远程方法的时候，实际会通过代理对象来传输网络请求，不然的话，怎么可能直接就调用到远程方法呢？</li>\n<li><strong>负载均衡</strong> ：负载均衡也是需要的。为啥？举个例子我们的系统中的某个服务的访问量特别大，我们将这个服务部署在了多台服务器上，当客户端发起请求的时候，多台服务器都可以处理这个请求。那么，如何正确选择处理该请求的服务器就很关键。假如，你就要一台服务器来处理该服务的请求，那该服务部署在多台服务器的意义就不复存在了。负载均衡就是为了避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题，我们从负载均衡的这四个字就能明显感受到它的意义。</li>\n</ol>\n<h1 id=\"目标和内容\"><a class=\"anchor\" href=\"#目标和内容\">#</a> 目标和内容</h1>\n<p>实现基于 Netty + Zookeeper + SpringBoot 实现的自定义 RPC 框架。同时引入其他通信协议，有 Http、Socket 等，注册中心引入了 Zookeeper、Nacos、Eureka 等。基于 JMH 压测在 10000 并发量下的吞吐量在 29300 上下。</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> 实现基于 Netty/Socket/Http 三种方式进行网路通信</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\" /><label for=\"cbx_1\">  自定义消息协议，编解码器</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\">  五种序列化算法（JDK、JSON、HESSIAN、KRYO、PROTOSTUFF）</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\">  三种负载均衡算法（RoundRobin、Random、ConsistentHash）</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\" /><label for=\"cbx_4\">  两种动态代理（JDK、CGLIB）</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\" /><label for=\"cbx_5\">  基于 Zookeeper 的服务注册与发现，增加服务本地缓存与监听</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\" /><label for=\"cbx_6\">  集成 Spring，自定义注解提供 RPC 组件扫描、服务注册、服务消费</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\" /><label for=\"cbx_7\">  集成 SpringBoot，完成自动配置</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\" /><label for=\"cbx_8\">  增加 Netty 心跳机制，复用 Channel 连接</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\" /><label for=\"cbx_9\">  实现自定义 SPI 机制</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\" /><label for=\"cbx_10\">  10000 个线程同时发起 RPC 调用的吞吐量在 29300 上下</label></li>\n</ul>\n<h1 id=\"依赖知识\"><a class=\"anchor\" href=\"#依赖知识\">#</a> 依赖知识</h1>\n<h2 id=\"zookeeper\"><a class=\"anchor\" href=\"#zookeeper\">#</a> ZooKeeper</h2>\n<p>ZooKeeper 是一个分布式的，开放源码的分布式应用程序协同服务。ZooKeeper 的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p>\n<h3 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h3>\n<ul>\n<li>配置管理（configuration management）：如果我们做普通的 Java 应用，一般配置项就是一个本地的配置文件，如果是微服务系统，各个独立服务都要使用集中化的配置管理，这个时候就需要 ZooKeeper。需要的时候<strong>直接拉取</strong>，这样可以大大节约维护的成本。</li>\n<li>DNS 服务</li>\n<li>集群管理：zookeeper 作为注册中心，管理服务提供方的 ip 地址端口号 url 信息，并在服务消费方请求需要时发送给服务消费方，<mark>RPC 就是用这个</mark></li>\n<li>各种分布式锁：在多个用户访问同一台主机上的应用程序数据时，可以通过加锁解决并发操作。但是如果有多台主机相同的应用程序要访问同一数据时，这个时候在一台主机上加锁是不能解决另一台主机的并发问题的 ，这个时候就需要分布式锁解决这类问题。可以抽象理解分布式锁像是从所有主机中抽取出来的一把锁，或者是有一把总锁对所有主机都有效。</li>\n</ul>\n<h2 id=\"测试连接\"><a class=\"anchor\" href=\"#测试连接\">#</a> 测试连接</h2>\n<p>安装就随意找教程了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Before</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 参数 1  --> zk server 服务 ip 地址：端口号  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 参数 2 -->  会话超时时间  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 参数 3  --> 连接超时时间  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 参数 4  --> 序列化方式  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    zkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZkClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开启zookeeper的服务器ip:2181\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60000</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SerializableSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">ZkClient</span> zkClient<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span>  <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>zkClient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@After</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>服务器上 start 启动后可以监听到</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>log4j:WARN Please initialize the log4j system properly.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html<span class=\"token comment\">#noconfig for more info.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>org.I0Itec.zkclient.ZkClient@150c158 <span class=\"token comment\"># 有了就成功</span></pre></td></tr></table></figure><h2 id=\"netty\"><a class=\"anchor\" href=\"#netty\">#</a> Netty</h2>\n<ol>\n<li>Netty 是一个基于 <strong>NIO</strong> 的 client-server (客户端服务器) 框架，使用它可以快速简单地开发网络应用程序。</li>\n<li>Netty 极大地简化并优化了 TCP 和 UDP 套接字服务器等网络编程，并且性能以及安全性等很多方面都要更好。</li>\n<li>Netty <strong>支持多种协议</strong> 如 FTP，SMTP，HTTP 以及各种二进制和基于文本的传统协议。本文所要写的 HTTP Server 就得益于 Netty 对 HTTP 协议（超文本传输协议）的支持。</li>\n</ol>\n<p>首先要明确的是 Netty 主要用来做<strong>网络通信</strong> 。</p>\n<ol>\n<li><strong>实现框架的网络通信模块</strong> ： Netty 几乎满足任何场景的网络通信需求，因此，框架的网络通信模块可以基于 Netty 来做。拿 RPC 框架来说！ 我们在分布式系统中，不同服务节点之间经常需要相互调用，这个时候就需要 RPC 框架了。不同服务指点的通信是如何做的呢？那就可以使用 Netty 来做了！比如我调用另外一个节点的方法的话，至少是要让对方知道我调用的是哪个类中的哪个方法以及相关参数吧！</li>\n<li><strong>实现一个自己的 HTTP 服务器</strong> ：通过 Netty ，我们可以很方便地使用少量代码实现一个简单的 HTTP 服务器。Netty 自带了编解码器和消息聚合器，为我们开发节省了很多事！</li>\n<li><strong>实现一个即时通讯系统</strong> ： 使用 Netty 我们可以实现一个可以聊天类似微信的即时通讯系统，这方面的开源项目还蛮多的，可以自行去 Github 找一找。</li>\n<li><strong>实现消息推送系统</strong> ：市面上有很多消息推送系统都是基于 Netty 来做的。</li>\n<li>......</li>\n</ol>\n<h1 id=\"消息协议-编解码\"><a class=\"anchor\" href=\"#消息协议-编解码\">#</a> 消息协议、编解码</h1>\n<h2 id=\"消息协议\"><a class=\"anchor\" href=\"#消息协议\">#</a> 消息协议</h2>\n<p>客户端在向服务端发起调用之前，需要考虑采用何种方式将调用信息进行编码，并传输到服务端。出于对性能的考量，通信协议应该越简单越好，这样可以减少编解码的性能损耗。</p>\n<p>大部分主流 RPC 框架会选择 TCP、HTTP 协议，出名的 gRPC 框架使用的则是 HTTP2。TCP、HTTP、HTTP2 都是稳定可靠的，但其实使用 UDP 协议也是可以的，具体看业务使用的场景。成熟的 RPC 框架如阿里开源的 Dubbo 支持各种协议。</p>\n<h3 id=\"自定义协议\"><a class=\"anchor\" href=\"#自定义协议\">#</a> 自定义协议</h3>\n<p>自定义协议的要素：</p>\n<ul>\n<li>魔数，用来在第一时间判定是否是无效数据包\n<ul>\n<li><strong>快速</strong> 识别字节流是否是程序能够处理的，能处理才进行后面的 <strong>耗时</strong> 业务操作，如果不能处理，尽快执行失败，断开连接等操作。</li>\n</ul>\n</li>\n<li>版本号，可以支持协议的升级</li>\n<li>序列化算法，消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk、kryo</li>\n<li>指令类型，是登录、注册、单聊、群聊... 跟业务相关</li>\n<li>请求序号，为了双工通信，提供异步能力，通过这个请求 ID 将响应关联起来，也可以通过请求 ID 做链路追踪。</li>\n<li>正文长度，标注传输数据内容的长度，用于判断是否是一个完整的数据包</li>\n<li>消息正文，主要传递的消息内容</li>\n</ul>\n<p>简单的通信协议设计（之后默认用这个展开）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">|</span> 魔数 <span class=\"token punctuation\">(</span>4byte<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> 版本号 <span class=\"token punctuation\">(</span>1byte<span class=\"token punctuation\">)</span>  <span class=\"token operator\">|</span> 序列化算法 <span class=\"token punctuation\">(</span>1byte<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> 消息类型 <span class=\"token punctuation\">(</span>1byte<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">|</span>    状态类型 <span class=\"token punctuation\">(</span>1byte<span class=\"token punctuation\">)</span>  <span class=\"token operator\">|</span>    消息序列号 <span class=\"token punctuation\">(</span>4byte<span class=\"token punctuation\">)</span>   <span class=\"token operator\">|</span>    消息长度 <span class=\"token punctuation\">(</span>4byte<span class=\"token punctuation\">)</span>   <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>---------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span>                        消息内容 <span class=\"token punctuation\">(</span>不固定<span class=\"token punctuation\">)</span>                             <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>---------------------------------------------------------------------</pre></td></tr></table></figure><h2 id=\"编解码\"><a class=\"anchor\" href=\"#编解码\">#</a> 编解码</h2>\n<p>在 netty 中我们需要传递各种类型的消息，这些 message 可以是字符串，可以是数组，也可以是自定义的对象。不同的对象之间可能需要互相转换，这样就需要一个可以自由进行转换的转换器，为了统一编码规则和方便用户的扩展，netty 提供了一套消息之间进行转换的框架： <code>io.netty.handler.codec.MessageToMessageCodec</code> ，这个类是一个用于动态编 / 解码消息的编解码器，这可以看作是 <code>MessageToMessageDecoder</code>  和  <code>MessageToMessageEncoder</code>  的组合。这个类中有两个方法， <code>encode()</code>  就是将输入的  <code>RpcMessage</code>  编码成  <code>ByteBuf</code>  ， <code>decode()</code>  就是将  <code>ByteBuf</code>  解码成  <code>RpcMessage</code> ，编码为出站操作，解码为入站操作。</p>\n<h3 id=\"netty源码\"><a class=\"anchor\" href=\"#netty源码\">#</a> netty 源码</h3>\n<p>稍微深入了解下源码<br />\n netty 为消息和消息之间的转换提供了三个类，这三个类都是抽象类，分别是 MessageToMessageDecoder,MessageToMessageEncoder 和 MessageToMessageCodec。</p>\n<ul>\n<li>MessageToMessageEncoder 继承自 ChannelOutboundHandlerAdapter，负责向 channel 中写消息</li>\n<li>MessageToMessageDecoder 继承自 ChannelInboundHandlerAdapter，负责从 channel 中读取消息</li>\n<li>MessageToMessageCodec 继承自 ChannelDuplexHandler，它是一个双向的 handler，可以从 channel 中读取消息，也可以向 channel 中写入消息</li>\n</ul>\n<p>先看一下消息的编码器 MessageToMessageEncoder，编码器中最重要的方法就是 write, 看下 write 的实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:MessageToMessageEncoder.write</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ChannelPromise</span> promise<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">CodecOutputList</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">acceptOutboundMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tout <span class=\"token operator\">=</span> <span class=\"token class-name\">CodecOutputList</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token class-name\">I</span> cast <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">I</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> cast<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">ReferenceCountUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>cast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EncoderException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t\t\t<span class=\"token class-name\">StringUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">simpleClassName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" must produce at least one message.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tctx<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">EncoderException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EncoderException</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>out <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> sizeMinusOne <span class=\"token operator\">=</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sizeMinusOne <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t\tctx<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">getUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sizeMinusOne <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promise <span class=\"token operator\">==</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">voidPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t\t\t<span class=\"token function\">writeVoidPromise</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t\t\t<span class=\"token function\">writePromiseCombiner</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">,</span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>write 方法接受一个需要转换的原始对象 msg，和一个表示 channel 读写进度的 ChannelPromise。首先会对 msg 进行一个类型判断，这个判断方法是在 acceptOutboundMessage 中实现的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">acceptOutboundMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> matcher<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的 matcher 是一个 TypeParameterMatcher 对象，它是一个在 MessageToMessageEncoder 构造函数中初始化的属性：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">MessageToMessageEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tmatcher <span class=\"token operator\">=</span> <span class=\"token class-name\">TypeParameterMatcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageToMessageEncoder</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的 I 就是要匹配的 msg 类型。</p>\n<p>如果不匹配，则继续调用 <code>ctx.write(msg, promise);</code>  将消息不做任何转换的写入到 channel 中，供下一个 handler 调用。</p>\n<p>如果匹配成功，则会调用核心的 encode 方法: <code>encode(ctx, cast, out);</code></p>\n<p>注意，encode 方法在 MessageToMessageEncoder 中是一个抽象方法，需要用户在继承类中自行扩展。</p>\n<p>encode 方法实际上是将 msg 对象转换成为要转换的对象，然后添加到 out 中。这个 out 是一个 list 对象，具体而言是一个 CodecOutputList 对象，作为一个 list，out 是一个可以存储多个对象的列表。</p>\n<p>那么 out 是什么时候写入到 channel 中去的呢？</p>\n<ul>\n<li>在 write 方法中最后有一个 finally 代码块，在这个代码块中，会将 out 写入到 channel 里面。</li>\n</ul>\n<p>和 encoder 对应的就是 decoder 了，MessageToMessageDecoder 的逻辑和 MessageToMessageEncoder 差不多。</p>\n<p>除了也需要判断读取的消息类型，decoder 中重要的方法是 channelRead 方法，我们看下它的实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:MessageToMessageDecoder.channelRead</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">CodecOutputList</span> out <span class=\"token operator\">=</span> <span class=\"token class-name\">CodecOutputList</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">acceptInboundMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token class-name\">I</span> cast <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">I</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t<span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> cast<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">ReferenceCountUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>cast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DecoderException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DecoderException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\tctx<span class=\"token punctuation\">.</span><span class=\"token function\">fireChannelRead</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">getUnsafe</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 finally 代码块中将 out 中的对象一个个取出来，调用 ctx.fireChannelRead 进行读取。</p>\n<p>结合两者有 MessageToMessageCodec，也是我们需要继承并重写其 encoder 和 decoder 操作的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:MessageToMessageCodec</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>INBOUND_IN<span class=\"token punctuation\">,</span> OUTBOUND_IN<span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ChannelDuplexHandler</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MessageToMessageEncoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> encoder<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MessageToMessageDecoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> decoder<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TypeParameterMatcher</span> inboundMsgMatcher<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TypeParameterMatcher</span> outboundMsgMatcher<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NamelessClass_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NamelessClass_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inboundMsgMatcher <span class=\"token operator\">=</span> <span class=\"token class-name\">TypeParameterMatcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"INBOUND_IN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outboundMsgMatcher <span class=\"token operator\">=</span> <span class=\"token class-name\">TypeParameterMatcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OUTBOUND_IN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> INBOUND_IN<span class=\"token punctuation\">></span></span> inboundMessageType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> OUTBOUND_IN<span class=\"token punctuation\">></span></span> outboundMessageType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">class</span> <span class=\"token class-name\">NamelessClass_2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MessageToMessageEncoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">NamelessClass_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">acceptOutboundMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">acceptOutboundMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NamelessClass_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">class</span> <span class=\"token class-name\">NamelessClass_1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MessageToMessageDecoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">NamelessClass_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">acceptInboundMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">acceptInboundMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NamelessClass_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inboundMsgMatcher <span class=\"token operator\">=</span> <span class=\"token class-name\">TypeParameterMatcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>inboundMessageType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outboundMsgMatcher <span class=\"token operator\">=</span> <span class=\"token class-name\">TypeParameterMatcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>outboundMessageType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span><span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ChannelPromise</span> promise<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">acceptInboundMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inboundMsgMatcher<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">acceptOutboundMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outboundMsgMatcher<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">OUTBOUND_IN</span> var2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> var3<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">INBOUND_IN</span> var2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> var3<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>定义了两个 TypeParameterMatcher，分别用来过滤 inboundMsg 和 outboundMsg</li>\n<li>分别实现了 channelRead 和 write 方法，用来读写消息</li>\n<li>里面的 decoder 和 encoder 实际上就是前面讲到的 MessageToMessageDecoder 和 MessageToMessageEncoder</li>\n<li>要处理的就是 Override  <code>decoder</code>  和 <code>encoder</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 编码器为出站处理，将自定义的消息协议类 & lt; 如后面要实现的 RpcMessage> 编码为 ByteBuf 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcMessage</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 通过 buff 将 RpcMessage 中的信息转码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 传递给 out，后面封装好的操作还不了解</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tout<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 解码器为入站处理，将 ByteBuf 对象解码成 RpcMessage 对象  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ByteBuf</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 将 buff 转码回原来的信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 再将这些信息封装回自定义的消息协议类</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token class-name\">RpcMessage</span> protocol <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 传递到下一个处理器  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tout<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>ByteBuf</code>  是 netty 的 Server 与 Client 之间通信的数据传输载体 (Netty 的数据容器)，它提供了一个 byte 数组 (byte []) 的抽象视图，既解决了 JDK API 的局限性，又为网络应用程序的开发者提供了更好的 API</li>\n</ul>\n<h3 id=\"自定义实现\"><a class=\"anchor\" href=\"#自定义实现\">#</a> 自定义实现</h3>\n<p>暂用参考的，等全部梳理完，自己搭个再替换掉</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:SharableRpcMessageCodec</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wxy<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>codec</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wxy<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RpcRequest</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wxy<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RpcResponse</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wxy<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>constant<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProtocolConstants</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wxy<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>enums<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageType</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wxy<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>enums<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SerializationType</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wxy<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageHeader</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wxy<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RpcMessage</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wxy<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serialization</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wxy<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SerializationFactory</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>netty<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ByteBuf</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>netty<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ChannelHandler</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Sharable</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>netty<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ChannelHandlerContext</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>netty<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageToMessageCodec</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * 可共享的 Rpc 消息编码解码器，使用此编解码器必须配合 <span class=\"token punctuation\">&#123;</span>RpcFrameDecoder<span class=\"token punctuation\">&#125;</span> 进行使用，  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * 以保证得到完整的数据包。不同于 <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>netty<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ByteToMessageCodec</span></span><span class=\"token punctuation\">&#125;</span> 的编解码器，共享编解码器无需  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * 保存 ByteBuf 的状态信息。  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> */</span><span class=\"token annotation punctuation\">@Sharable</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SharableRpcMessageCodec</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcMessage</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 编码器为出站处理，将 RpcMessage 编码为 ByteBuf 对象  </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcMessage</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">MessageHeader</span> header <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 4 字节 魔数  </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        buf<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getMagicNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 1 字节 版本号  </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        buf<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 1 字节 序列化算法  </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        buf<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getSerializerType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 1 字节 消息类型  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        buf<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 1 字节 消息状态  </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        buf<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 4 字节 消息序列号  </span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        buf<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getSequenceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 取出消息体  </span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Object</span> body <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 获取序列化算法  </span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Serialization</span> serialization <span class=\"token operator\">=</span> <span class=\"token class-name\">SerializationFactory</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getSerialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerializationType</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseByType</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getSerializerType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 进行序列化  </span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> serialization<span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 设置消息体长度  </span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        header<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 4 字节 消息内容长度  </span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        buf<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 不固定字节 消息内容字节数组  </span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        buf<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 传递到下一个出站处理器  </span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 解码器为入站处理，将 ByteBuf 对象解码成 RpcMessage 对象  </span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ByteBuf</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 4 字节 魔数  </span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token class-name\">ProtocolConstants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAGIC_NUM</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> magicNum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        msg<span class=\"token punctuation\">.</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span>magicNum<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 判断魔数是否正确，不正确表示非协议请求，不进行处理  </span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>magicNum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">ProtocolConstants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAGIC_NUM</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown magic code: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>magicNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">// 1 字节 版本号  </span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">byte</span> version <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 检查版本号是否一致  </span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>version <span class=\"token operator\">!=</span> <span class=\"token class-name\">ProtocolConstants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">VERSION</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The version isn't compatible \"</span> <span class=\"token operator\">+</span> version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">// 1 字节 序列化算法  </span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">byte</span> serializeType <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">// 1 字节 消息类型  </span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">byte</span> messageType <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">// 1 字节 消息状态  </span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">byte</span> messageStatus <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">// 4 字节 消息序列号  </span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">int</span> sequenceId <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">// 4 字节 长度  </span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        msg<span class=\"token punctuation\">.</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token comment\">// 构建协议头部信息  </span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token class-name\">MessageHeader</span> header <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageHeader</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">magicNum</span><span class=\"token punctuation\">(</span>magicNum<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">serializerType</span><span class=\"token punctuation\">(</span>serializeType<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">messageType</span><span class=\"token punctuation\">(</span>messageType<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">sequenceId</span><span class=\"token punctuation\">(</span>sequenceId<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">messageStatus</span><span class=\"token punctuation\">(</span>messageStatus<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">// 获取反序列化算法  </span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token class-name\">Serialization</span> serialization <span class=\"token operator\">=</span> <span class=\"token class-name\">SerializationFactory</span>  </pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getSerialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerializationType</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseByType</span><span class=\"token punctuation\">(</span>serializeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">// 获取消息枚举类型  </span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token class-name\">MessageType</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageType</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseByType</span><span class=\"token punctuation\">(</span>messageType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token class-name\">RpcMessage</span> protocol <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        protocol<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token class-name\">MessageType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUEST</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token comment\">// 进行反序列化  </span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token class-name\">RpcRequest</span> request <span class=\"token operator\">=</span> serialization<span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RpcRequest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            protocol<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token class-name\">MessageType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RESPONSE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token comment\">// 进行反序列化  </span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token class-name\">RpcResponse</span> response <span class=\"token operator\">=</span> serialization<span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RpcResponse</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            protocol<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token class-name\">MessageType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HEARTBEAT_REQUEST</span> <span class=\"token operator\">||</span> type <span class=\"token operator\">==</span> <span class=\"token class-name\">MessageType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HEARTBEAT_RESPONSE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> serialization<span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            protocol<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">// 传递到下一个处理器  </span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"可能存在的问题-2\"><a class=\"anchor\" href=\"#可能存在的问题-2\">#</a> 可能存在的问题</h3>\n<blockquote>\n<p>现象分析</p>\n</blockquote>\n<p><strong>粘包</strong></p>\n<ul>\n<li>现象，发送 abc def，接收 abcdef</li>\n<li>原因\n<ul>\n<li>应用层：接收方 ByteBuf 设置太大（Netty 默认 1024）</li>\n<li>滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大，这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包</li>\n<li>Nagle 算法： TCP 协议如果发送的网络数据包太小，那么他本身会启用 Nagle 算法（可配置是否启用）对较小的数据包进行合并</li>\n</ul>\n</li>\n</ul>\n<p>举个例子理解：<br />\n<img data-src=\"https://pic3.zhimg.com/80/v2-ef77947c1c0c490369f8ce0c3cca3c1a_720w.webp\" alt=\"\" /><br />\n假设客户端分别发送了两个数据包 D1 和 D2 给服务端，由于服务端一次读取到的字节数是不确定的，故可能存在以下 4 种情况。</p>\n<ul>\n<li>服务端分两次读取到了两个独立的数据包，分别是 D1 和 D2，没有粘包和拆包；</li>\n<li>服务端一次接收到了两个数据包，D1 和 D2 粘合在一起，被称为 TCP 粘包；</li>\n<li>服务端分两次读取到了两个数据包，第一次读取到了完整的 D1 包和 D2 包的部分内容，第二次读取到了 D2 包的剩余内容，这被称为 TCP 拆包；</li>\n<li>服务端分两次读取到了两个数据包，第一次读取到了 D1 包的部分内容 D1_1，第二次读取到了 D1 包的剩余内容 D1_2 和 D2 包的整包。</li>\n</ul>\n<p>如果此时服务端 TCP 接收滑窗非常小，而数据包 D1 和 D2 比较大，很有可能会发生第五种可能，即服务端分多次才能将 D1 和 D2 包接收完全，期间发生多次拆包。</p>\n<p><strong>半 / 拆包</strong></p>\n<ul>\n<li>现象，发送 abcdef，接收 abc def</li>\n<li>原因\n<ul>\n<li>应用层：接收方 ByteBuf 小于实际发送数据量</li>\n<li>滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时放不下了，只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包</li>\n<li>MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包。MSS 是 TCP 报文段中的数据字段的最大长度。数据字段加上 TCP 首部才等于整个的 TCP 报文段。所以 MSS 并不是 TCP 报文段的最大长度，而是：MSS=TCP 报文段长度 - TCP 首部长</li>\n</ul>\n</li>\n</ul>\n<p>本质是因为 TCP 是流式协议，消息无边界</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p>由于底层的 TCP 无法理解上层的业务数据，所以在底层是无法保证数据包不被拆分和重组的，这个问题只能通过上层的应用协议栈设计来解决</p>\n<ul>\n<li>短连接：发一次数据包建立一次连接，这样连接建立到连接断开之间就是一次消息边界，缺点是效率低；</li>\n<li>固定长度：每一条消息采用固定长度，如果不够，空位补空格，缺点是浪费空间；</li>\n<li>分隔符：每一条消息采用分隔符，例如 <code>\\n</code>  ，缺点是需要转义；</li>\n<li>将消息分为消息头和消息体：每一条消息分为 header 和 body，header 中包含 body 的长度（推荐）；类似与第二条，只是我们按照头部的 content-length 长度进行定长解码。</li>\n</ul>\n<p>本项目采取的是 <strong>消息头和消息体</strong> 来解决的半包问题，主要实现类为  <code>com.wxy.rpc.core.codec.RpcFrameDecoder</code>  ，这个类继承了 netty 中的  <code>io.netty.handler.codec.LengthFieldBasedFrameDecoder</code>  类，这个类是一种解码器，根据消息中长度字段的值动态拆分接收到的 ByteBufs。</p>\n<p>在发送消息前，先约定用定长字节表示接下来数据的长度：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 最大长度，长度偏移，长度占用字节，长度调整，剥离字节数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LengthFieldBasedFrameDecoder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * Creates a new instance.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">maxFrameLength</span> \t\t帧的最大长度（单位为字节，下同）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">lengthFieldOffset</span> \t长度字段的偏移长度（这里的长度字段就是 消息长度字段）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">lengthFieldLength</span> \t长度字段的长度</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">lengthAdjustment</span>  \t要添加到长度字段值的补偿值</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">initialBytesToStrip</span> \t从解码帧中取出的第一个字节数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LengthFieldBasedFrameDecoder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxFrameLength<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lengthFieldOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lengthFieldLength<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                        <span class=\"token keyword\">int</span> lengthAdjustment<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> initialBytesToStrip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>maxFrameLength<span class=\"token punctuation\">,</span> lengthFieldOffset<span class=\"token punctuation\">,</span> lengthFieldLength<span class=\"token punctuation\">,</span> lengthAdjustment<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             initialBytesToStrip<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RoaW5raW5nX2Zpb2EvYXJ0aWNsZS9kZXRhaWxzLzgwNTczNDgz\">详细的参数说明 + 举例</span></p>\n<p>所以，按照我们定义的消息协议，只需要创建一个  <code>new LengthFiledBasedFrameDecoder(1024, 12, 4, 0)</code>  的帧解码器就可以解决粘包半包问题了。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RpcFrameDecoder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LengthFieldBasedFrameDecoder</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 得到当前约定协议的帧解码器，  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">@code</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token code-section\">*    <span class=\"token code language-java\"><span class=\"token class-name\"><span class=\"token namespace\">this<span class=\"token punctuation\">.</span></span>RpcFrameDecoder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *</span> <span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 引用：<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">RpcFrameDecoder</span><span class=\"token punctuation\">#</span><span class=\"token function\">RpcFrameDecoder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token class-name\">RpcFrameDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 构造方法  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     *  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">maxFrameLength</span>    数据帧的最大长度  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">lengthFieldOffset</span> 长度域的偏移字节数，或者说：定义长度域位于发送的字节数组中的下标，即发送的字节数组中下标为$<span class=\"token punctuation\">&#123;</span>lengthFieldOffset<span class=\"token punctuation\">&#125;</span>的地方是长度域的开始地方</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">lengthFieldLength</span> 长度域所占的字节数，即发送字节数组bytes时, 字节数组bytes[lengthFieldOffset, lengthFieldOffset+lengthFieldLength]域对应于的定义长度域部分</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RpcFrameDecoder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxFrameLength<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lengthFieldOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lengthFieldLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>maxFrameLength<span class=\"token punctuation\">,</span> lengthFieldOffset<span class=\"token punctuation\">,</span> lengthFieldLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>LengthFieldBasedFrameDecoder 本质上是 ChannelHandler，一个处理入站事件的 ChannelHandler</li>\n<li>LengthFieldBasedFrameDecoder 需要加入 ChannelPipeline 中，且位于链的头部</li>\n</ol>\n<h1 id=\"序列化算法\"><a class=\"anchor\" href=\"#序列化算法\">#</a> 序列化算法</h1>\n<p>所谓序列化和反序列化就是将对象转换成二进制流以及将二进制流再转换成对象的过程。因为网络通信依赖于字节流，而且这些请求信息都是不确定的，所以一般会选用通用且高效的序列化算法。比较常用的序列化算法有 FastJson、Kryo、Hessian、Protobuf 等，这些第三方序列化算法都比 Java 原生的序列化操作都更加高效。Dubbo 支持多种序列化算法，并定义了 Serialization 接口规范，所有序列化算法扩展都必须实现该接口，其中默认使用的是 Hessian 序列化算法。</p>\n<p>序列化对于远程调用的响应速度、吞吐量、网络带宽消耗等同样也起着至关重要的作用，是我们提升分布式系统性能的最关键因素之一。</p>\n<p>判断一个编码框架的优劣主要从以下几个方面：</p>\n<ol>\n<li>是否支持跨语言，支持语种是否丰富</li>\n<li>编码后的码流</li>\n<li>编解码的性能</li>\n<li>类库是否小巧，API 使用是否方便</li>\n<li>使用者开发的工作量和难度</li>\n</ol>\n<p>本项目实现了五种序列化算法，分别是：</p>\n<p><strong>JDK、JSON、HESSIAN、KRYO 、PROTOSTUFF</strong>，其中 JSON 使用的是 Gson 实现，此外还可以使用 FastJson、Jackson 等实现 JSON 序列化。</p>\n<table>\n<thead>\n<tr>\n<th>序列化算法</th>\n<th><strong>优点</strong></th>\n<th><strong>缺点</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Kryo</strong></td>\n<td>速度快，序列化后体积小</td>\n<td>跨语言支持较复杂</td>\n</tr>\n<tr>\n<td><strong>Hessian</strong></td>\n<td>默认支持跨语言</td>\n<td>较慢</td>\n</tr>\n<tr>\n<td><strong>Protostuff</strong></td>\n<td>速度快，基于 protobuf</td>\n<td>需静态编译</td>\n</tr>\n<tr>\n<td><strong>Json</strong></td>\n<td>使用方便</td>\n<td>性能一般</td>\n</tr>\n<tr>\n<td><strong>Jdk</strong></td>\n<td>使用方便，可序列化所有类</td>\n<td>速度慢，占空间</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"动态代理\"><a class=\"anchor\" href=\"#动态代理\">#</a> 动态代理</h1>\n<p>RPC 框架怎么做到像调用本地接口一样调用远端服务呢？这必须依赖动态代理来实现。需要创建一个代理对象，在代理对象中完成数据报文编码，然后发起调用发送数据给服务提供方，以此屏蔽 RPC 框架的调用细节。因为代理类是在运行时生成的，所以代理类的生成速度、生成的字节码大小都会影响 RPC 框架整体的性能和资源消耗，所以需要慎重选择动态代理的实现方案。动态代理比较主流的实现方案有以下几种：JDK 动态代理、Cglib、Javassist、ASM、Byte Buddy，我们简单做一个对比和介绍。</p>\n<ul>\n<li>JDK 动态代理。在运行时可以动态创建代理类，但是 JDK 动态代理的功能比较局限，代理对象必须实现一个接口，否则抛出异常。因为代理类会继承 Proxy 类，然而 Java 是不支持多重继承的，只能通过接口实现多态。JDK 动态代理所生成的代理类是接口的实现类，不能代理接口中不存在的方法。JDK 动态代理是通过反射调用的形式代理类中的方法，比直接调用肯定是性能要慢的。</li>\n<li>Cglib 动态代理。Cglib 是基于 ASM 字节码生成框架实现的，通过字节码技术生成的代理类，所以代理类的类型是不受限制的。而且 Cglib 生成的代理类是继承于被代理类，所以可以提供更加灵活的功能。在代理方法方面，Cglib 是有优势的，它采用了 FastClass 机制，为代理类和被代理类各自创建一个 Class，这个 Class 会为代理类和被代理类的方法分配 index 索引，FastClass 就可以通过 index 直接定位要调用的方法，并直接调用，这是一种空间换时间的优化思路。</li>\n<li>Javassist 和 ASM。二者都是 Java 字节码操作框架，使用起来难度较大，需要开发者对 Class 文件结构以及 JVM 都有所了解，但是它们都比反射的性能要高。Byte Buddy 也是一个字节码生成和操作的类库，Byte Buddy 功能强大，相比于 Javassist 和 ASM，Byte Buddy 提供了更加便捷的 API，用于创建和修改 Java 类，无须理解字节码的格式，而且 Byte Buddy 更加轻量，性能更好。</li>\n</ul>\n<p>本项目实现了 【JDK 动态代理】 和 【CGLIB 动态代理】。</p>\n<h1 id=\"服务注册与发现\"><a class=\"anchor\" href=\"#服务注册与发现\">#</a> 服务注册与发现</h1>\n<p>在分布式系统中，不同服务之间应该如何通信呢？传统的方式可以通过 HTTP 请求调用、保存服务端的服务列表等，这样做需要开发者主动感知到服务端暴露的信息，系统之间耦合严重。为了更好地将客户端和服务端解耦，以及实现服务优雅上线和下线，于是注册中心就出现了。</p>\n<p>在 RPC 框架中，主要是使用注册中心来实现服务注册和发现的功能。服务端节点上线后自行向注册中心注册服务列表，节点下线时需要从注册中心将节点元数据信息移除。客户端向服务端发起调用时，自己负责从注册中心获取服务端的服务列表，然后在通过负载均衡算法选择其中一个服务节点进行调用。以上是最简单直接的服务端和客户端的发布和订阅模式，不需要再借助任何中间服务器，性能损耗也是最小的。</p>\n<p>现在思考一个问题，服务在下线时需要从注册中心移除元数据，那么注册中心怎么才能感知到服务下线呢？我们最先想到的方法就是节点主动通知的实现方式，当节点需要下线时，向注册中心发送下线请求，让注册中心移除自己的元数据信息。但是如果节点异常退出，例如断网、进程崩溃等，那么注册中心将会一直残留异常节点的元数据，从而可能造成服务调用出现问题。</p>\n<p>为了避免上述问题，实现服务优雅下线比较好的方式是采用主动通知 + 心跳检测的方案。除了主动通知注册中心下线外，还需要增加节点与注册中心的心跳检测功能，这个过程也叫作探活。心跳检测可以由节点或者注册中心负责，例如注册中心可以向服务节点每 60s 发送一次心跳包，如果 3 次心跳包都没有收到请求结果，可以任务该服务节点已经下线。</p>\n<p>由此可见，采用注册中心的好处是可以解耦客户端和服务端之间错综复杂的关系，并且能够实现对服务的动态管理。服务配置可以支持动态修改，然后将更新后的配置推送到客户端和服务端，无须重启任何服务。</p>\n<p>本项目用的就是依赖知识章节中的 <a href=\"#Zookeeper\">Zookeeper</a> ，此外还可以考虑引入 Nacos、Redis 等实现服务注册于发现功能</p>\n<h1 id=\"rpc调用方式\"><a class=\"anchor\" href=\"#rpc调用方式\">#</a> RPC 调用方式</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>成熟的 RPC 框架一般会提供四种调用方式，分别为同步 Sync、异步 Future、回调 Callback 和单向 Oneway。RPC 框架的性能和吞吐量与合理使用调用方式是息息相关的，下面我们逐一介绍下四种调用方式的实现原理。</p>\n<ul>\n<li>\n<p>Sync 同步调用。客户端线程发起 RPC 调用后，当前线程会一直阻塞，直至服务端返回结果或者处理超时异常。Sync 同步调用一般是 RPC 框架默认的调用方式，为了保证系统可用性，客户端设置合理的超时时间是非常重要的。虽说 Sync 是同步调用，但是客户端线程和服务端线程并不是同一个线程，实际在 RPC 框架内部还是异步处理的。Sync 同步调用的过程如下图所示<br />\n<img data-src=\"https://github.com/viego1999/wxy-rpc/raw/master/images/Sync%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Future 异步调用。客户端发起调用后不会再阻塞等待，而是拿到 RPC 框架返回的 Future 对象 (Future 对象封装了检查计算是否完成、检索计算的结果的方法、Callable 任务可以拿到一个 Future 对象)，调用结果会被服务端缓存，客户端自行决定后续何时获取返回结果。当客户端主动获取结果时，该过程是阻塞等待的。Future 异步调用过程如下图所示。<br />\n<img data-src=\"https://github.com/viego1999/wxy-rpc/raw/master/images/Future%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Callback 回调调用。如下图所示，客户端发起调用时，将 Callback 对象传递给 RPC 框架，无须同步等待返回结果，直接返回。当获取到服务端响应结果或者超时异常后，再执行用户注册的 Callback 回调。所以 Callback 接口一般包含 onResponse 和 onException 两个方法，分别对应成功返回和异常返回两种情况。<br />\n<img data-src=\"https://github.com/viego1999/wxy-rpc/raw/master/images/Callback%E5%9B%9E%E8%B0%83%E8%B0%83%E7%94%A8.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Oneway 单向调用。客户端发起请求之后直接返回，忽略返回结果。Oneway 方式是最简单的，具体调用过程如下图所示。<br />\n<img data-src=\"https://github.com/viego1999/wxy-rpc/raw/master/images/Onway%E5%8D%95%E5%90%91%E8%B0%83%E7%94%A8.png\" alt=\"\" /></p>\n</li>\n</ul>\n<p>四种调用方式都各有优缺点，很难说异步方式一定会比同步方式效果好，在不用的业务场景可以按需选取更合适的调用方式。</p>\n<h2 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h2>\n<p>本项目实现的是第一种 Sync 同步调用。具体的实现逻辑在类  <code>com.wxy.rpc.client.transport.netty.NettyRpcClient</code>  中，使用  <code>io.netty.util.concurrent.Promise</code>  去接受响应结果，将暂未处理的 <code>RpcResponse</code>  根据 <code>sequenceId</code>  信息存入 <code>ConcurrentHashMap</code>  中， <code>RpcResponseHadler</code>  根据  <code>sequenceId</code>  取出  <code>Promise</code>  对象存储的未处理的响应消息，处理后通过设置  <code>promise</code>  的状态来 <code>notify</code>  等待结果的线程并返回，核心代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:NettyRpcClient</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NettyRpcClient</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RpcClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// ....</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RpcMessage</span> <span class=\"token function\">sendRpcRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestMetadata</span> requestMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 构建接收返回结果的 promise</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RpcMessage</span><span class=\"token punctuation\">></span></span> promise<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 获取 Channel 对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span>requestMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">getServerAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 创建 promise 来接受结果         指定执行完成通知的线程</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultPromise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">eventLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 获取请求的序列号 ID</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">int</span> sequenceId <span class=\"token operator\">=</span> requestMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">getRpcMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSequenceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 存入还未处理的请求</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">RpcResponseHandler</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNPROCESSED_RPC_RESPONSES</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>sequenceId<span class=\"token punctuation\">,</span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 发送数据并监听发送状态</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span>requestMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">getRpcMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelFutureListener</span><span class=\"token punctuation\">)</span> future <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The client send the message successfully, msg: [&#123;&#125;].\"</span><span class=\"token punctuation\">,</span> requestMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    future<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    promise<span class=\"token punctuation\">.</span><span class=\"token function\">setFailure</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">cause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The client send the message failed.\"</span><span class=\"token punctuation\">,</span> future<span class=\"token punctuation\">.</span><span class=\"token function\">cause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 等待结果返回（让出 cpu 资源，同步阻塞调用线程 main，其他线程去执行获取操作（eventLoop））</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            promise<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">// 返回响应结果</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">getNow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcException</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">.</span><span class=\"token function\">cause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The channel is inactivate.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// ....</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"自定义注解集成到spring\"><a class=\"anchor\" href=\"#自定义注解集成到spring\">#</a> 自定义注解集成到 Spring</h1>\n<h2 id=\"自定义注解\"><a class=\"anchor\" href=\"#自定义注解\">#</a> 自定义注解</h2>\n<p>创建一个 @interface 的注解，然后就可以使用这个注解了，但是什么功能也没有</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">AnnotationTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>访问修饰符必须为 public, 不写默认为 public</li>\n<li>关键字为 @interface</li>\n<li>注解类型元素是注解中内容，根据需要标志参数，例如上面的注解的 value</li>\n</ul>\n<p>@Target、@Retention、@Inherited、@Documented，这四个注解就是元注解，元注解的作用就是负责注解其他注解</p>\n<ul>\n<li>\n<p><strong>@Target</strong>：用于描述注解的使用范围，该注解可以使用在什么地方。多见 <code>ElementType.TYPE</code> \t应用于类、接口（包括注解类型）、枚举 ； <code>ElementType.METHOD</code>  应用于方法，还有变量、包、形参等等，详细面向搜索引擎</p>\n</li>\n<li>\n<p><strong>@Retention</strong>：表明该注解的生命周期。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>生命周期类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RetentionPolicy.SOURCE</td>\n<td>编译时被丢弃，不包含在类文件中</td>\n</tr>\n<tr>\n<td>RetentionPolicy.CLASS</td>\n<td>JVM 加载时被丢弃，包含在类文件中，默认值</td>\n</tr>\n<tr>\n<td>RetentionPolicy.RUNTIME</td>\n<td>由 JVM 加载，包含在类文件中，在运行时可以被获取到</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p><strong>@Inherited</strong>：是一个标记注解，@Inherited 阐述了某个被标注的类型是被继承的。如果一个使用了 @Inherited 修饰的 annotation 类型被用于一个 class，则这个 annotation 将被用于该 class 的子类。</p>\n</li>\n<li>\n<p><strong>@Documented</strong>：表明该注解标记的元素可以被 Javadoc 或类似的工具文档化</p>\n</li>\n</ul>\n<h2 id=\"实现案例\"><a class=\"anchor\" href=\"#实现案例\">#</a> 实现案例</h2>\n<p>要想实现功能，需要我们通过拦截器、AOP 切面这些地方获取注解标志，然后实现我们的功能。</p>\n<p>例如有个项目，前端是把 token 放到 json 里面传到后端（也有一些项目放到请求头的 header 里面，方式一样），没用注解之前，我们可能是通过调用公共的方法去校验 token, 如 validateToken (token)，然后每个接口都有这一段代码，我们用注解的模式替换</p>\n<ol>\n<li>首先我们创建一个注解，标志那些类需要校验 token</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">AppAuthenticationValidate</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 必填参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">requestParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>然后再创建一个 AOP 切面类来拦截这个注解<br />\n拦截使用这个注解的方法，同时获取注解上面的 requestParams 参数，校验 json 里面必填的属性是否存在</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:AppAuthenticationValidateAspect</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppAuthenticationValidateAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Reference</span><span class=\"token punctuation\">(</span>check <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> timeout <span class=\"token operator\">=</span> <span class=\"token number\">18000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CommonUserService</span> commonUserService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(cn.com.bluemoon.admin.web.common.aspect.AppAuthenticationValidate)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">repeatSumbitIntercept</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 获取接口的参数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> o <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">JSONObject</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CodeSignature</span><span class=\"token punctuation\">)</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>parameterNames<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">String</span> paramName <span class=\"token operator\">=</span> parameterNames<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>paramName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 获取 token 来源</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                source <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>o<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>paramName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jsonObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                jsonObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>jsonObject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ILLEGAL_PARAM_CODE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResponseConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ILLEGAL_PARAM_MSG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TOKEN_EXPIRED_CODE</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"登录超时，请重新登录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">MethodSignature</span> signature <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodSignature</span><span class=\"token punctuation\">)</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">AppAuthenticationValidate</span> annotation <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppAuthenticationValidate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> requestParams <span class=\"token operator\">=</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">requestParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 校验必填参数</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">ParamsValidateUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>jsonObject<span class=\"token punctuation\">,</span>requestParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">ResponseBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            response <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commonUserService<span class=\"token punctuation\">.</span><span class=\"token function\">checkAppToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            response <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commonUserService<span class=\"token punctuation\">.</span><span class=\"token function\">checkAppTokenByAppType</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getIsSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">ResponseConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUEST_SUCCESS_CODE</span> <span class=\"token operator\">==</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">String</span> empCode <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---token =&#123;&#125;， empCode=&#123;&#125;--\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> empCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessParamConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APP_EMP_CODE</span><span class=\"token punctuation\">,</span>empCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---token验证不通过，token =&#123;&#125;---\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TOKEN_EXPIRED_CODE</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"登录超时，请重新登录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>把注解加在需要校验的接口方法上</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@AppAuthenticationValidate</span><span class=\"token punctuation\">(</span>requestParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"billId\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"taskId\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个注解同时校验了必填字段，校验完 token 后同时会把 token 的用户信息加在 json 对象里面</p>\n<h2 id=\"本项目中的实现\"><a class=\"anchor\" href=\"#本项目中的实现\">#</a> 本项目中的实现</h2>\n<p>在 Java 中为了让注解生效，需要利用到反射，但是当我们使用到 Spring 或者 Spring Boot 时，我们可以使用 Spring 的一些机制让自定义注解通过 @Import 注解完成一些操作</p>\n<ul>\n<li>@RpcComponentScan - 扫描被 @RpcService 标注的组件并将对应的 BeanDefiniton 对象注册到 Spring。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RpcBeanDefinitionRegistrar</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">RpcComponentScan</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 扫描包路径  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"basePackages\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 扫描包路径  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:RpcBeanDefinitionRegistrar</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里不需要 @Configuration 注解，因为我们已经通过 @Import 注解将操作引导本类中了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RpcBeanDefinitionRegistrar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ImportBeanDefinitionRegistrar</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceLoaderAware</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ResourceLoader</span> resourceLoader<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceLoader</span> resourceLoader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceLoader <span class=\"token operator\">=</span> resourceLoader<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 此方法会在 spring 自定义扫描执行之后执行，这个时候 beanDefinitionMap 已经有扫描到的 beanDefinition 对象了  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     *  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">annotationMetadata</span> annotation metadata of the importing class  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">registry</span>           current bean definition registry  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinitions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> annotationMetadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 获取 RpcComponentScan 注解的属性和值  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">AnnotationAttributes</span> annotationAttributes <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotationAttributes</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromMap</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RpcComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>annotationAttributes <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 此处去获取 RpcComponentScan 注解的 basePackages 值  </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            basePackages <span class=\"token operator\">=</span> annotationAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">getStringArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"basePackages\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 如果没有指定名称的话  </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>basePackages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            basePackages <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardAnnotationMetadata</span><span class=\"token punctuation\">)</span> annotationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIntrospectedClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPackage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 创建一个浏览 RpcService 注解的 Scanner        </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">// 备注：此处可以继续扩展，例如扫描 spring bean 或者其他类型的 Scanner        </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token class-name\">RpcClassPathBeanDefinitionScanner</span> rpcServiceScanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcClassPathBeanDefinitionScanner</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceLoader <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            rpcServiceScanner<span class=\"token punctuation\">.</span><span class=\"token function\">setResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 扫描包下的所有 Rpc bean 并返回注册成功的数量（scan 方法会调用 register 方法去注册扫描到的类并生成 BeanDefinition 注册到 spring 容器）  </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> rpcServiceScanner<span class=\"token punctuation\">.</span><span class=\"token function\">scan</span><span class=\"token punctuation\">(</span>basePackages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The number of BeanDefinition scanned and registered by RpcServiceScanner is &#123;&#125;.\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>@RpcService - 该注解用来标注需要暴露的服务实现类，被标注的类将会被注入到 Spring 容器中，同时将对应服务信息注册到远程注册中心</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">RpcService</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 对外暴露服务的接口类型，默认为 void.class  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">interfaceClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 对外暴露服务的接口名（全限定名），默认为 \"\"  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span>    <span class=\"token class-name\">String</span> <span class=\"token function\">interfaceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 版本号，默认 1.0  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span>    <span class=\"token class-name\">String</span> <span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这两个是怎么关联的？</p>\n<ul>\n<li>BeanPostProcessor，“对象创建后处理器”，<strong>BBP 是连接 IOC 和 AOP 的桥梁。</strong> 详解见<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODIwODMyNA==\">参考 1</span> ，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdHV5YW5nMTEyOS9wLzEyODY2NDg0Lmh0bWw=\">参考 2</span></li>\n<li>依赖了 rpcServer？</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:RpcServerBeanPostProcessor</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RpcServerBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CommandLineRunner</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ServiceRegistry</span> serviceRegistry<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RpcServer</span> rpcServer<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RpcServerProperties</span> properties<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RpcServerBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceRegistry</span> serviceRegistry<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcServer</span> rpcServer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcServerProperties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceRegistry <span class=\"token operator\">=</span> serviceRegistry<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rpcServer <span class=\"token operator\">=</span> rpcServer<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 在 bean 实例化后，初始化后，检测标注有 @RpcService 注解的类，将对应的服务类进行注册，对外暴露服务，同时进行本地服务注册  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     *  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">bean</span>     bean  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">beanName</span> beanName  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * <span class=\"token keyword\">@return</span> 返回增强后的 bean  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">BeansException</span></span> Bean 异常  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@SneakyThrows</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 判断当前 bean 是否被 @RpcService 注解标注  </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RpcService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[&#123;&#125;] is annotated with [&#123;&#125;].\"</span><span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCanonicalName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 获取到该类的 @RpcService 注解  </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">RpcService</span> rpcService <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RpcService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">String</span> interfaceName<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>rpcService<span class=\"token punctuation\">.</span><span class=\"token function\">interfaceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                interfaceName <span class=\"token operator\">=</span> rpcService<span class=\"token punctuation\">.</span><span class=\"token function\">interfaceClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                interfaceName <span class=\"token operator\">=</span> rpcService<span class=\"token punctuation\">.</span><span class=\"token function\">interfaceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">String</span> version <span class=\"token operator\">=</span> rpcService<span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">String</span> serviceName <span class=\"token operator\">=</span> <span class=\"token class-name\">ServiceUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">serviceKey</span><span class=\"token punctuation\">(</span>interfaceName<span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 构建 ServiceInfo 对象  </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">ServiceInfo</span> serviceInfo <span class=\"token operator\">=</span> <span class=\"token class-name\">ServiceInfo</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">appName</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getAppName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">serviceName</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 进行远程服务注册  </span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            serviceRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>serviceInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 进行本地服务缓存注册  </span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">LocalServiceCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     * 开机自启动 - 此方法实现于 <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">CommandLineRunner</span></span><span class=\"token punctuation\">&#125;</span> 接口，基于 springboot  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     *     * @param args incoming main method arguments 命令行参数  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">Exception</span></span> 启动异常  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     */</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> rpcServer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rpc server [&#123;&#125;] start, the appName is &#123;&#125;, the port is &#123;&#125;\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                rpcServer<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getAppName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addShutdownHook</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token comment\">// 当服务关闭之后，将服务从 注册中心 上清除（关闭连接）  </span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                serviceRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>@RpcReference - 服务注入注解，被标注的属性将自动注入服务的实现类（基于动态代理实现）</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:RpcReference</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FIELD</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANNOTATION_TYPE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">RpcReference</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 对外暴露服务的接口类型，默认为 void.class  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">interfaceClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 对外暴露服务的接口名（全限定名），默认为 \"\"  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span>    <span class=\"token class-name\">String</span> <span class=\"token function\">interfaceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 版本号，默认 1.0  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span>    <span class=\"token class-name\">String</span> <span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 负载均衡策略，合法的值包括：random, roundrobin, leastactive  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span>    <span class=\"token class-name\">String</span> <span class=\"token function\">loadbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * Service mock name, use interface name + Mock if not set     */</span>    <span class=\"token class-name\">String</span> <span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 服务调用超时时间  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:RpcClientBeanPostProcessor</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RpcClientBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ClientStubProxyFactory</span> proxyFactory<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RpcClientBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClientStubProxyFactory</span> proxyFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>proxyFactory <span class=\"token operator\">=</span> proxyFactory<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token doc-comment comment\">/**  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 在 bean 实例化完后，扫描 bean 中需要进行 rpc 注入的属性，将对应的属性使用 代理对象 进行替换  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     *  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">bean</span>     bean 对象  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">beanName</span> bean 名称  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * <span class=\"token keyword\">@return</span> 后置增强后的 bean 对象  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">BeansException</span></span> bean 异常  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 获取该 bean 的类的所有属性（getFields - 获取所有的 public 属性，getDeclaredFields - 获取所有声明的属性，不区分访问修饰符）  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 遍历所有属性  </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 判断是否被 RpcReference 注解标注  </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RpcReference</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 获得 RpcReference 注解  </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">RpcReference</span> rpcReference <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RpcReference</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 默认类为属性当前类型  </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// filed.class = java.lang.reflect.Field  </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// filed.type = com.wxy.xxx.service.XxxService                Class&lt;?> clazz = field.getType();  </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token comment\">// 如果指定了全限定类型接口名  </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>rpcReference<span class=\"token punctuation\">.</span><span class=\"token function\">interfaceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>rpcReference<span class=\"token punctuation\">.</span><span class=\"token function\">interfaceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token comment\">// 如果指定了接口类型  </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rpcReference<span class=\"token punctuation\">.</span><span class=\"token function\">interfaceClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        clazz <span class=\"token operator\">=</span> rpcReference<span class=\"token punctuation\">.</span><span class=\"token function\">interfaceClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token comment\">// 获取指定类型的代理对象  </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token class-name\">Object</span> proxy <span class=\"token operator\">=</span> proxyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">,</span> rpcReference<span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token comment\">// 关闭安全检查  </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token comment\">// 设置域的值为代理对象  </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    field<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to obtain proxy object, the type of field %s is %s, \"</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                            <span class=\"token string\">\"and the specified loaded proxy type is %s.\"</span><span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自动配置\"><a class=\"anchor\" href=\"#自动配置\">#</a> 自动配置</h2>\n<p>实现  <code>rpc-client</code>  和  <code>rpc-server</code>  的  <code>starter</code>  模块，编写对应的自动配置的配置类以及  <code>spring.factories</code>  文件，引入对应的 <code>starter</code>  即可完成自动配置功能。</p>\n<ul>\n<li>咩意思呀？</li>\n</ul>\n<h1 id=\"梳理\"><a class=\"anchor\" href=\"#梳理\">#</a> 梳理</h1>\n<p>实现参考太复杂了，对我而言解释不够多，跟跳级了似的... 但又没时间从 0 开始。大概模块原理上面梳理了，但不像 x 马那种教程，有完整的环节，因此需要对着流程步骤一步步梳理源码，理解彼此建立联系的过程</p>\n<p>首先是相对简单的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NuYWlsY2xpbWIvZ3VpZGUtcnBjLWZyYW1ld29yaw==\">这个</span>，没有自定义协议，网络传输用的<strong> Netty</strong>、序列化用的<strong> Kyro</strong>、注册中心<strong> Zookeeper</strong>、集成了 Spring 注解</p>\n<p><strong>在客户端中</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SocketClientMain</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">RpcRequestTransport</span> rpcRequestTransport <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SocketRpcClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">RpcServiceConfig</span> rpcServiceConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcServiceConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">RpcClientProxy</span> rpcClientProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcClientProxy</span><span class=\"token punctuation\">(</span>rpcRequestTransport<span class=\"token punctuation\">,</span> rpcServiceConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">HelloService</span> helloService <span class=\"token operator\">=</span> rpcClientProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">String</span> hello <span class=\"token operator\">=</span> helloService<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ol>\n<li>创建了一个 RPC 请求发送器 <code>RpcRequestTransport</code>  (接口)，基于 <code>SocketRpcClient</code>  (实现，还有个基于 Netty 的 <code>NettyRpcClient</code> )，里面实现了 <code>sendRpcRequest</code>  函数，</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">sendRpcRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RpcRequest</span> rpcRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">InetSocketAddress</span> inetSocketAddress <span class=\"token operator\">=</span> serviceDiscovery<span class=\"token punctuation\">.</span><span class=\"token function\">lookupService</span><span class=\"token punctuation\">(</span>rpcRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        socket<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>inetSocketAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> objectOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// Send data to the server through the output stream  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>rpcRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> objectInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// Read RpcResponse from the input stream  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用服务失败:\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>InetSocketAddress inetSocketAddress = serviceDiscovery.lookupService(rpcRequest);</code>  背后有一系列 RPC 服务的设置（如 zooker 地址、sleeptime、最大重试次数等）和负载均衡的处理，最后返回了 socket 连接的地址 <code>return new InetSocketAddress(host, port);</code>  ，通过 socket 输入输出流，给服务端发送数据并得到发回的数据。这个逻辑很简单，但在实例化</p>\n<blockquote>\n<ol start=\"2\">\n<li>封装了一层 <code>RpcClientProxy</code> ，存进 <code>rpcRequestTransport, rpcServiceConfig</code> ，将要实现的服务 <code>HelloService</code>  交给它代理</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>clazz<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在调用 时就会执行代理中的 <code>invoke</code>  方法，在这个项目里进一步处理了要发送的 <code>rpcRequest</code> ，然后接收了 <code>rpcRequestTransport</code>  的返回值并回传，即 <code>String hello</code>  已经是服务端返回并处理后的结果了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> hello <span class=\"token operator\">=</span> helloService<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>在服务端中</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SocketServerMain</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">HelloService</span> helloService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">SocketRpcServer</span> socketRpcServer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SocketRpcServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">RpcServiceConfig</span> rpcServiceConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcServiceConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        rpcServiceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setService</span><span class=\"token punctuation\">(</span>helloService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        socketRpcServer<span class=\"token punctuation\">.</span><span class=\"token function\">registerService</span><span class=\"token punctuation\">(</span>rpcServiceConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        socketRpcServer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先是提供功能的实现 (这一块拿出来放回客户端就是本地调用了)，然后服务端的 RPC 处理类的 <code>SocketRpcServer</code> 。 <code>RpcServiceConfig</code>  小套娃了一下，只是把要提供的服务实例放进去了，还设置了 group、version 等参数。重点是 <code>registerService</code>  将服务实例继续传入了处理类 <code>SocketRpcServer</code> ，里面隐藏了服务端的操作（像线程池，与 zookeeper 的连接，从 socket 监听接口获取数据，再回传的具体操作等等）, 最后 <code>start</code>  启动 <code>ServerSocket</code>  进行监听。</p>\n<p>表层逻辑解析完了，重点还是两个 RPC 的实现 <code>SocketRpcClient,SocketRpcServer</code> ，明天继续。希望明年这个时候至少假期可以不泡实验室了，坚持... 个嘚，根据面经情况还得是保证能手撕算法先... 之前还是年前用 C++ 刷的代码随想录了，还要转 java，先优先把 LC 热题 100 再过一下吧...（4.4 留个 flag，这个 b 项目之后一定要做掉）</p>\n",
            "tags": [
                "RPC",
                "JAVA"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/29/Docker/",
            "url": "https://zyakmd.github.io/2024/03/29/Docker/",
            "title": "Docker",
            "date_published": "2024-03-29T12:10:52.000Z",
            "content_html": "<p>听了很久了，上下手</p>\n<p>Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p>\n<h1 id=\"引入\"><a class=\"anchor\" href=\"#引入\">#</a> 引入</h1>\n<p>一款产品： 开发–上线 两套环境！应用环境，应用配置！<br />\n开发 — 运维。 问题：我在我的电脑上可以允许！版本更新，导致服务不可用！对于运维来说考验十分大？<br />\n环境配置是十分的麻烦，每一个机器都要部署环境 (集群 Redis、ES、Hadoop…) ! 费事费力。<br />\n发布一个项目 (jar + (Redis MySQL JDK ES) )，项目能不能带上环境安装打包！<br />\n之前在服务器配置一个应用的环境 Redis、MySQL、JDK、ES、Hadoop 配置超麻烦了，不能够跨平台。开发环境 Windows，最后发布到 Linux！<br />\n传统：开发 jar，运维来做！<br />\n现在：开发打包部署上线，一套流程做完！<br />\n安卓流程：java — apk — 发布（应用商店）—- 张三使用 apk 一安装即可用！<br />\ndocker 流程： java-jar（环境） — 打包项目带上环境（镜像） — ( Docker 仓库：商店）——- 下载我们发布的镜像 —- 直接运行即可！<br />\nDocker 给以上的问题，提出了解决方案，其思想就来自于集装箱！<br />\nJRE – 多个应用 (端口冲突) – 原来都是交叉的！<br />\n隔离：Docker 核心思想！打包装箱！每个箱子是互相隔离的。<br />\nDocker 通过隔离机制，可以将服务器利用到极致！<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NDI0NDI5OTc=\">https://zhuanlan.zhihu.com/p/442442997</span></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">docker hub</span></p>\n<ol>\n<li>配置 yam</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> yum-utils</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</pre></td></tr></table></figure><ol start=\"2\">\n<li>安装</li>\n</ol>\n<pre><code class=\"language-Bash\">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>\n<ol start=\"3\">\n<li>校验 (指令)</li>\n</ol>\n<pre><code class=\"language-Bash\"># 启动Docker\nsystemctl start docker\n\n# 测试\ndocker run hello-world\n\n# 停止Docker\nsystemctl stop docker\n</code></pre>\n<ol start=\"4\">\n<li>镜像加速（阿里云为例子，在 控制台：产品与服务 -&gt; 容器 -&gt; 镜像工具里）</li>\n</ol>\n<pre><code>sudo mkdir -p /etc/docker \nsudo tee /etc/docker/daemon.json &lt;&lt;-'EOF' &#123; \n&quot;registry-mirrors&quot;: [&quot;https://xxxx.mirror.aliyuncs.com&quot;] \n&#125; \nEOF \nsudo systemctl daemon-reload \nsudo systemctl restart docker\n</code></pre>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<ul>\n<li>docker 官方有个镜像仓库（<span class=\"exturl\" data-url=\"aHR0cDovL2h1Yi5kb2NrZXIuY29t\">hub.docker.com</span> 虽然现在更多是软件官方维护自己的），里面提供镜像（包括软件及其依赖环境，好比绿色免安装版），pull 下来后可以独立的运行各个镜像（容器）</li>\n<li>在启动后，其实就是开了个 docker 的守护进程，等待命令。run 之后，就会从指定的仓库（默认或者设置的镜像地址）去拉取。便运行（不用重复拉取），可被重复部署（一台机器成集群都行）</li>\n</ul>\n<p>MySQL 为例子</p>\n<pre><code class=\"language-PowerShell\">docker run -d \\\n  --name mysql \\\n  -p 3306:3306 \\\n  -e TZ=Asia/Shanghai \\\n  -e MYSQL_ROOT_PASSWORD=123 \\\n  mysql\n</code></pre>\n<h2 id=\"命令\"><a class=\"anchor\" href=\"#命令\">#</a> 命令</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9jbGkv\">官网指南</span></p>\n<pre><code class=\"language-Bash\"># 启动Docker\nsystemctl start docker\n\n# 测试\ndocker run hello-world\n\n# 停止Docker\nsystemctl stop docker\n\n# 重启\nsystemctl restart docker\n\n# 设置开机自启\nsystemctl enable docker\n\n# Docker容器开机自启\ndocker update --restart=always [容器名/容器id]\n\n# 执行docker ps命令，如果不报错，说明安装启动成功\ndocker ps\n\n# 但docker有个关闭时也自动唤醒机制，用这个查看是否开启\nsystemctl status docker\n\n# 开启的话 stop 会提示，并且stop了也能直接用docker\nWarning: Stopping docker.service, but it can still be activated by:\n  docker.socket\n\n# 该机制通过一下命令管理\nsystemctl stop/start docker.socket\n\n# 查看运行的容器\ndocker ps\n\n# 查看具体的属性（容器、卷等）\ndocker inspect 容器名\ndocker volume inspect 卷名\n</code></pre>\n<table>\n<thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>文档地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>docker pull</td>\n<td>拉取镜像</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9wdWxsLw==\">docker pull</span></td>\n</tr>\n<tr>\n<td>docker push</td>\n<td>推送镜像到 DockerRegistry</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9wdXNoLw==\">docker push</span></td>\n</tr>\n<tr>\n<td>docker images</td>\n<td>查看本地镜像</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9pbWFnZXMv\">docker images</span></td>\n</tr>\n<tr>\n<td>docker rmi</td>\n<td>删除本地镜像</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9ybWkv\">docker rmi</span></td>\n</tr>\n<tr>\n<td>docker run</td>\n<td>创建并运行容器（不能重复创建）</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9ydW4v\">docker run</span></td>\n</tr>\n<tr>\n<td>docker stop</td>\n<td>停止指定容器</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9zdG9wLw==\">docker stop</span></td>\n</tr>\n<tr>\n<td>docker start</td>\n<td>启动指定容器</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9zdGFydC8=\">docker start</span></td>\n</tr>\n<tr>\n<td>docker restart</td>\n<td>重新启动容器</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9yZXN0YXJ0Lw==\">docker restart</span></td>\n</tr>\n<tr>\n<td>docker rm</td>\n<td>删除指定容器</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9ybS8=\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td>docker ps</td>\n<td>查看容器</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9wcy8=\">docker ps</span></td>\n</tr>\n<tr>\n<td>docker logs</td>\n<td>查看容器运行日志</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9sb2dzLw==\">docker logs</span></td>\n</tr>\n<tr>\n<td>docker exec</td>\n<td>进入容器</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9leGVjLw==\">docker exec</span></td>\n</tr>\n<tr>\n<td>docker save</td>\n<td>保存镜像到本地压缩文件</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9zYXZlLw==\">docker save</span></td>\n</tr>\n<tr>\n<td>docker load</td>\n<td>加载本地压缩文件到镜像</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9sb2FkLw==\">docker load</span></td>\n</tr>\n<tr>\n<td>docker inspect</td>\n<td>查看容器详细信息</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9pbnNwZWN0Lw==\">docker inspect</span></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"命令解读\"><a class=\"anchor\" href=\"#命令解读\">#</a> 命令解读</h2>\n<pre><code class=\"language-PowerShell\">docker run -d \\\n  --name mysql \\\n  -p 3305:3306 \\\n  -e TZ=Asia/Shanghai \\\n  -e MYSQL_ROOT_PASSWORD=123 \\\n  mysql\n</code></pre>\n<blockquote>\n<p>解读：</p>\n<ul>\n<li>\n<p><code>docker run -d</code>  ：创建并运行一个容器， <code>-d</code>  则是让容器以后台进程运行</p>\n</li>\n<li>\n<p><code>--name</code>   <code>mysql</code>  : 给容器起个名字叫 <code>mysql</code> ，你可以叫别的</p>\n</li>\n<li>\n<p><code>-p 3305:3306</code>  : 设置端口映射。</p>\n<ul>\n<li>\n<p><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将宿主机端口映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。（如宿主机 ip：192.168.0.1 (即你服务器的 ip，可以直接访问)，容器会有独立的 ip，如 192.168.0.2 (无法被直接访问)，此时就需要端口映射来访问容器）</p>\n</li>\n<li>\n<p>容器内端口往往是由容器内的进程决定，例如 MySQL 进程默认端口是 3306，因此容器内端口一定是 3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</p>\n</li>\n<li>\n<p>格式：  <code>-p 宿主机端口:容器内端口</code> ，示例中就是将宿主机的 3306 映射到容器内的 3306 端口</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>-e</code>   <code>TZ=Asia/Shanghai</code>  : 配置容器内进程运行时的一些参数，该参数要看官方设定</p>\n<ul>\n<li>\n<p>格式： <code>-e KEY=VALUE</code> ，KEY 和 VALUE 都由容器内进程决定</p>\n</li>\n<li>\n<p>案例中， <code>TZ=Asia/Shanghai</code>  是设置时区； <code>MYSQL_ROOT_PASSWORD=123</code>  是设置 MySQL 默认密码</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>mysql</code>  : 设置<strong>镜像</strong>名称，Docker 会根据这个名字搜索并下载镜像</p>\n<ul>\n<li>\n<p>格式： <code>REPOSITORY:TAG</code> ，例如 <code>mysql:8.0</code> ，其中 <code>REPOSITORY</code>  可以理解为镜像名， <code>TAG</code>  是版本号</p>\n</li>\n<li>\n<p>在未指定 <code>TAG</code>  的情况下，默认是最新版本，也就是 <code>mysql:latest</code></p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-PowerShell\"># 第1步，去DockerHub查看nginx镜像仓库及相关信息\n\n# 第2步，拉取Nginx镜像\ndocker pull nginx\n\n# 第3步，查看镜像\ndocker images\n# 结果如下：\nREPOSITORY   TAG       IMAGE ID       CREATED         SIZE\nnginx        latest    605c77e624dd   16 months ago   141MB\nmysql        latest    3218b38490ce   17 months ago   516MB\n\n# 第4步，创建并允许Nginx容器\ndocker run -d --name nginx -p 80:80 nginx\n\n# 第5步，查看运行中容器\ndocker ps\n# 也可以加格式化方式访问，格式会更加清爽\ndocker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;\n\n# 第6步，访问网页，地址：http://虚拟机地址\n\n# 第7步，停止容器\ndocker stop nginx\n\n# 第8步，查看所有容器\ndocker ps -a --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;\n\n# 第9步，再次启动nginx容器\ndocker start nginx\n\n# 第10步，再次查看容器\ndocker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;\n\n# 第11步，查看容器详细信息\ndocker inspect nginx\n\n# 第12步，进入容器,查看容器内目录\ndocker exec -it nginx bash\n# 或者，可以进入MySQL\ndocker exec -it mysql mysql -uroot -p\n\n# 第13步，删除容器\ndocker rm nginx\n# 发现无法删除，因为容器运行中，强制删除容器\ndocker rm -f nginx\n</code></pre>\n<p>镜像的名称不是随意的，而是要到 DockerRegistry 中寻找，镜像运行时的配置也不是随意的，要参考镜像的帮助文档，这些在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\"> DockerHub 网站</span>或者软件的官方网站中都能找到。</p>\n<p>如果我们要安装其它软件，也可以到 DockerRegistry 中寻找对应的镜像名称和版本，阅读相关配置即可。</p>\n<h2 id=\"linux别名\"><a class=\"anchor\" href=\"#linux别名\">#</a> Linux 别名</h2>\n<p><code>docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;</code>  太麻烦了，</p>\n<pre><code class=\"language-PowerShell\"># 修改/root/.bashrc文件\nvi /root/.bashrc\n内容如下：\n# .bashrc\n\n# User specific aliases and functions\n\nalias rm='rm -i'\nalias cp='cp -i'\nalias mv='mv -i'\nalias dps='docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;'\nalias dis='docker images'\n\n# Source global definitions\nif [ -f /etc/bashrc ]; then\n        . /etc/bashrc\nfi\n</code></pre>\n<p><code>source /root/.bashrc</code>  生效</p>\n<h1 id=\"数据卷\"><a class=\"anchor\" href=\"#数据卷\">#</a> 数据卷</h1>\n<p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部</p>\n<ul>\n<li>如果要升级 MySQL 版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li>\n<li>MySQL、Nginx 容器运行后，如果我要修改其中的某些配置该怎么办？</li>\n<li>我想要让 Nginx 代理我的静态资源怎么办？</li>\n</ul>\n<p>因此，容器提供程序的运行环境，但是程序运行产生的数据、程序运行依赖的配置都应该与容器<strong>解耦</strong>。</p>\n<p><strong>数据卷（volume）</strong> 是一个虚拟目录，是<strong>容器内目录</strong>与<strong>宿主机 **** 目录</strong>之间映射的桥梁。</p>\n<p>以 Nginx 为例，我们知道 Nginx 中有两个关键的目录：</p>\n<ul>\n<li><code>html</code> ：放置一些静态资源</li>\n<li><code>conf</code> ：放置配置文件</li>\n</ul>\n<p>如果我们要让 Nginx 代理我们的静态资源，最好是放到 <code>html</code>  目录；如果我们要修改 Nginx 的配置，最好是找到 <code>conf</code>  下的 <code>nginx.conf</code>  文件。</p>\n<p>但遗憾的是，容器运行的 Nginx 所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：<br />\n<img data-src=\"image-20240523160225133.png\" alt=\"\" /></p>\n<p>在上图中：</p>\n<ul>\n<li>\n<p>我们创建了两个数据卷： <code>conf</code> 、 <code>html</code></p>\n</li>\n<li>\n<p>Nginx 容器内部的 <code>conf</code>  目录和 <code>html</code>  目录分别与两个数据卷关联。</p>\n</li>\n<li>\n<p>而数据卷 conf 和 html 分别指向了宿主机的 <code>/var/lib/docker/volumes/conf/_data</code>  目录和 <code>/var/lib/docker/volumes/html/_data</code>  目录</p>\n</li>\n</ul>\n<p>这样以来，容器内的 <code>conf</code>  和 <code>html</code>  目录就 与宿主机的 <code>conf</code>  和 <code>html</code>  目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的 <code>/var/lib/docker/volumes/html/_data</code>  就是在操作容器内的 <code>/usr/share/nginx/html/_data</code>  目录。只要我们将静态资源放入宿主机对应目录，就可以被 Nginx 代理了。</p>\n<div class=\"note info no-icon\">\n<p><code>/var/lib/docker/volumes</code>  这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为 <code>/数据卷名/_data</code> 。</p>\n<p><strong>为什么不让容器目录直接指向<strong><strong>宿主机</strong></strong>目录呢</strong>？</p>\n<ul>\n<li>因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</li>\n<li>但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与宿主机目录之间的映射关系即可。</li>\n</ul>\n</div>\n<h3 id=\"命令-2\"><a class=\"anchor\" href=\"#命令-2\">#</a> 命令</h3>\n<table>\n<thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>文档地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>docker volume create</td>\n<td>创建数据卷</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS92b2x1bWVfY3JlYXRlLw==\">docker volume create</span></td>\n</tr>\n<tr>\n<td>docker volume ls</td>\n<td>查看所有数据卷</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS92b2x1bWVfbHMv\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td>docker volume rm</td>\n<td>删除指定数据卷</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS92b2x1bWVfcHJ1bmUv\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td>docker volume inspect</td>\n<td>查看某个数据卷的详情</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS92b2x1bWVfaW5zcGVjdC8=\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td>docker volume prune</td>\n<td>清除数据卷</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS92b2x1bWVfcHJ1bmUv\">docker volume prune</span></td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-Bash\"># 挂载本地目录\n-v 本地目录:容器内目录\n# 挂载本地文件\n-v 本地文件:容器内文件\n</code></pre>\n<p>演示：</p>\n<pre><code class=\"language-PowerShell\"># 1.首先创建容器并指定数据卷，注意通过 \n# -v 参数来指定数据卷 卷名:容器内路径 / \ndocker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx\n\n# 2.然后查看数据卷\ndocker volume ls\n# 结果\nDRIVER    VOLUME NAME\nlocal     29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f\nlocal     html\n\n# 3.查看数据卷详情\ndocker volume inspect html\n# 结果\n[\n    &#123;\n        &quot;CreatedAt&quot;: &quot;2024-05-17T19:57:08+08:00&quot;,\n        &quot;Driver&quot;: &quot;local&quot;,\n        &quot;Labels&quot;: null,\n        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/html/_data&quot;,\n        &quot;Name&quot;: &quot;html&quot;,\n        &quot;Options&quot;: null,\n        &quot;Scope&quot;: &quot;local&quot;\n    &#125;\n]\n\n# 4.查看/var/lib/docker/volumes/html/_data目录\nll /var/lib/docker/volumes/html/_data\n# 可以看到与nginx的html目录内容一样，结果如下：\n总用量 8\n-rw-r--r--. 1 root root 497 12月 28 2021 50x.html\n-rw-r--r--. 1 root root 615 12月 28 2021 index.html\n\n# 5.进入该目录，并随意修改index.html内容\ncd /var/lib/docker/volumes/html/_data\nvi index.html\n\n# 6.打开页面，查看效果\n\n# 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化\ndocker exec -it nginx bash\n</code></pre>\n<h1 id=\"自定义镜像\"><a class=\"anchor\" href=\"#自定义镜像\">#</a> 自定义镜像</h1>\n<p>也就是实际开发中可能要在团队内互传环境，便于使用（打包 + 安装）</p>\n<p>以 java 环境为例</p>\n<ul>\n<li>准备 Linux 运行环境（java 项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li>\n<li>安装并配置 JDK</li>\n<li>拷贝 jar 包</li>\n<li>配置启动脚本</li>\n</ul>\n<p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p>\n<p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一 id，称为<strong> Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p>\n<p>分层：减少工作 + 共享</p>\n<h2 id=\"dockerfile-指令\"><a class=\"anchor\" href=\"#dockerfile-指令\">#</a> Dockerfile 指令</h2>\n<p><a href=\"%5Bhttps://docs.docker.com/engine/reference/builder/%5D(https://docs.docker.com/engine/reference/builder/)\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th><strong>指令</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>FROM</strong></td>\n<td>指定基础镜像</td>\n<td><code>FROM centos:6</code></td>\n</tr>\n<tr>\n<td><strong>ENV</strong></td>\n<td>设置环境变量，可在后面指令使用</td>\n<td><code>ENV key value</code></td>\n</tr>\n<tr>\n<td><strong>COPY</strong></td>\n<td>拷贝本地文件到镜像的指定目录</td>\n<td><code>COPY ./xx.jar /tmp/app.jar</code></td>\n</tr>\n<tr>\n<td><strong>RUN</strong></td>\n<td>执行 Linux 的 shell 命令，一般是安装过程的命令</td>\n<td><code>RUN yum install gcc</code></td>\n</tr>\n<tr>\n<td><strong>EXPOSE</strong></td>\n<td>指定容器运行时监听的端口，是给镜像使用者看的</td>\n<td>EXPOSE 8080</td>\n</tr>\n<tr>\n<td><strong>ENTRYPOINT</strong></td>\n<td>镜像中应用的启动命令，容器运行时调用</td>\n<td>ENTRYPOINT java -jar xx.jar</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-Dockerfile\"># 指定基础镜像\nFROM ubuntu:16.04\n# 配置环境变量，JDK的安装目录、容器内时区\nENV JAVA_DIR=/usr/local\nENV TZ=Asia/Shanghai\n# 拷贝jdk和java项目的包\nCOPY ./jdk8.tar.gz $JAVA_DIR/\nCOPY ./docker-demo.jar /tmp/app.jar\n# 设定时区\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone\n# 安装JDK\nRUN cd $JAVA_DIR \\\n &amp;&amp; tar -xf ./jdk8.tar.gz \\\n &amp;&amp; mv ./jdk1.8.0_144 ./java8\n# 配置环境变量\nENV JAVA_HOME=$JAVA_DIR/java8\nENV PATH=$PATH:$JAVA_HOME/bin\n# 指定项目监听的端口\nEXPOSE 8080\n# 入口，java项目的启动命令\nENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]\n</code></pre>\n<p>有人提供了基础的系统加 JDK 环境，我们在此基础上制作 java 镜像，就可以省去 JDK 的配置了：</p>\n<pre><code class=\"language-Dockerfile\"># 基础镜像\nFROM openjdk:11.0-jre-buster\n# 设定时区\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone\n# 拷贝jar包\nCOPY docker-demo.jar /app.jar\n# 入口\nENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]\n</code></pre>\n<h2 id=\"构建\"><a class=\"anchor\" href=\"#构建\">#</a> 构建</h2>\n<p>将上述 Dockerfile 文件和要打包的 jar 包放一起</p>\n<pre><code class=\"language-Bash\"># 进入镜像目录\ncd /root/demo\n# 开始构建\ndocker build -t docker-demo:1.0 .\n</code></pre>\n<p>命令说明：</p>\n<ul>\n<li><code>docker build</code>  : 就是构建一个 docker 镜像</li>\n<li><code>-t docker-demo:1.0</code>  ： <code>-t</code>  参数是指定镜像的名称（ <code>repository</code>  和 <code>tag</code> ）</li>\n<li><code>.</code>  : 最后的点是指构建时 Dockerfile 所在路径，由于我们进入了 demo 目录，所以指定的是 <code>.</code>  代表当前目录，也可以直接指定为某目录</li>\n</ul>\n<p>之后 <code>docker images</code>  就看得到了，然后正常 run 使用</p>\n<h1 id=\"网络\"><a class=\"anchor\" href=\"#网络\">#</a> 网络</h1>\n<p>多服务之间可能需要互相访问，本节就是容器之间访问的整理。</p>\n<p>虽然外部不能访问容器（只能映射的接口），但容器之间本身在一个网段。所有的容器都以 bridge 的形式连接到 docker 的一个虚拟网桥上</p>\n<p>但是，容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而再部署时很可能容器的 IP 会发生变化，连接会失败。</p>\n<p><a href=\"%5Bhttps://docs.docker.com/engine/reference/commandline/network/%5D(https://docs.docker.com/engine/reference/commandline/network/)\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>文档地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>docker network create</td>\n<td>创建一个网络</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX2NyZWF0ZS8=\">docker network create</span></td>\n</tr>\n<tr>\n<td>docker network ls</td>\n<td>查看所有网络</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX2xzLw==\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td>docker network rm</td>\n<td>删除指定网络</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX3JtLw==\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td>docker network prune</td>\n<td>清除未使用的网络</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX3BydW5lLw==\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td>docker network connect</td>\n<td>使指定容器连接加入某网络</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX2Nvbm5lY3Qv\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td>docker network disconnect</td>\n<td>使指定容器连接离开某网络</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX2Rpc2Nvbm5lY3Qv\">docker network disconnect</span></td>\n</tr>\n<tr>\n<td>docker network inspect</td>\n<td>查看网络详细信息</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX2luc3BlY3Qv\">docker network inspect</span></td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-Bash\"># 1.首先通过命令创建一个网络\ndocker network create hmall\n\n# 2.然后查看网络\ndocker network ls\n# 结果：\nNETWORK ID     NAME      DRIVER    SCOPE\n639bc44d0a87   bridge    bridge    local\n403f16ec62a2   hmall     bridge    local\n0dc0f72a0fbb   host      host      local\ncd8d3e8df47b   none      null      local\n# 其中，除了hmall以外，其它都是默认的网络\n\n# 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名\n# 这样该网络内的其它容器可以用别名互相访问！\n# 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名\ndocker network connect hmall mysql --alias db\n# 3.2.db容器，也就是我们的java项目\ndocker network connect hmall dd\n\n# 4.进入dd容器，尝试利用别名访问db\n# 4.1.进入容器\ndocker exec -it dd bash\n# 4.2.用db别名访问\nping db\n# 结果\nPING db (172.18.0.2) 56(84) bytes of data.\n64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms\n64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms\n# 4.3.用容器名访问\nping mysql\n# 结果：\nPING mysql (172.18.0.2) 56(84) bytes of data.\n64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms\n64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms\n</code></pre>\n<p>这样可以将有需要的服务放在一个网桥，通过命名访问即可，无需管虚拟 ip</p>\n<div class=\"note info no-icon\">\n<ul>\n<li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li>\n<li>在同一个自定义网络中的容器，可以通过别名互相访问</li>\n</ul>\n</div>\n<h1 id=\"项目部署案例\"><a class=\"anchor\" href=\"#项目部署案例\">#</a> 项目部署案例</h1>\n<p>见<a href=\"#%E8%B5%84%E6%96%99\">资料</a>中的文档</p>\n<h1 id=\"dockercompose\"><a class=\"anchor\" href=\"#dockercompose\">#</a> DockerCompose</h1>\n<p>部署一个简单的 java 项目，其中包含 3 个容器：</p>\n<ul>\n<li>MySQL</li>\n<li>Nginx</li>\n<li>Java 项目</li>\n</ul>\n<p>而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止 3 个。如果还像之前那样手动的逐一部署，就太麻烦了。</p>\n<p>而 Docker Compose 就可以帮助我们实现<strong>多个相互关联的 Docker 容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p>\n<p>docker-compose.yml 文件的基本语法可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9jb21wb3NlLWZpbGUvbGVnYWN5LXZlcnNpb25zLw==\">官方文档</span></p>\n<p>docker-compose 文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于 service 就是在定义某个应用的运行时参数，因此与 <code>docker run</code>  参数非常相似。</p>\n<p>举例来说，用 docker run 部署 MySQL 的命令如下：</p>\n<pre><code class=\"language-Bash\">docker run -d \\\n  --name mysql \\\n  -p 3306:3306 \\\n  -e TZ=Asia/Shanghai \\\n  -e MYSQL_ROOT_PASSWORD=123 \\\n  -v ./mysql/data:/var/lib/mysql \\\n  -v ./mysql/conf:/etc/mysql/conf.d \\\n  -v ./mysql/init:/docker-entrypoint-initdb.d \\\n  --network hmall\n  mysql\n</code></pre>\n<p>如果用 <code>docker-compose.yml</code>  文件来定义，就是这样：</p>\n<pre><code class=\"language-YAML\">version: &quot;3.8&quot;\n\nservices:\n  mysql:\n    image: mysql\n    container_name: mysql\n    ports:\n      - &quot;3306:3306&quot;\n    environment:\n      TZ: Asia/Shanghai\n      MYSQL_ROOT_PASSWORD: 123\n    volumes:\n      - &quot;./mysql/conf:/etc/mysql/conf.d&quot;\n      - &quot;./mysql/data:/var/lib/mysql&quot;\n    networks:\n      - new\nnetworks:\n  new:\n    name: hmall\n</code></pre>\n<p>对比如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>docker run 参数</strong></th>\n<th><strong>docker compose 指令</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--name</td>\n<td>container_name</td>\n<td>容器名称</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>ports</td>\n<td>端口映射</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>environment</td>\n<td>环境变量</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>volumes</td>\n<td>数据卷配置</td>\n</tr>\n<tr>\n<td>--network</td>\n<td>networks</td>\n<td>网络</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"命令-3\"><a class=\"anchor\" href=\"#命令-3\">#</a> 命令</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9yZWZlcmVuY2Uv\">官方文档</span></p>\n<p>基本语法如下：</p>\n<pre><code class=\"language-Bash\">docker compose [OPTIONS] [COMMAND]\n</code></pre>\n<p>其中，OPTIONS 和 COMMAND 都是可选参数，比较常见的有：</p>\n<table>\n<thead>\n<tr>\n<th><strong>类型</strong></th>\n<th><strong>参数或指令</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Options</td>\n<td>-f</td>\n<td>指定 compose 文件的路径和名称</td>\n</tr>\n<tr>\n<td></td>\n<td>-p</td>\n<td>指定 project 名称。project 就是当前 compose 文件中设置的多个 service 的集合，是逻辑概念</td>\n</tr>\n<tr>\n<td>Commands</td>\n<td>up</td>\n<td>创建并启动所有 service 容器</td>\n</tr>\n<tr>\n<td></td>\n<td>down</td>\n<td>停止并移除所有容器、网络</td>\n</tr>\n<tr>\n<td></td>\n<td>ps</td>\n<td>列出所有启动的容器</td>\n</tr>\n<tr>\n<td></td>\n<td>logs</td>\n<td>查看指定容器的日志</td>\n</tr>\n<tr>\n<td></td>\n<td>stop</td>\n<td>停止容器</td>\n</tr>\n<tr>\n<td></td>\n<td>start</td>\n<td>启动容器</td>\n</tr>\n<tr>\n<td></td>\n<td>restart</td>\n<td>重启容器</td>\n</tr>\n<tr>\n<td></td>\n<td>top</td>\n<td>查看运行的进程</td>\n</tr>\n<tr>\n<td></td>\n<td>exec</td>\n<td>在指定的运行中容器中执行命令</td>\n</tr>\n</tbody>\n</table>\n<p>教学演示：</p>\n<pre><code class=\"language-Bash\"># 1.进入root目录\ncd /root\n\n# 2.删除旧容器\ndocker rm -f $(docker ps -qa)\n\n# 3.删除hmall镜像\ndocker rmi hmall\n\n# 4.清空MySQL数据\nrm -rf mysql/data\n\n# 5.启动所有, -d 参数是后台启动\ndocker compose up -d\n# 结果：\n[+] Building 15.5s (8/8) FINISHED\n =&gt; [internal] load build definition from Dockerfile                                    0.0s\n =&gt; =&gt; transferring dockerfile: 358B                                                    0.0s\n =&gt; [internal] load .dockerignore                                                       0.0s\n =&gt; =&gt; transferring context: 2B                                                         0.0s\n =&gt; [internal] load metadata for docker.io/library/openjdk:11.0-jre-buster             15.4s\n =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s\n =&gt; [internal] load build context                                                       0.0s\n =&gt; =&gt; transferring context: 98B                                                        0.0s\n =&gt; CACHED [2/3] RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo   0.0s\n =&gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s\n =&gt; exporting to image                                                                  0.0s\n =&gt; =&gt; exporting layers                                                                 0.0s\n =&gt; =&gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s\n =&gt; =&gt; naming to docker.io/library/root-hmall                                           0.0s\n[+] Running 4/4\n ✔ Network hmall    Created                                                             0.2s\n ✔ Container mysql  Started                                                             0.5s\n ✔ Container hmall  Started                                                             0.9s\n ✔ Container nginx  Started                                                             1.5s\n\n# 6.查看镜像\ndocker compose images\n# 结果\nCONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE\nhmall               root-hmall          latest              32eebee16acd        362MB\nmysql               mysql               latest              3218b38490ce        516MB\nnginx               nginx               latest              605c77e624dd        141MB\n\n# 7.查看容器\ndocker compose ps\n# 结果\nNAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS\nhmall               root-hmall          &quot;java -jar /app.jar&quot;     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp\nmysql               mysql               &quot;docker-entrypoint.s…&quot;   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp\nnginx               nginx               &quot;/docker-entrypoint.…&quot;   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&gt;18080-18081/tcp, :::18080-18081-&gt;18080-18081/tcp\n</code></pre>\n<h1 id=\"资料\"><a class=\"anchor\" href=\"#资料\">#</a> 资料</h1>\n<p>黑马的：<span class=\"spoiler\" title=\"你知道得太多了\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iMTFldDN1bjUzbS5mZWlzaHUuY24vd2lraS9NV1FJdzRadmhpbDBJNWt0UEh3Y29xWmRuZWM/ZnJvbT1mcm9tX2NvcHlsaW5r\">文档</span>，可以去官号支持，至少资料免费，也有用</span></p>\n",
            "tags": []
        },
        {
            "id": "https://zyakmd.github.io/2024/03/22/%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/",
            "url": "https://zyakmd.github.io/2024/03/22/%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/",
            "title": "项目优化",
            "date_published": "2024-03-22T09:02:14.000Z",
            "content_html": "<p>最近的一次 java 项目还是本科，几年了，主从和 Nginx 有用过，虽然也忘了。但肯定不够，要躺板板的。补充学一下 Redis 和 RocketMQ 和复习之前的。</p>\n<h1 id=\"redis-springcache\"><a class=\"anchor\" href=\"#redis-springcache\">#</a> Redis + SpringCache</h1>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>没啥好说的，双端安装，教程很多，其中 linux 下需要 gcc 环境</p>\n<h2 id=\"服务运行\"><a class=\"anchor\" href=\"#服务运行\">#</a> 服务运行</h2>\n<h3 id=\"启停\"><a class=\"anchor\" href=\"#启停\">#</a> 启停</h3>\n<ul>\n<li>进入到 <code>/src</code>  目录下，执行 <code>redis-server</code>  即可启动服务，默认端口号为 <code>6379</code></li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进入到根目录  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/redis根目录/src  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 执行 redis-server  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./redis-server</pre></td></tr></table></figure><ul>\n<li><code>ps aux | grep redis</code>  查看当前进程 PID</li>\n<li><code>kill -9 PID</code>  关闭</li>\n<li>或者执行<br />\n <code>redis-cli shutdown</code> <br />\n 有密码则要先登录再 shutdown <code>redis-cli -p &lt;password&gt; shutdown</code> ，虽然会提示直接这样用密码不安全哈哈</li>\n</ul>\n<h3 id=\"后台运行\"><a class=\"anchor\" href=\"#后台运行\">#</a> 后台运行</h3>\n<ul>\n<li>进入到 redis 根目录下，修改配置 redis.conf 文件</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进入到 redis 根目录下  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/redis根目录  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 修改配置文件  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">vim</span> redis.conf</pre></td></tr></table></figure><ul>\n<li>找到 <code>daemonize on</code>  字段，将其修改为 <code>daemonize yes</code></li>\n<li>在 redis 根目录以 redis.conf 作为配置文件在后台运行</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> src/redis-server </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./redis.conf</pre></td></tr></table></figure><ul>\n<li>或者 tmux 开后台终端也好用</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 虚拟环境（免断网掉线，后台运行） &#123;创建、进入、杀死、切换、重命名、显示所有&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tmux new <span class=\"token parameter variable\">-t</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tmux a <span class=\"token parameter variable\">-t</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tmux kill-session <span class=\"token parameter variable\">-t</span> <span class=\"token operator\">&lt;</span>session-name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tmux switch <span class=\"token parameter variable\">-t</span> <span class=\"token operator\">&lt;</span>session-name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tmux rename-session <span class=\"token parameter variable\">-t</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span>new-name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>tmux <span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 退出 (非终止)，在里面 Ctrl+b  按 d</span></pre></td></tr></table></figure><h3 id=\"密码校验\"><a class=\"anchor\" href=\"#密码校验\">#</a> 密码校验</h3>\n<ul>\n<li>还是修改 redis.conf 配置文件，找到 <code>requirepass</code>  这行 (vim 里 / 查找内容)，将其注释去掉，并在后面写上自己的密码</li>\n<li>然后杀掉原进程再重新启动</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 重新启动  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>src/redis-server ./redis.conf   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 登录时同时进行认证  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>src/redis-cli <span class=\"token parameter variable\">-h</span> localhost <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span> <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>password<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>修改完毕之后重启服务</li>\n</ul>\n<h3 id=\"远程连接\"><a class=\"anchor\" href=\"#远程连接\">#</a> 远程连接</h3>\n<ul>\n<li>还是修改 redis.conf 配置文件，找到 <code>bind 127.0.0.1</code>  这行，把这行注释掉</li>\n<li>之后设置防火墙，开启 6379 端口</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 开启 6379 端口  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">6379</span>/tcp <span class=\"token parameter variable\">--permanent</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 设置立即生效  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>firewall-cmd <span class=\"token parameter variable\">--reload</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看开放的端口  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>public --list-ports</pre></td></tr></table></figure><ul>\n<li>服务器对应的接口要打开，像阿里云在 esc 控制台要手动添加开放端口</li>\n<li>最后在 Windows 的 redis 根目录下，按住 Shift + 右键打开 PowerShell 窗口，连接 Linux 的 Redis<br />\n <code>.\\redis-cli.ext -h 服务器地址 -p 6379 -a &lt;password&gt;</code></li>\n</ul>\n<p>懒得开控制台的话用 redis desktop，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phY2FDYW8vYXJ0aWNsZS9kZXRhaWxzLzEwNjA4ODE0OA==\">使用参考</span></p>\n<h3 id=\"报错\"><a class=\"anchor\" href=\"#报错\">#</a> 报错</h3>\n<p>启动的时候遇到了</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>WARNING overcommit_memory is <span class=\"token builtin class-name\">set</span> to <span class=\"token number\">0</span><span class=\"token operator\">!</span> Background save may fail</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>under low memory condition. To fix this issue <span class=\"token function\">add</span> ‘vm.overcommit_memory <span class=\"token operator\">=</span> <span class=\"token number\">1</span>’ to <span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">></span> /etc/sysctl.conf and <span class=\"token keyword\">then</span> <span class=\"token function\">reboot</span> or run the <span class=\"token builtin class-name\">command</span> ‘sysctl <span class=\"token assign-left variable\">vm.overcommit_memory</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>’ <span class=\"token operator\">></span> <span class=\"token keyword\">for</span> this to take effect.</pre></td></tr></table></figure><p>需要进行内存设置（服务器配置太拉的要？）<br />\n <code>echo 1 &gt; /proc/sys/vm/overcommit_memory</code>  即可</p>\n<div class=\"note info no-icon\">\n<ul>\n<li>0， 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程</li>\n<li>1，表示内核允许分配所有的物理内存，而不管当前的内存状态如何</li>\n<li>2， 表示内核允许分配超过所有物理内存和交换空间总和的内存</li>\n</ul>\n</div>\n<h2 id=\"java中使用\"><a class=\"anchor\" href=\"#java中使用\">#</a> Java 中使用</h2>\n<ul>\n<li>Redis 的 Java 客户端有很多，官方推荐的有三种\n<ul>\n<li><code>Jedis</code></li>\n<li><code>Lettuce</code></li>\n<li><code>Redisson</code></li>\n</ul>\n</li>\n<li>Spring 对 Redis 客户端进行了整合，提供了 SpringDataRedis，在 Spring Boot 项目中还提供了对应的 Starter，即 <code>spring-boot-starter-data-redis</code></li>\n</ul>\n<h3 id=\"jedis\"><a class=\"anchor\" href=\"#jedis\">#</a> Jedis</h3>\n<ul>\n<li>使用 Jedis 的步骤\n<ol>\n<li>获取连接</li>\n<li>执行操作</li>\n<li>关闭连接</li>\n</ol>\n</li>\n<li>在此之前我们需要导入一下 Jedis 的 maven 坐标</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>编写测试类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:RedisTestApplicationTests</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisTestApplicationTests</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//1. 获取连接  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//2. 执行具体操作  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//key、value set 到 redis 中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hades\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">//hashset: 对于某些不定项操作可以利用哈希扩展</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"num\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4204000400\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hgetAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keySet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">//3. 关闭连接  </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>另外两个类似，导入坐标，获取链接，使用各自的接口函数</p>\n<h3 id=\"spring-data-redis\"><a class=\"anchor\" href=\"#spring-data-redis\">#</a> Spring Data Redis</h3>\n<ul>\n<li>SpringBoot 项目中，可以使用 SpringDataRedis 来简化 Redis（常用）</li>\n<li>Spring Data Redis 中提供了一个高度封装的类：RedisTemplate，针对 jedis 客户端中大量 api 进行了归类封装，将同一类型操作封装为 operation 接口，具体分类如下：\n<ul>\n<li>ValueOperations：简单 K-V 操作</li>\n<li>SetOperations：set 类型数据操作</li>\n<li>ZSetOperations：zset 类型数据操作</li>\n<li>HashOperations：针对 map 类型的数据操作</li>\n<li>ListOperations：针对 list 类型的数据操作</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ol>\n<li>使用 SpringDataRedis，我们首先需要导入它的 maven 坐标</li>\n</ol>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--Spring Boot-redis 的依赖包 --></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>重新设置一下序列化器，防止出现乱码，在 config 包下创建 <code>RedisConfig</code>  配置类</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CachingConfigurerSupport</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> redisTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 默认的 Key 序列化器为：JdkSerializationRedisSerializer  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>```</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">></span><span class=\"token number\">3.</span> 配置一下连接redis的相关配置</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>```yml</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>spring<span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  redis<span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    host<span class=\"token operator\">:</span> localhost  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    port<span class=\"token operator\">:</span> <span class=\"token number\">6379</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    #password<span class=\"token operator\">:</span> root  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    database<span class=\"token operator\">:</span> <span class=\"token number\">0</span> #操作的是<span class=\"token number\">0</span>号数据库  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    jedis<span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      #<span class=\"token class-name\">Redis</span>连接池配置  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      pool<span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        max<span class=\"token operator\">-</span>active<span class=\"token operator\">:</span> <span class=\"token number\">8</span> #最大连接数  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        max<span class=\"token operator\">-</span>wait<span class=\"token operator\">:</span> <span class=\"token number\">1</span>ms #连接池最大阻塞等待时间  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        max<span class=\"token operator\">-</span>idle<span class=\"token operator\">:</span> <span class=\"token number\">4</span> #连接池中的最大空闲连接  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        min<span class=\"token operator\">-</span>idle<span class=\"token operator\">:</span> <span class=\"token number\">0</span> #连接池中的最小空闲连接</pre></td></tr></table></figure><blockquote>\n<ol start=\"4\">\n<li>使用</li>\n</ol>\n</blockquote>\n<ul>\n<li><code>String</code>  类型数据操作</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">stringTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取对象  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ValueOperations</span> valueOperations <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 设置 name 为 Hades  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Hades\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 设置 age 为 9527，有效时间 10 秒  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9527\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">String</span> age <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 如果不存在，则设置 name 为 Kyle  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Boolean</span> aBoolean <span class=\"token operator\">=</span> valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kyle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>aBoolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>```</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>输出结果如下，由于name已经存在，故<span class=\"token class-name\">Kyle</span>设置失败，最后返回<span class=\"token boolean\">false</span>，<span class=\"token number\">10</span>秒过后，我们再去redis中get name，则输出`nil`，表示不存在</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">-</span> `<span class=\"token class-name\">Hash</span>`类型数据操作</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>```java</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">hashTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">HashOperations</span> hashOperations <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    hashOperations<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4204000400\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hades\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    hashOperations<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4204000400\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    hashOperations<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4204000400\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hobby\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 获取 map 集合  </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> hashOperations<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4204000400\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> hashKey <span class=\"token operator\">:</span> keySet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hashKey <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>hashKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$$$$$$$$$$$$$$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 只获取 keys  </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> hashOperations<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4204000400\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$$$$$$$$$$$$$$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 只获取 values  </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> values <span class=\"token operator\">=</span> hashOperations<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4204000400\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果如下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name:Hades  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age:18  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hobby:Apex  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span>$  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>name  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>age  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hobby  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span>$  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Hades  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">18</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Apex</pre></td></tr></table></figure><ul>\n<li><code>List</code>  类型数据操作</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">listTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ListOperations</span> listOperations <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 存数据  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    listOperations<span class=\"token punctuation\">.</span><span class=\"token function\">leftPush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testData\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    listOperations<span class=\"token punctuation\">.</span><span class=\"token function\">leftPushAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testData\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> testDatas <span class=\"token operator\">=</span> listOperations<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testData\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 遍历  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tableData <span class=\"token operator\">:</span> testDatas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tableData <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 获取当前 list 长度，用于遍历  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Long</span> size <span class=\"token operator\">=</span> listOperations<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testData\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 遍历输出并删除  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>listOperations<span class=\"token punctuation\">.</span><span class=\"token function\">leftPop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testData\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 最后输出一下当前 list 长度  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>listOperations<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testData\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果如下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>D C B A  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>D C B A  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr></table></figure><ul>\n<li><code>Set</code>  类型数据操作</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">SetOperations</span> setOperations <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 存数据，这里存了两个 a  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    setOperations<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tmp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    遍历输出  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tmpData <span class=\"token operator\">=</span> setOperations<span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value <span class=\"token operator\">:</span> tmpData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$$$$$$$$$$$$$$$$$$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 删除 bc  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    setOperations<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tmp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 再次遍历输出  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    tmpData <span class=\"token operator\">=</span> setOperations<span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value <span class=\"token operator\">:</span> tmpData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果如下，符合预期</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d b c a  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span>$  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>d a</pre></td></tr></table></figure><ul>\n<li>通用的数据类型操作</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">commonTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 查看所有 key  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 查看是否存在指定 key  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$$$$$$$$$$$$$$$$$$$$$$$$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Random\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$$$$$$$$$$$$$$$$$$$$$$$$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 删除指定 key，并再次查看  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myZset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    keys <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$$$$$$$$$$$$$$$$$$$$$$$$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 输出指定 key 的类型  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tmp  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>name  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">4204000400</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>stu  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>myData  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span>$  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token boolean\">false</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span>$  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>tmp  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>name  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">4204000400</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>stu  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>myData  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span><span class=\"token variable\">$$</span>$  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>SET</pre></td></tr></table></figure><h2 id=\"简单案例\"><a class=\"anchor\" href=\"#简单案例\">#</a> 简单案例</h2>\n<blockquote>\n<p>导入 SpringDataRedis 的 maven 坐标</p>\n</blockquote>\n<p>使用 SpringDataRedis</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>配置文件</p>\n</blockquote>\n<ul>\n<li>配置连接 redis 的数据，我这里配置的是我的云服务器上装的 Redis</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> localhost  <span class=\"token comment\"># 或者服务器上的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">#password: root  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\">#操作的是 0 号数据库  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">jedis</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">#Redis 连接池配置  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">max-active</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token comment\">#最大连接数  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">max-wait</span><span class=\"token punctuation\">:</span> 1ms <span class=\"token comment\">#连接池最大阻塞等待时间  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">max-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token comment\">#连接池中的最大空闲连接  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">min-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\">#连接池中的最小空闲连接</span></pre></td></tr></table></figure><blockquote>\n<p>配置类</p>\n</blockquote>\n<ul>\n<li>配置一下序列化器，方便我们在图形化界面中查看我们存入的数据，在 config 包下新建 RedisConfig 类</li>\n<li>但是也可以不配置 RedisConfig，而是直接用 <code>SpringRedisConfig</code> ，它的默认序列化器就是 <code>StringRedisSerializer</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CachingConfigurerSupport</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> redisTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 默认 key 序列化器为：JdkSerializationRedisSerializer  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>测试</p>\n</blockquote>\n<p>在测试类中测试，再次读取时有持久化的对象。但用 redis desktop 修改的数据无法反序列化回来，爷晕晕</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RedisTemplate</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ValueOperations</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RedisSerializer</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringRedisSerializer</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestApplicationTests</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">stringTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 获取对象  </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">ValueOperations</span> valueOperations <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 设置 name 为 Hades  </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ZYK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 设置 age 为 9527，有效时间 10 秒  </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9527\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span> age <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 如果不存在，则设置 name 为 Kyle  </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Boolean</span> aBoolean <span class=\"token operator\">=</span> valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>aBoolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 注释掉上面除 valueOperations，再次测试读取数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>valueOperations<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>开发中能做什么呢？</p>\n<ul>\n<li>缓存短信\n<ul>\n<li>替换掉 session，避免服务器的开销，因为还要存用户 id 之类的</li>\n</ul>\n</li>\n<li>缓存商品信息\n<ul>\n<li>比如用户的购物车里的，或者历史订单，这种显示固定内容的，避免反复查询</li>\n<li>但要注意在其他 update、save、delete 等业务逻辑时要删除对应的 redis 数据，让其在执行查询业务的时候重新加载</li>\n</ul>\n</li>\n<li>能放图片吗？\n<ul>\n<li>能，基于 base64 编解码</li>\n<li>&quot;字符串类型是 Redis 中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据。你可以用其存储用户的邮箱、JSON 化的对象甚至是一张图片&quot;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结合spring-cache\"><a class=\"anchor\" href=\"#结合spring-cache\">#</a> 结合 spring cache</h2>\n<ul>\n<li>SpringCache 是一个框架，实现了基本注解的缓存功能，只需要简单的添加一个注解，就能实现缓存功能</li>\n<li>SpringCache 提供了一层抽象，底层可以切换不同的 cache 实现，具体就是通过 CacheManager 接口来统一不同的缓存技术</li>\n<li>针对不同的缓存技术，需要实现不同的 CacheManager</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>CacheManger</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EhCacheCacheManager</td>\n<td>使用 EhCache 作为缓存技术</td>\n</tr>\n<tr>\n<td>GuavaCacheManager</td>\n<td>使用 Googke 的 GuavaCache 作为缓存技术</td>\n</tr>\n<tr>\n<td>RedisCacheManager</td>\n<td>使用 Redis 作为缓存技术</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常用注解\"><a class=\"anchor\" href=\"#常用注解\">#</a> 常用注解</h3>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@EnableCaching</td>\n<td>开启缓存注解功能</td>\n</tr>\n<tr>\n<td>@Cacheable</td>\n<td>在方法执行前 spring 先查看缓存中是否有数据。如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</td>\n</tr>\n<tr>\n<td>@CachePut</td>\n<td>将方法的返回值放到缓存中</td>\n</tr>\n<tr>\n<td>@CacheEvict</td>\n<td>将一条或者多条数据从缓存中删除</td>\n</tr>\n</tbody>\n</table>\n<p><code>@Cacheable</code>  的作用主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，其主要参数说明如下</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明 &lt;img width=300/&gt;</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>缓存的名称，在 spring 配置文件中定义，必须指定至少一个</td>\n<td>例如:@Cacheable (value=“mycache”) 或者 @Cacheable (value=(“cache7”, “cache2”]</td>\n</tr>\n<tr>\n<td>key</td>\n<td>缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合</td>\n<td>例如:@Cacheable (value=“testcache”,key=“#userName”)</td>\n</tr>\n<tr>\n<td>condition</td>\n<td>缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存</td>\n<td>例如:@Cacheable (value=“testcache”,condition=“#userName.length ()&gt;2”)</td>\n</tr>\n</tbody>\n</table>\n<p><code>@CachEvict</code>  的作用主要针对方法配置，能够根据一定的条件对缓存进行清空</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明 &lt;img width=300/&gt;</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>缓存的名称，在 spring 配置文件中定义，必须指定至少一个</td>\n<td>例如:@Cacheable (value=“mycache”) 或者 @Cacheable (value={“cache1”, “cache2”]</td>\n</tr>\n<tr>\n<td>key</td>\n<td>缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合</td>\n<td>例如:@Cacheable (value=“testcache”,key=“#userName”)</td>\n</tr>\n<tr>\n<td>condition</td>\n<td>缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存</td>\n<td>例如:@Cacheable (value=“testcache”,condition=“#userName.length ()&gt;2”)</td>\n</tr>\n<tr>\n<td>allEntries</td>\n<td>是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存</td>\n<td>例如:@CachEvict (value=“testcache”,allEntries=true)</td>\n</tr>\n<tr>\n<td>beforelnvocation</td>\n<td>是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存</td>\n<td>例如:@CachEvict (value=“testcache”, beforelnvocation=true)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h3>\n<blockquote>\n<p>导入坐标</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-cache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>配置 application.yml</p>\n</blockquote>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 101.XXX.XXX.160 <span class=\"token comment\"># 本地 localhost 或者 开启了 redis 的服务器的 ip  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># redis 服务设置的密码，不是服务器密码噢 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">time-to-live</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3600000</span> <span class=\"token comment\">#设置存活时间为一小时，如果不设置，则一直存活</span></pre></td></tr></table></figure><blockquote>\n<p>application 添加 <code>@EnableCaching</code>  注解</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ServletComponentScan</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@EnableTransactionManagement</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@EnableCaching</span>  <span class=\"token comment\">// 开启缓存注解功能  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReggieApplication</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReggieApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"项目 启动!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>方法处（多为处理查询请求）添加相应的注解</p>\n</blockquote>\n<p><code>@Cacheale</code> ，功能是：</p>\n<ul>\n<li>在方法执行前，Spring 先查看缓存中是否有数据；如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/list\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"setmealCache\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"#setmeal.categoryId + '_' + #setmeal.status\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Setmeal</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Setmeal</span> setmeal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 条件构造器  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Setmeal</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 添加条件  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>setmeal<span class=\"token punctuation\">.</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Setmeal</span><span class=\"token operator\">::</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">,</span> setmeal<span class=\"token punctuation\">.</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>setmeal<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Setmeal</span><span class=\"token operator\">::</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 排序  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Setmeal</span><span class=\"token operator\">::</span><span class=\"token function\">getUpdateTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Setmeal</span><span class=\"token punctuation\">></span></span> setmealList <span class=\"token operator\">=</span> setmealService<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>setmealList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>@CacheEvict</code>  该注解的功能是：</p>\n<ul>\n<li>将一条或者多条数据从缓存中删除</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 设置 allEntries 为 true，清空缓存名称为 setmealCache 的所有缓存  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@CacheEvict</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"setmealCache\"</span><span class=\"token punctuation\">,</span> allEntries <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">SetmealDto</span> setmealDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套餐信息：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> setmealDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    setmealService<span class=\"token punctuation\">.</span><span class=\"token function\">saveWithDish</span><span class=\"token punctuation\">(</span>setmealDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套餐添加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note warning no-icon\">\n<ul>\n<li>要缓存的 JAVA 对象必须实现 <code>Serializable</code>  接口，因为 Spring 会先将对象序列化再存入 Redis，将缓存实体类继承 <code>Serializable</code></li>\n<li>所以对于请求方法中返回的数据其封装类要添加 <code>implements Serializable</code></li>\n<li>一般数据类都要这么写：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<h2 id=\"redis原理\"><a class=\"anchor\" href=\"#redis原理\">#</a> redis 原理</h2>\n<p>Redis 的 Java 客户端很多，官方推荐的有三种：Jedis、Lettuce、Redisson。Spring 对 Redis 客户端进行了整合，提供了 Spring Data Redis，在 Spring Boot 项目中还提供了对应的 Starter，即<strong> spring-boot-starter-data-redis</strong></p>\n<p><strong>响应快速</strong>、 操作都是<strong>原子</strong>的，满足需要<strong>高并发、锁</strong>等业务。key 就是 string，value 支持 6 种数据类型：字符串 string、哈希 hash、列表 list（任务队列）、集合 set、可排序集合和基数</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看所有键值命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>keys * </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># vim 里面查找，i 插入，n 跳转到下一个，：wq 保存并退出，u 撤销一次修改，ps -ef 打印进程 | grep 查找 redis</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/内容</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-----------------------------------------------------------------linux</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 开启</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>./redis-service</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>./redis-cli</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 退出</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>redis-cli <span class=\"token parameter variable\">-h</span> 你的IP地址 <span class=\"token parameter variable\">-p</span> 你的redis端口号 <span class=\"token parameter variable\">-a</span> 密码 shutdown，就可以退出了</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>----------------------------------------------------------------windows</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 直接双击对应的服务 / 客户端就行</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 默认没有密码校验、配置里可以选择 requispass</span></pre></td></tr></table></figure><h3 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> 操作</h3>\n<p>nil 相当于 null<br />\n<img data-src=\"image-20240412200951427.png\" alt=\"\" /></p>\n<p>hash<br />\n<img data-src=\"image-20240412201018703.png\" alt=\"\" /></p>\n<p><img data-src=\"image-20240412201105162.png\" alt=\"\" /></p>\n<p>spring Data Redis 中提供了一个高度封装的类：RedisTemplate，针对 iedis 客户端中大量 api 进行了归类封装，将同一类型操作封装为 operation 接口，具体分类如下:</p>\n<ul>\n<li>ValueOperations: 简单 K-V 操作</li>\n<li>SetOperations: set 类型数据操作</li>\n<li>ZSetOperations: zset 类型数据操作</li>\n<li>HashOperations: 针对 map 类型的数据操作</li>\n<li>ListOperations: 针对 list 类型的数据操作</li>\n</ul>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>缓存管理、持久化、哨兵和高可用、集群工作<br />\n<strong>持久化方案</strong></p>\n<blockquote>\n<p>主节点不但负责数据读写，还负责把写命令同步给从节点。写命令发送过程是<em>异步完成</em>，主节点自身处理完写命令后直接返回给客户端，并不等待从节点复制完成</p>\n</blockquote>\n<p>RDB 模式：redis 中的 set 操作，在规定的周期内执行了指定的次数时，redis 会自动的将内存中的数据持久化到硬盘中。并且后缀名为.rdb。</p>\n<ul>\n<li>优点：使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能</li>\n<li>缺点: RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候</li>\n</ul>\n<p>AOF 模式：Append-only file，将 “操作 + 数据” 以格式化指令的方式追加到操作日志文件的尾部，在 append 操作返回后 (已经写入到文件或者即将写入)，才进行实际的数据变更，“日志文件” 保存了历史所有的操作过程</p>\n<p><img data-src=\"image-20240412201254575.png\" alt=\"\" /></p>\n<p><img data-src=\"image-20240412201310334.png\" alt=\"\" /></p>\n<p>集群分配，hash 映射，按性能分配映射多少，然后由主从保障不会掉线<br />\n<img data-src=\"image-20240412201321516.png\" alt=\"\" /></p>\n<p><img data-src=\"image-20240412201351451.png\" alt=\"\" /></p>\n<h3 id=\"更新策略\"><a class=\"anchor\" href=\"#更新策略\">#</a> 更新策略</h3>\n<ol>\n<li>\n<p>内存淘汰策略<br />\n Redis 是一个基于内存的缓存系统，当内存空间不足时，就需要对一部分缓存数据进行淘汰，以释放内存空间给新的数据使用。Redis 提供了多种内存淘汰策略，如 LRU（最近最少使用）、LFU（最不常用）等。这些策略根据数据的访问频率或最近的使用时间决定哪些数据会被优先淘汰。例如，LRU 策略会优先淘汰最近很少使用的数据，以保留最常用的数据。</p>\n</li>\n<li>\n<p>超时剔除策略<br />\n Redis 提供了设置缓存数据的过期时间，当缓存数据过期时，Redis 会自动将其删除。这种策略可以根据数据的有效期来进行缓存更新，当数据过期后，下一次访问时会触发缓存更新的逻辑，并从数据源中重新获取最新的数据。通过设置合适的过期时间，可以兼顾缓存的实时性和数据源的压力，但一旦数据过期，客户端可能会面临较长的等待时间。</p>\n</li>\n<li>\n<p>主动更新策略<br />\n主动更新策略通过应用程序主动触发更新缓存的操作。这种策略通常在数据源发生变化时进行，如数据库更新、消息队列的消息到达等。应用程序接收到数据变更的事件后，可以先更新数据源，然后再强制更新缓存，以使得缓存和数据源保持一致。这种策略可以实现缓存的即时性，但需要合理地触发更新操作，以免频繁地更新缓存导致系统性能下降。</p>\n</li>\n</ol>\n<p>总的来说：在实际应用场景中，可以根据业务需求和性能要求选择合适的缓存更新策略。内存淘汰策略适用于内存紧张的情况，超时剔除策略适用于对实时性要求较低的场景，主动更新策略适用于需要保持缓存数据和数据源一致性的场景。根据具体情况综合使用这些策略，可以优化系统性能、提高数据的访问效率。</p>\n<ol start=\"4\">\n<li><strong>删除缓存还是更新缓存？</strong></li>\n</ol>\n<ul>\n<li>更新缓存：每次更新数据库都更新缓存，无效写操作较多</li>\n<li>删除缓存：更新数据库时让缓存失效，查询时再更新缓存<br />\n假设我们每次操作数据库后，都操作缓存，但是中间如果没有人查询，那么这个更新动作实际上只有最后一次生效，中间的更新动作意义并不大，我们可以把缓存删除，等待再次查询时，将缓存中的数据加载出来</li>\n</ul>\n<ol start=\"5\">\n<li><strong>如何保证缓存与数据库的操作的同时成功或失败？</strong></li>\n</ol>\n<ul>\n<li>单体系统，将缓存与数据库操作放在一个事务</li>\n<li>分布式系统，利用 TCC 等分布式事务方案</li>\n</ul>\n<ol start=\"6\">\n<li><strong>先操作缓存还是先操作数据库？</strong><br />\n我们应当是先操作数据库，再删除缓存，原因在于，如果你选择先删除缓存，再操作数据库，在两个线程并发来访问时，假设线程 1 先来，他先把缓存删了，此时线程 2 过来，他查询缓存数据并不存在，此时他写入缓存，当他写入缓存后，线程 1 再执行更新动作时，实际上写入的就是旧的数据，新的数据被旧数据覆盖了。</li>\n</ol>\n<h3 id=\"淘汰\"><a class=\"anchor\" href=\"#淘汰\">#</a> 淘汰</h3>\n<p><strong>如果我们设置一批 key 只能存活 1 小时，那么 1 小时之后，redis 是怎么对这批数据进行删除的？</strong><br />\n答案：定期删数 + 惰性删除</p>\n<ol>\n<li>\n<p>定期删除<br />\n指的是 redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 key，检查其是否过期，如果过期就删除。注意，这里可不是每隔 100ms 就遍历所有的设置过期时间的 key，那样就是一场性能上的灾难。实际上 redis 是每隔 100ms 随机抽取一些 key 来检查和删除的。</p>\n</li>\n<li>\n<p>惰性删除<br />\n定期删除的问题是可能会导致很多过期 key 到了时间并没有被删除掉，那怎么办？所以还有惰性删除，也就是在查询某个 key 的时候，redis 会检查一下这个 key 如果设置了过期时间并且是否过期了，如果过期了就会在此时删除。<br />\n通过定期删除和惰性删除两种方式结合，保证过期的 key 一定会被删除</p>\n</li>\n</ol>\n<ul>\n<li>定期删除是为了节省内存</li>\n<li>惰性删除是为了保证过期性</li>\n</ul>\n<p><strong>如果定期没删除，也没有查询，这样会导致大量过期的 key 堆积在内存里怎么办？</strong><br />\n答案：内存淘汰机制</p>\n<ul>\n<li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key。</li>\n<li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 key。<br />\n上面都是基于<strong> LRU</strong> 算法：Least Recently Used，即<strong>最近最少使用</strong>，是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰。该算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 t，当须淘汰一个页面时，选择现有页面中其 t 值最大的，即最近最少使用的页面予以淘汰。</li>\n</ul>\n<p>还有<strong>随机</strong>和<strong> LFU</strong>（least frequently used (LFU) page-replacement algorithm）。即最<strong>不经常使用页置换算法</strong>，要求在页置换时置换引用计数最小的页，因为经常使用的页应该有一个较大的引用次数。但是有些页在开始时使用次数很多，但以后就不再使用，这类页将会长时间留在内存中，因此可以将引用计数寄存器定时右移一位，形成指数衰减的平均使用次数。</p>\n<h3 id=\"qa\"><a class=\"anchor\" href=\"#qa\">#</a> QA</h3>\n<p><strong>为什么 redis cluster 至少需要 3 个主节点？</strong><br />\n因为故障检测时没有哨兵，需要超过半数的主节点都主观下线，该故障节点才会被视为客观下线。两个主节点，如果挂了一个，那么只剩一个无法达到超过半数的条件。这与哨兵模式不同，因为两个哨兵不一定会挂。</p>\n<p><strong>复制数据延迟</strong><br />\n会有个延迟监听的外部监控程序</p>\n<ol>\n<li>监控程序会定期检查主从结点的复制偏移量 (6.3.6 的 info replication 那个图的两个值), 差值就是主从结点延迟的字节量</li>\n<li>当延迟字节量过高的时候，比如说超过 10MB, 监控程序就会出发报警通知客户端从节点延迟过高。可以采用 Zookeeper 的监听机制实现客户端通知</li>\n<li>客户端收到从节点延迟过高的通知之后，修改读命令路径到主节点或者其他从节点身上，当延迟恢复之后，再次通知客户端恢复从节点的读命令</li>\n</ol>\n<h1 id=\"mysql主从复制\"><a class=\"anchor\" href=\"#mysql主从复制\">#</a> MySQL 主从复制</h1>\n<ul>\n<li>\n<p>MySQL 主从复制是一个异步的复制过程，底层是基于 Mysql 数据库自带的二进制日志功能。就是一台或多台 NysQL 数据库（slave，即从库）从另一台 MySQL 数据库 (master，即主库）进行日志的复制然后再解析日志并应用到自身，最终实现从库的数据和主库的数据保持一致。MySQL 主从复制是 MySQL 数据库自带功能，无需借助第三方工具。</p>\n</li>\n<li>\n<p>MySQL 复制过程分成三步:</p>\n<ol>\n<li><code>master</code>  将改变记录到二进制日志 ( <code>binary log</code> )</li>\n<li><code>slave</code>  将 <code>master</code>  的 <code>binary log</code>  拷贝到它的中继日志 ( <code>relay log</code> )</li>\n<li><code>slave</code>  重做中继日志中的事件，将改变应用到自己的数据库中</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"image-20240326180113088.png\" alt=\"\" /><br />\n更细的说应该是三个线程： <code>master（binlog dump thread）、slave（I/O thread 、SQL thread）</code> ，Master 一条线程和 Slave 中的两条线程。</p>\n<ol>\n<li><code>master（binlog dump thread）</code> 主要负责 Master 库中有数据更新的时候，会按照 <code>binlog</code>  格式，将更新的事件类型写入到主库的 <code>binlog</code>  文件中。</li>\n<li>并且，Master 会创建 <code>log dump</code>  线程通知 Slave 主库中存在数据更新，这就是为什么主库的 binlog 日志一定要开启的原因。</li>\n<li><code>I/O thread</code>  线程在 Slave 中创建，该线程用于请求 Master，Master 会返回 binlog 的名称以及当前数据更新的位置、binlog 文件位置的副本。</li>\n<li>然后，将 <code>binlog</code>  保存在 <strong>「relay log（中继日志）」</strong> 中，中继日志也是记录数据更新的信息。</li>\n<li>SQL 线程也是在 Slave 中创建的，当 Slave 检测到中继日志有更新，就会将更新的内容同步到 Slave 数据库中，这样就保证了主从的数据的同步。</li>\n</ol>\n<h2 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h2>\n<h3 id=\"主库\"><a class=\"anchor\" href=\"#主库\">#</a> 主库</h3>\n<p>在配置文件 <code>/etc/my.cnf</code>  中</p>\n<ul>\n<li>找到 <code>[mysqld]</code> ，在下面插入两行</li>\n</ul>\n<blockquote>\n<p>log_bin=mysql-bin #[必须] 启用二进制日志<br />\n server-id=1 #[必须] 服务器唯一 ID, 只需要确保其 id 是唯一的就好<br />\n binlog-do-db=sjk1_sjk2_sjk3  # 设置要复制的库，多个库用_连接</p>\n</blockquote>\n<ul>\n<li>重启服务 <code>systemctl restart mysqld</code></li>\n<li>连接数据库，执行 <code>grant replication slave on *.* to 'zy'@'%' identified by '123456';</code>\n<ul>\n<li>上面的 SQL 的作用是创建一个用户 <code>zy</code> , 密码为 <code>123456</code> ，并且给 <code>zy</code>  用户授予 <code>replication slave</code>  权限，用于建立复制时所需要用到的用户权限，也就是 <code>slave</code>  必须被 <code>master</code>  授权具有该权限的用户，才能通过该用户复制，这是因为主库和从库之间需要互相通信，处于安全考虑，只有通过验证的从库才能从主库中读取二进制数据</li>\n</ul>\n</li>\n<li><code>show master status;</code>  打印状态，主要是 File 和 Position 的值</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+------------------+----------+--------------+------------------+-------------------+  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">|</span> File             <span class=\"token operator\">|</span> Position <span class=\"token operator\">|</span> Binlog_Do_DB <span class=\"token operator\">|</span> Binlog_Ignore_DB <span class=\"token operator\">|</span> Executed_Gtid_Set <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+------------------+----------+--------------+------------------+-------------------+  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">|</span> mysql-bin.000005 <span class=\"token operator\">|</span>      <span class=\"token number\">154</span> <span class=\"token operator\">|</span>              <span class=\"token operator\">|</span>                  <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+------------------+----------+--------------+------------------+-------------------+</pre></td></tr></table></figure><h3 id=\"从库\"><a class=\"anchor\" href=\"#从库\">#</a> 从库</h3>\n<ul>\n<li>同样的在配置文件插入 id， <code>server-id=2</code> ，与主库不同</li>\n<li>重启后连接 MySQL 控制台<pre><code class=\"language-SQL\">change master to master_host='ip',master_user='zy',master_password='123456',master_log_file='mysql-bin.000005',master_log_pos=154;  # 配置\n</code></pre>\n</li>\n</ul>\n<p>sstart slave; # 开启<br />\n ```</p>\n<ul>\n<li>查询从库状态 <code>show slave status;</code> ，这 2 个选项对应则成功</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Slave_IO_Running: Yes  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Slave_SQL_Running: Yes</pre></td></tr></table></figure><h2 id=\"结合sharding-jdbc\"><a class=\"anchor\" href=\"#结合sharding-jdbc\">#</a> 结合 Sharding-JDBC</h2>\n<ul>\n<li>Sharding-JDBC 定位为轻量级的 JAVA 框架，在 JAVA 的 JDBC 层提供额外的服务，它使得客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架</li>\n<li>使用 Sharding-JDBC 可以在程序中轻松的实现数据库读写分离\n<ul>\n<li>适用于任何基于 JDBC 的 ORM 框架</li>\n<li>支持任何第三方的数据库连接池</li>\n<li>支持任意实现 JDBC 规范的数据库</li>\n</ul>\n</li>\n<li>使用 Sharding-JDBC 框架的步骤\n<ol>\n<li>导入对应的 maven 坐标</li>\n<li>在配置文件中配置读写分离规则</li>\n<li>在配置文件中配置允许 bean 定义覆盖配置项</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.shardingsphere<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>sharding-jdbc-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.0.0-RC1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>title:application.yml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">shardingsphere</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">names</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        master<span class=\"token punctuation\">,</span>slave  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/springboot_work</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">slave</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//47.115.211.251<span class=\"token punctuation\">:</span>3306/test</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">masterslave</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">## 读写分离配置 </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token key atrule\">load-balance-algorithm-type</span><span class=\"token punctuation\">:</span> round_robin  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">## 最终的数据源名称  </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dataSource</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">## 主库数据源名称  </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token key atrule\">master-data-source-name</span><span class=\"token punctuation\">:</span> master  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token comment\">## 从库数据源名称列表，多个逗号分隔  </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token key atrule\">slave-data-source-names</span><span class=\"token punctuation\">:</span> slave</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">props</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token key atrule\">sql</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token key atrule\">show</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\">#开启 SQL 显示，默认 false  </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token key atrule\">main</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token key atrule\">allow-bean-definition-overriding</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><h1 id=\"njinx\"><a class=\"anchor\" href=\"#njinx\">#</a> Njinx</h1>\n<p>Nginx 是一款轻量级的<em> web 服务器 / 反向代理服务器</em>及电子邮件 (IMAP/POP3) 代理服务器。其特点是占有<strong>内存少，并发能力强</strong>，事实上 nginx 的并发能力在同类型的网页服务器中表现较好，中国大陆使用 nginx 的网站有：百度、京东、新浪、网易、腾讯、淘宝等。</p>\n<p>下载安装类似 redis，下载、解压，然后 make</p>\n<h2 id=\"目录结构\"><a class=\"anchor\" href=\"#目录结构\">#</a> 目录结构</h2>\n<ul>\n<li>重点目录 / 文件:\n<ul>\n<li>conf/nginx.conf\n<ul>\n<li>nginx 配置文件</li>\n</ul>\n</li>\n<li>html\n<ul>\n<li>存放静态文件 (html、css、Js 等)</li>\n</ul>\n</li>\n<li>logs\n<ul>\n<li>日志目录，存放日志文件</li>\n</ul>\n</li>\n<li>sbin/nginx\n<ul>\n<li>二进制文件，用于启动、停止 Nginx 服务</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>文件目录树状图如下</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">.</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── conf                        <span class=\"token operator\">&lt;</span>-- Nginx配置  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│   ├── fastcgi.conf  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│   ├── fastcgi.conf.default  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│   ├── fastcgi_params  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│   ├── fastcgi_params.default  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│   ├── koi-utf  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│   ├── koi-win  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│   ├── mime.types  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>│   ├── mime.types.default  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>│   ├── nginx.conf              <span class=\"token operator\">&lt;</span>-- 主要的配置文件 </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>│   ├── nginx.conf.default  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>│   ├── scgi_params  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>│   ├── scgi_params.default  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>│   ├── uwsgi_params  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>│   ├── uwsgi_params.default  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>│   └── win-utf  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>├── html                        <span class=\"token operator\">&lt;</span>-- 存放静态文件，部署项目就要将静态文件放在这</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>│   ├── 50x.html          </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>│   └── index.html              <span class=\"token operator\">&lt;</span>-- 提供的默认的页面  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>├── logs                        <span class=\"token operator\">&lt;</span>-- 日志目录，新装的Nginx，所以还没有日志文件  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>└── sbin                          </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>└── nginx                       <span class=\"token operator\">&lt;</span>-- 这个文件也经常操作</pre></td></tr></table></figure><h2 id=\"nginxconf\"><a class=\"anchor\" href=\"#nginxconf\">#</a> nginx.conf</h2>\n<ul>\n<li>Nginx 配置文件 (conf/nginx.conf) 整体分为三部分\n<ul>\n<li>全局块 和 Nginx 运行相关的全局配置</li>\n<li>events 块 和网络连接相关的配置</li>\n<li>http 块 代理、缓存、日志记录、虚拟主机配置\n<ul>\n<li>http 全局块</li>\n<li>Server 块\n<ul>\n<li>Server 全局块</li>\n<li>location 块</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 工作进程的数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>worker_processes  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 每个工作进程连接数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>http <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    include       mime.types<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    default_type  application/octet-stream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 日志格式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    log_format  access  <span class=\"token string\">'$remote_addr - $remote_user [$time_local] $host \"$request\" '</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                  <span class=\"token string\">'$status $body_bytes_sent \"$http_referer\" '</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                  <span class=\"token string\">'\"$http_user_agent\" \"$http_x_forwarded_for\" \"$clientip\"'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    access_log  /srv/log/nginx/access.log  access<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 日志输出目录</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">gzip</span>  on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    sendfile  on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># 链接超时时间，自动断开</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    keepalive_timeout  <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\"># 虚拟主机</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        listen       <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        server_name  localhost<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 浏览器访问域名</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        charset utf-8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        access_log  logs/localhost.access.log  access<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\"># 路由</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            root   www<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 访问根目录</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            index  index.html index.htm<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 入口文件</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\"># 引入其他的配置文件</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    include servers/*<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>复制代码</pre></td></tr></table></figure><h2 id=\"nginx命令\"><a class=\"anchor\" href=\"#nginx命令\">#</a> Nginx 命令</h2>\n<ul>\n<li>\n<p>查看版本</p>\n<ul>\n<li>进入 sbin 目录，输入 <code>./nginx -v</code></li>\n</ul>\n</li>\n<li>\n<p>检查配置文件正确性</p>\n<ul>\n<li>进入 sbin 目录，输入 <code>./nginx -t</code> ，如果有错误会报错，而且也会记日志</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nginx: the configuration <span class=\"token function\">file</span> /usr/local/nginx/conf/nginx.conf syntax is ok  <span class=\"token operator\">&lt;</span>brnginx: configuration <span class=\"token function\">file</span> /usr/local/nginx/conf/nginx.conf <span class=\"token builtin class-name\">test</span> is successful</pre></td></tr></table></figure><ul>\n<li>\n<p>启动和停止</p>\n<ul>\n<li>进入 sbin 目录，输入 <code>./nginx</code> ，启动完成后查看进程</li>\n<li>如果想停止 Nginx 服务，输入 <code>./nginx -s stop</code> ，停止服务后再次</li>\n<li><code>ps aux | grep nginx</code>  查看进程</li>\n</ul>\n</li>\n<li>\n<p>重新加载配置文件</p>\n<ul>\n<li>当修改 Nginx 配置文件后，需要重新加载才能生效，可以使用下面命令重新加载配置文件： <code>./nginx -s reload</code> 。</li>\n</ul>\n</li>\n<li>\n<p>上面的所有命令，都需要我们在 sbin 目录下才能运行，比较麻烦，所以我们可以将 Nginx 的二进制文件配置到环境变量中，这样无论我们在哪个目录下，都能使用上面的命令</p>\n<ul>\n<li>使用 <code>vim /etc/profile</code>  命令打开配置文件，添加后保存并退出</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># PATH=$JAVA_HOME/bin:$PATH  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/nginx/sbin:<span class=\"token variable\">$JAVA_HOME</span>/bin:<span class=\"token environment constant\">$PATH</span></pre></td></tr></table></figure><ul>\n<li>之后重新加载系统配置文件，使用 <code>source /etc/profile</code>  命令，然后我们在任意位置输入 <code>nginx</code>  即可启动服务， <code>nginx -s stop</code>  即可停止服务</li>\n</ul>\n</li>\n<li>\n<p>查看自己 IP，启动服务后，浏览器输入 ip 地址就可以访问 Nginx 的默认页面</p>\n<ul>\n<li><code>ip addr</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"资源代理\"><a class=\"anchor\" href=\"#资源代理\">#</a> 资源代理</h2>\n<p>静态资源复制到 njinx/html/ 下，在 nginx.conf 的 http {...}/https 中</p>\n<pre><code class=\"language-conf\">server &#123;  \n    listen 82;  # 监听端口\n    server_name ip1;   # 服务器名称\n\n\n\t# 路由 \n\tlocation / &#123; \n\t\troot www; # 访问根目录 \n\t\tindex index.html index.htm; # 入口文件 \n\t\tproxy_pass http://ip2  # 要代理的\n\t&#125;\n&#125;\n</code></pre>\n<p>也就是访问 ip1 的 82，实际访问到了 ip2<br />\n 也可以针对不同的资源 <code>192.168.17.129:9001/edu/</code>  和 <code>192.168.17.129:9001/vod/</code>  下的资源被分别代理到了 <code>http://127.0.0.1:8080</code>  和 <code>http://127.0.0.1:8081</code></p>\n<pre><code class=\"language-conf\">server &#123;\n\t listen       9001;\n\t server_name  192.168.17.129;\n\t\n\t location ~ /edu/ &#123;\n\t  proxy_pass  http://127.0.0.1:8080\n\t &#125;\n\t\n\t location ~ /vod/ &#123;\n\t  proxy_pass  http://127.0.0.1:8081\n\t &#125;\n&#125;\n</code></pre>\n<h2 id=\"负载均衡\"><a class=\"anchor\" href=\"#负载均衡\">#</a> 负载均衡</h2>\n<p>即是多个被代理的放在 <code>upstream name &#123;&#125;</code>  中。 <code>sever</code>  的 <code>proxy_pass</code>  是前面的 name</p>\n<pre><code class=\"language-conf\">upstream targetServer&#123;  \n    server 192.168.238.132;  \n    server 101.XXX.XXX.160;  \n&#125;  \nserver &#123;  \n    listen       82;  \n    server_name  localhost;  \n  \n    location / &#123;  \n        proxy_pass http://targetServer;  \n    &#125;  \n&#125;\n</code></pre>\n<p>此时默认轮询。加权，ip 哈希，热备份示意：</p>\n<pre><code class=\"language-conf\">upstream mysvr &#123; \n    server 127.0.0.1:7878 weight=1;\n    server 192.168.10.121:3333 weight=2;\n&#125;\n\nupstream mysvr &#123; \n    server 127.0.0.1:7878; \n    server 192.168.10.121:3333;\n    ip_hash;\n&#125;\n\nupstream mysvr &#123; \n    server 127.0.0.1:7878; \n    server 192.168.10.121:3333 backup;  #热备     \n&#125;\n</code></pre>\n<p>还有其他策略和配置，见官方文档</p>\n<h1 id=\"秒杀问题redis缓存-锁-mq\"><a class=\"anchor\" href=\"#秒杀问题redis缓存-锁-mq\">#</a> 秒杀问题（redis 缓存、锁、mq）</h1>\n<p>可以涉及到这些<img data-src=\"https://picx.zhimg.com/80/v2-21812d2c30bafd44844c02903d823c35_720w.webp?source=1def8aca\" alt=\"\" /></p>\n<h2 id=\"后端设计\"><a class=\"anchor\" href=\"#后端设计\">#</a> 后端设计</h2>\n<p>对于使用优惠劵秒杀下单，或者说下单逻辑本应如此，那就是先修改数据库，再生成订单，并且绑定成事务执行。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/56311f396cdc472e1a012638b23ba1a2.png\" alt=\"\" /><br />\n也就是这套逻辑需要写在一起</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">seckillVoucher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> voucherId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 秒杀基本实现一：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *  1.查询优惠卷</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *  2.判断秒杀是否开始</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     *  3.判断是否结束</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     *  4.判断库存是否充足</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     *  5.扣减库存</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     *  6.创建订单</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">SeckillVoucher</span> voucher <span class=\"token operator\">=</span> seckillVoucherService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>voucherId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getBeginTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 尚未开始</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀尚未开始!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀已经结束!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"库存不足！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">boolean</span> success <span class=\"token operator\">=</span> seckillVoucherService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">setSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stock = stock - 1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"voucher_id\"</span><span class=\"token punctuation\">,</span> voucherId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"库存不足！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">VoucherOrder</span> voucherOrder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VoucherOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">long</span> orderId <span class=\"token operator\">=</span> redisIdWorker<span class=\"token punctuation\">.</span><span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">setUserId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">setVoucherId</span><span class=\"token punctuation\">(</span>voucherId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>voucherOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"超卖问题\"><a class=\"anchor\" href=\"#超卖问题\">#</a> 超卖问题</h2>\n<p>当多线程没实现数据安全的时候就会<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/ddbf205ace647e4424aeab0dd012bcb1.png\" alt=\"\" /></p>\n<h3 id=\"redis-缓存\"><a class=\"anchor\" href=\"#redis-缓存\">#</a> redis 缓存</h3>\n<p>redisson?<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTU5NjY5Ny9hcnRpY2xlL2RldGFpbHMvMTIzNTUwNzQ4\">https://blog.csdn.net/weixin_51596697/article/details/123550748</span></p>\n<ul>\n<li>\n<p>在系统初始化时，将商品的库存数量加载到 Redis 缓存中；</p>\n</li>\n<li>\n<p>接收到秒杀请求时，在 Redis 中进行预减库存，当 Redis 中的库存不足时，直接返回秒杀失败，否则继续进行第 3 步</p>\n<ul>\n<li><code>if(redisClient.incrby(productId, -1)&lt;0) &#123;return 0;&#125;</code>  redis 的 incrby 是原子操作</li>\n<li>但高并发场景中，有多个请求同时扣减库存，大多数请求的 incrby 操作之后，结果都会小于 0。出现负数，不会超卖，但负值太大的话，万一要回退库存时，就会导致库存不准。</li>\n</ul>\n</li>\n<li>\n<p>将请求放入异步队列中，返回正在排队中；</p>\n</li>\n<li>\n<p>服务端异步队列将请求出队，出队成功的请求可以生成秒杀订单，减少数据库库存，返回秒杀订单详情。</p>\n</li>\n<li>\n<p>当后台订单创建成功之后可以通过 websocket 向用户发送一个秒杀成功通知。前端以此来判断是否秒杀成功，秒杀成功则进入秒杀订单详情，否则秒杀失败。</p>\n</li>\n<li>\n<p>初始缓存包含：商品 id、商品名称、规格属性、库存等信息，同时数据库中也要有相关信息，毕竟缓存并不完全可靠。</p>\n</li>\n</ul>\n<p><img data-src=\"https://picx.zhimg.com/80/v2-289ab91d8390caaf29362452a4c7ceac_720w.webp?source=1def8aca\" alt=\"\" /></p>\n<ul>\n<li>然而可能存在<em><strong>缓存击穿</strong></em>的问题，高并发压力依旧给到了数据库就寄了。这就需要加锁，最好使用分布式锁。<br />\n<img data-src=\"https://pic1.zhimg.com/80/v2-5a3e62d649dd8ccc5f33585c8e225824_720w.webp?source=1def8aca\" alt=\"\" /><br />\n当然，针对这种情况，最好在项目启动之前，先把缓存进行预热。即事先把所有的商品，同步到缓存中，这样商品基本都能直接从缓存中获取到，就不会出现缓存击穿的问题了。</li>\n</ul>\n<p>是不是上面加锁这一步可以不需要了？</p>\n<p>表面上看起来，确实可以不需要。但如果缓存中设置的过期时间不对，缓存提前过期了，或者缓存被不小心删除了，如果不加速同样可能出现缓存击穿。<br />\n其实这里加锁，相当于买了一份保险。</p>\n<ul>\n<li>如果有大量的请求传入的商品 id，在缓存中和数据库中都不存在，这些请求不就每次都会穿透过缓存，而直接访问数据库了，也就是<em><strong>缓存穿透</strong></em><br />\n可以选择过滤器（id 是否在数据库而 放行），但又会有过滤器同步问题。另一个取巧就是不存在的商品 id 访问时也缓存一个不存在缓存，下次在遇到就直接拒绝</li>\n</ul>\n<p>上面回退问题可以用 lua 脚本，是能够保证原子性的，它跟 redis 一起配合使用，能够完美解决上面的问题。有段非常经典的代码：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>StringBuilder lua <span class=\"token operator\">=</span> new <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"if (redis.call('exists', KEYS[1]) == 1) then\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" local stock = tonumber(redis.call('get', KEYS[1]));\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" if (stock == -1) then\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" return 1;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" end;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" if (stock > 0) then\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" redis.call('incrby', KEYS[1], -1);\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" return stock;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" end;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" return 0;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>lua<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return -1;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>先判断商品 id 是否存在，如果不存在则直接返回。</li>\n<li>获取该商品 id 的库存，判断库存如果是 - 1，则直接返回，表示不限制库存。</li>\n<li>如果库存大于 0，则扣减库存。</li>\n<li>如果库存等于 0，是直接返回，表示库存不足。</li>\n</ol>\n<h3 id=\"乐观锁\"><a class=\"anchor\" href=\"#乐观锁\">#</a> （乐观）锁</h3>\n<p>为了效率，优先选乐观锁<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/4ca790f297672c18649f97f24d93f4e5.png\" alt=\"\" /><br />\n基于数据库本身，要做的是调整 SQL 语句，比如原本的查询操作和更新操作不是原子性的两个操作，逻辑先后来说是：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> stock <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">getStockById</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stock <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateStock</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">addOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调整为条件更新：</p>\n<pre><code class=\"language-SQL\">update product set stock=stock-1 where id=product and stock &gt; 0;\n</code></pre>\n<h4 id=\"版本号实现\"><a class=\"anchor\" href=\"#版本号实现\">#</a> 版本号实现</h4>\n<p>每当数据做一次修改，版本号加 1, 所以判断一个数据有没有被修改过就看它的版本有没有变化过<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/bce6265bfd80eed0d0dadca7930856ee.png\" alt=\"\" /></p>\n<h4 id=\"cas实现\"><a class=\"anchor\" href=\"#cas实现\">#</a> CAS 实现</h4>\n<p>Compare and Swap，即比较再交换。</p>\n<p>也就是不再判断库存有没有被修改过了，每次都去比较看库存是否大于 0<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/f2aec4af75f0aacfbf3a9afa08964d72.png\" alt=\"\" /></p>\n<p>乐观锁参考代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:look</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">seckillVoucher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> voucherId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 秒杀基本实现二：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *  1.查询优惠卷</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *  2.判断秒杀是否开始</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     *  3.判断是否结束</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     *  4.判断库存是否充足</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     *  5.扣减库存（乐观锁解决超卖问题）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     *  6.创建订单</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">SeckillVoucher</span> voucher <span class=\"token operator\">=</span> seckillVoucherService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>voucherId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getBeginTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 尚未开始</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀尚未开始!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀已经结束!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"库存不足！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">boolean</span> success <span class=\"token operator\">=</span> seckillVoucherService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">setSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stock = stock - 1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"voucher_id\"</span><span class=\"token punctuation\">,</span> voucherId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stock\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"库存不足！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">VoucherOrder</span> voucherOrder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VoucherOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">long</span> orderId <span class=\"token operator\">=</span> redisIdWorker<span class=\"token punctuation\">.</span><span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">setUserId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">setVoucherId</span><span class=\"token punctuation\">(</span>voucherId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>voucherOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"分布式锁\"><a class=\"anchor\" href=\"#分布式锁\">#</a> 分布式锁</h4>\n<p>集群下的线程并发安全问题：加锁的原理就是在 <code>JVM内部维护了一个锁监视器</code> ，如果是集群模式下的话那就是多个 JVM，悲观锁就失效了</p>\n<ul>\n<li>利用分布式锁，保证同一时刻只有一个线程进行读库存 --- 修改库存操作。</li>\n</ul>\n<p>缺点：同一个商品多用户同时下单的时候，会基于分布式锁串行化处理，导致没法同时处理同一个商品的大量下单的请求，并发处理能力较弱。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/9c77127f28cf3db4c4fc9ab34855ccee.png\" alt=\"\" /></p>\n<h3 id=\"mq异步处理\"><a class=\"anchor\" href=\"#mq异步处理\">#</a> mq 异步处理</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQwMjI0NjkyNi9hbnN3ZXIvMjQ1MzM1MjA1OQ==\">参考</span><br />\n下单、秒杀、支付中，下单和支付功能实际并发量很小，真正并发量大的是秒杀功能。<br />\n所以，我们在设计秒杀系统时，有必要把下单和支付功能从秒杀的主流程中拆分出来，特别是下单功能要做成 mq) 异步处理的。而支付功能，比如支付宝支付，是业务场景本身保证的异步。</p>\n<p>要注意：</p>\n<h4 id=\"消息丢失问题\"><a class=\"anchor\" href=\"#消息丢失问题\">#</a> 消息丢失问题</h4>\n<p>秒杀成功了，往 mq 发送下单消息的时候，有可能会失败。原因有很多，比如：网络问题、broker 挂了、mq 服务端磁盘问题等。这些情况，都可能会造成消息丢失。</p>\n<p>加 表 + 重试<br />\n<img data-src=\"https://picx.zhimg.com/80/v2-441957d6ee6fb1fe545312c13adeac78_720w.webp?source=1def8aca\" alt=\"\" /><br />\n发送 mq 消息之前，先把该条消息写入消息发送表，初始状态是待处理，然后再发送 mq 消息。消费者消费消息时，处理完业务逻辑之后，再回调生产者的一个接口，修改消息状态为已处理。<br />\n重试可以定时任务，job 每隔一段时间去查询消息发送表中状态为待处理的数据，然后重新发送 mq 消息。</p>\n<p>消息丢失属于比较常见的问题。一般有生产端丢失、MQ 服务丢失、消费端丢失等三种情况。针对各种情况应对方式也不一样。</p>\n<ol>\n<li>\n<p>生产端丢失的解决方案主要有</p>\n<ul>\n<li>开启 confirm 模式，生产者收到 MQ 发回的 confirm 确认之后，再进行消息删除，否则消息重推。</li>\n<li>生产者端消息保存的数据库，由后台定时程序异步推送，收到 confirm 确认则认为成功，否则消息重推，重推多次均未成功，则认为发送失败。</li>\n</ul>\n</li>\n<li>\n<p>MQ 服务丢失则主要是开启消息持久化，让消息及时保存到磁盘。</p>\n</li>\n<li>\n<p>消费端消息丢失则关闭自动 ack 确认，消息消费成功后手动发送 ack 确认。消息消费失败，则重新消费。</p>\n</li>\n</ol>\n<h5 id=\"rocketmq如何保证消息不丢失\"><a class=\"anchor\" href=\"#rocketmq如何保证消息不丢失\">#</a> Rocketmq 如何保证消息不丢失</h5>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21lc2VyODgvYXJ0aWNsZS9kZXRhaWxzLzEwODA2MjU4Mw==\">参考</span><br />\n<img data-src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMjQyMTgyOS01ODhiNjNiYTM5ZTc3YjQ2LnBuZw?x-oss-process=image/format,png\" alt=\"\" /><br />\n我们将消息的整体处理阶段分为 3 个阶段进行分析：</p>\n<ul>\n<li>Producer 发送消息阶段</li>\n<li>Broker 处理消息阶段</li>\n<li>Consumer 消费消息阶段</li>\n</ul>\n<h6 id=\"producer发送消息阶段\"><a class=\"anchor\" href=\"#producer发送消息阶段\">#</a> Producer 发送消息阶段</h6>\n<p>发送消息阶段涉及到 Producer 到 broker 的网络通信，因此丢失消息的几率一定会有，那 RocketMQ 在此阶段用了哪些手段保证消息不丢失了（或者说降低丢失的可能性）。</p>\n<blockquote>\n<p>手段一：提供 SYNC 的发送消息方式，等待 broker 处理结果。</p>\n</blockquote>\n<p>RocketMQ 提供了 3 种发送消息方式，分别是：</p>\n<ul>\n<li>同步发送：Producer 向 broker 发送消息，阻塞当前线程等待 broker 响应 发送结果。</li>\n<li>异步发送：Producer 首先构建一个向 broker 发送消息的任务，把该任务提交给线程池，等执行完该任务时，回调用户自定义的回调函数，执行处理结果。</li>\n<li>Oneway 发送：Oneway 方式只负责发送请求，不等待应答，Producer 只负责把请求发出去，而不处理响应结果。</li>\n</ul>\n<p>我们在调用 producer.send 方法时，不指定回调方法，则默认采用同步发送消息的方式，这也是丢失几率最小的一种发送方式。</p>\n<blockquote>\n<p>手段二：发送消息如果失败或者超时，则重新发送（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYW5kZWxpb25jbG91ZC5jbi9hcnRpY2xlL2RldGFpbHMvMTYxMzM4OTE2NjU5NzYwMzMzMA==\">RocketMQ Producer 重试机制</span>）。</p>\n</blockquote>\n<ul>\n<li>发送重试源码如下，本质其实就是一个 for 循环，当发送消息发生异常的时候重新循环发送。默认重试 2 次，重试次数可以通过 producer 指定。</li>\n</ul>\n<blockquote>\n<p>手段三：broker 提供多 master 模式，即使某台 broker 宕机了，保证消息可以投递到另外一台正常的 broker 上。</p>\n</blockquote>\n<ul>\n<li>如果 broker 只有一个节点，则 broker 宕机了，即使 producer 有重试机制，也没用，因此利用多主模式，当某台 broker 宕机了，换一台 broker 进行投递。</li>\n</ul>\n<p>总结</p>\n<ul>\n<li>producer 消息发送方式虽然有 3 种，但为了减小丢失消息的可能性尽量采用同步的发送方式，同步等待发送结果，利用<strong>同步发送 + 重试机制 + 多个 master 节点</strong>，尽可能减小消息丢失的可能性。</li>\n</ul>\n<h6 id=\"broker处理消息阶段\"><a class=\"anchor\" href=\"#broker处理消息阶段\">#</a> Broker 处理消息阶段</h6>\n<blockquote>\n<p>手段四：提供同步刷盘的策略</p>\n</blockquote>\n<p><code>FlushDiskType (SYNC_FLUSH, //同步刷盘 ASYNC_FLUSH//异步刷盘（默认）)</code> <br />\n 当消息投递到 broker 之后，会先存到 page cache，然后根据 broker 设置的刷盘策略是否立即刷盘，也就是如果刷盘策略为异步，broker 并不会等待消息落盘就会返回 producer 成功，也就是说当 broker 所在的服务器突然宕机，则会丢失部分页的消息。</p>\n<blockquote>\n<p>手段五：提供主从模式，同时主从支持<strong>同步双写</strong></p>\n</blockquote>\n<p>即使 broker 设置了同步刷盘，如果主 broker 磁盘损坏，也是会导致消息丢失。 因此可以给 broker 指定 slave，同时设置 master 为 SYNC_MASTER，然后将 slave 设置为同步刷盘策略。</p>\n<p>此模式下，producer 每发送一条消息，都会等消息投递到 master 和 slave 都落盘成功了，broker 才会当作消息投递成功，保证休息不丢失。</p>\n<p>总结</p>\n<ul>\n<li>在 broker 端，消息丢失的可能性主要在于刷盘策略和同步机制</li>\n<li>RocketMQ 默认 broker 的刷盘策略为异步刷盘，如果有主从，同步策略也默认的是异步同步，这样子可以提高 broker 处理消息的效率，但是会有丢失的可能性。因此可以通过同步刷盘策略 + 同步 slave 策略 + 主从的方式解决丢失消息的可能。</li>\n</ul>\n<h6 id=\"consumer消费消息阶段\"><a class=\"anchor\" href=\"#consumer消费消息阶段\">#</a> Consumer 消费消息阶段</h6>\n<blockquote>\n<p>手段六：consumer 默认提供的是 At least Once 机制</p>\n</blockquote>\n<p>从 producer 投递消息到 broker，即使前面这些过程保证了消息正常持久化，但如果 consumer 消费消息没有消费到也不能理解为消息绝对的可靠。因此 RockerMQ 默认提供了 At least Once 机制保证消息可靠消费。</p>\n<p><strong>何为 At least Once？</strong></p>\n<p>Consumer 先 pull 消息到本地，消费完成后，才向服务器返回 ack。</p>\n<p>通常消费消息的 ack 机制一般分为两种思路：</p>\n<ul>\n<li>先提交后消费</li>\n<li>先消费，消费成功后再提交</li>\n</ul>\n<p>思路一可以解决重复消费的问题但是会丢失消息，因此 Rocketmq 默认实现的是思路二，由各自 consumer 业务方保证幂等来解决重复消费问题。</p>\n<blockquote>\n<p>手段七：消费消息重试机制</p>\n</blockquote>\n<p>当消费消息失败了，如果不提供重试消息的能力，则也不能算完全的可靠消费，因此 RocketMQ 本身提供了重新消费消息的能力。</p>\n<p>总结</p>\n<ul>\n<li>consumer 端要保证消费消息的可靠性，主要通过 At least Once + 消费重试机制保证。</li>\n</ul>\n<h4 id=\"重复消费问题\"><a class=\"anchor\" href=\"#重复消费问题\">#</a> 重复消费问题</h4>\n<p>本来消费者消费消息时，在 ack 应答的时候，如果网络超时，本身就可能会消费重复的消息。加上消息发送者增加了重试机制，会导致消费者重复消息的概率增大。</p>\n<p>增加消息处理表<br />\n<img data-src=\"https://picx.zhimg.com/80/v2-14693f27d2ed657bd9c027bd1f79eb44_720w.webp?source=1def8aca\" alt=\"\" /></p>\n<p>消费者读到消息之后，先判断一下消息处理表，是否存在该消息，如果存在，表示是重复消费，则直接返回。如果不存在，则进行下单操作，接着将该消息写入消息处理表中，再返回。</p>\n<p>有个比较关键的点是：下单和写消息处理表，要放在同一个事务中，保证原子操作。</p>\n<h5 id=\"rocketmq如何保证消息不被重复消费\"><a class=\"anchor\" href=\"#rocketmq如何保证消息不被重复消费\">#</a> Rocketmq 如何保证消息不被重复消费</h5>\n<p>首先，比如 RabbitMQ、RocketMQ、Kafka，都有可能会出现消息重复消费的问题，正常。因为这问题通常不是 MQ 自己保证的，是由我们开发来保证的。挑一个 Kafka 来举个例子，说说怎么重复消费吧。</p>\n<p>Kafka 实际上有个 offset 的概念，就是每个消息写进去，都有一个 offset，代表消息的序号，然后 consumer 消费了数据之后，每隔一段时间（定时定期），会把自己消费过的消息的 offset 提交一下，表示 “我已经消费过了，下次我要是重启啥的，你就让我继续从上次消费到的 offset 来继续消费吧”。</p>\n<p>但是凡事总有意外，比如我们之前生产经常遇到的，就是你有时候重启系统，看你怎么重启了，如果碰到点着急的，直接 kill 进程了，再重启。这会导致 consumer 有些消息处理了，但是没来得及提交 offset，尴尬了。重启之后，少数消息会再次消费一次。</p>\n<p>有这么个场景。数据 1/2/3 依次进入 kafka，kafka 会给这三条数据每条分配一个 offset，代表这条数据的序号，我们就假设分配的 offset 依次是 152/153/154。消费者从 kafka 去消费的时候，也是按照这个顺序去消费。假如当消费者消费了 offset=153 的这条数据，刚准备去提交 offset 到 zookeeper，此时消费者进程被重启了。那么此时消费过的数据 1/2 的 offset 并没有提交，kafka 也就不知道你已经消费了 offset=153 这条数据。那么重启之后，消费者会找 kafka 说，嘿，哥儿们，你给我接着把上次我消费到的那个地方后面的数据继续给我传递过来。由于之前的 offset 没有提交成功，那么数据 1/2 会再次传过来，如果此时消费者没有去重的话，那么就会导致重复消费。</p>\n<blockquote>\n<p>关键在于保证<strong>幂等性</strong>。一个执行操作，无论执行多少次，产生的效果和返回的结果都是一样的</p>\n</blockquote>\n<p>其实还是得结合业务来思考，我这里给几个思路：</p>\n<p>比如你拿个数据要写库，你先根据主键查一下，如果这数据都有了，你就别插入了，update 一下好吧。</p>\n<p>比如你是写 Redis，那没问题了，反正每次都是 set，天然幂等性。</p>\n<p>比如你不是上面两个场景，那做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加一个全局唯一的 id，类似订单 id 之类的东西，然后你这里消费到了之后，先根据这个 id 去比如 Redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 Redis（上面的表也是类似的思想）。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</p>\n<p>比如基于数据库的唯一键来保证重复数据不会重复插入多条。因为有唯一键约束了，重复数据插入只会报错，不会导致数据库中出现脏数据。</p>\n<p>大致基于这两个角度出发</p>\n<ul>\n<li>状态判断法：消费者消费数据后把消费数据记录在 redis 中，下次消费时先到 redis 中查看是否存在该消息，存在则表示消息已经消费过，直接丢弃消息。</li>\n<li>业务判断法：通常数据消费后都需要插入到数据库中，使用数据库的唯一性约束防止重复消费。每次消费直接尝试插入数据，如果提示唯一性字段重复，则直接丢失消息。一般都是通过这个业务判断的方法就可以简单高效地避免消息的重复处理了</li>\n</ul>\n<h4 id=\"垃圾消息问题\"><a class=\"anchor\" href=\"#垃圾消息问题\">#</a> 垃圾消息问题</h4>\n<p>如果出现了消息消费失败的情况。比如：由于某些原因，消息消费者下单一直失败，一直不能回调状态变更接口，这样 job 会不停的重试发消息。最后，会产生大量的垃圾消息。<br />\n<img data-src=\"https://picx.zhimg.com/80/v2-a22df75b85cb518ae528d181431825e8_720w.webp?source=1def8aca\" alt=\"\" /><br />\n每次在 job 重试时，需要先判断一下消息发送表中该消息的发送次数是否达到最大限制，如果达到了，则直接返回并清理。如果没有达到，则将次数加 1，然后发送消息。</p>\n<p>这样如果出现异常，只会产生少量的垃圾消息，不会影响到正常的业务</p>\n<h4 id=\"延迟消费问题\"><a class=\"anchor\" href=\"#延迟消费问题\">#</a> 延迟消费问题</h4>\n<p>通常情况下，如果用户秒杀成功了，下单之后，在 15 分钟之内还未完成支付的话，该订单会被自动取消，回退库存。<br />\n那么，在 15 分钟内未完成支付，订单被自动取消的功能，要如何实现呢？<br />\n我们首先想到的可能是 job，因为它比较简单。<br />\n但 job 有个问题，需要每隔一段时间处理一次，实时性不太好。</p>\n<p>还有更好的方案？<br />\n答：使用延迟队列。<br />\n<img data-src=\"https://picx.zhimg.com/80/v2-39934c1b3c74dfdf48a5a1b41c2d511e_720w.webp?source=1def8aca\" alt=\"\" /><br />\n下单时消息生产者会先生成订单，此时状态为待支付，然后会向延迟队列中发一条消息。达到了延迟时间，消息消费者读取消息之后，会查询该订单的状态是否为待支付。如果是待支付状态，则会更新订单状态为取消状态。如果不是待支付状态，说明该订单已经支付过了，则直接返回。</p>\n<p>还有个关键点，用户完成支付之后，会修改订单状态为已支付。<br />\n下单时消息生产者会先生成订单，此时状态为待支付，然后会向延迟队列中发一条消息。达到了延迟时间，消息消费者读取消息之后，会查询该订单的状态是否为待支付。如果是待支付状态，则会更新订单状态为取消状态。如果不是待支付状态，说明该订单已经支付过了，则直接返回。</p>\n<h3 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h3>\n<p>最简单想到和实现，但每次查询都需要竞争同一把锁，接口性能急剧下降，增加服务器压力</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> stock <span class=\"token operator\">=</span> redisClient<span class=\"token punctuation\">.</span><span class=\"token function\">queryStock</span><span class=\"token punctuation\">(</span>productId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stock <span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tredisClient<span class=\"token punctuation\">.</span><span class=\"token function\">incrby</span><span class=\"token punctuation\">(</span>productId<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tredisClient<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>productId<span class=\"token punctuation\">,</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"少卖问题\"><a class=\"anchor\" href=\"#少卖问题\">#</a> 少卖问题</h2>\n<p>少卖可能出现的原因有</p>\n<ol>\n<li>redis 预扣减库存成功，但是执行真正的下单逻辑失败了，且库存没有回滚；</li>\n<li>用户订单提交成功了，但是超时没有支付，且超时后活动已结束或者超时后没有回滚库存；</li>\n<li>用户排队成功了，但是排队下单请求消息发送到 MQ 失败了，或者 MQ 消息丢了，或者消费者弄丢了数据。</li>\n</ol>\n<h3 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h3>\n<ol>\n<li>异步下单失败后，要即时回滚 redis 中的 sku 库存</li>\n<li>缩短支付时间，或者修改秒杀流程：先支付再确认订单；超时未支付后即时回滚 redis 中的 sku 库存</li>\n<li>解决 MQ 消息丢失问题（见 mq 异步处理中的<a href=\"#%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98\">小节</a>）</li>\n</ol>\n<h1 id=\"mq\"><a class=\"anchor\" href=\"#mq\">#</a> MQ</h1>\n<h2 id=\"常见的消息队列\"><a class=\"anchor\" href=\"#常见的消息队列\">#</a> 常见的消息队列</h2>\n<h3 id=\"activemq\"><a class=\"anchor\" href=\"#activemq\">#</a> ActiveMQ</h3>\n<p><strong>优点</strong></p>\n<ul>\n<li>单机吞吐量：万级</li>\n<li>topic 数量都吞吐量的影响：</li>\n<li>时效性：ms 级</li>\n<li>可用性：高，基于主从架构实现高可用性</li>\n<li>消息可靠性：有较低的概率丢失数据</li>\n<li>功能支持：MQ 领域的功能极其完备</li>\n</ul>\n<p><strong>缺点:</strong></p>\n<ul>\n<li>官方社区现在对 ActiveMQ 5.x 维护越来越少，较少在大规模吞吐的场景中使用。</li>\n</ul>\n<h3 id=\"kafka\"><a class=\"anchor\" href=\"#kafka\">#</a> Kafka</h3>\n<p>号称大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开 Kafka，这款为大数据而生的消息中间件，以其百万级 TPS 的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。</p>\n<p>Apache Kafka 它最初由 LinkedIn 公司基于独特的设计实现为一个分布式的提交日志系统 (a distributed commit log)，之后成为 Apache 项目的一部分。</p>\n<p>目前已经被 LinkedIn，Uber, Twitter, Netflix 等大公司所采纳。</p>\n<p><strong>优点</strong></p>\n<ul>\n<li>性能卓越，单机写入 TPS 约在百万条 / 秒，最大的优点，就是吞吐量高。</li>\n<li>时效性：ms 级</li>\n<li>可用性：非常高，kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</li>\n<li>消费者采用 Pull 方式获取消息，消息有序，通过控制能够保证所有消息被消费且仅被消费一次；</li>\n<li>有优秀的第三方 Kafka Web 管理界面 Kafka-Manager；</li>\n<li>在日志领域比较成熟，被多家公司和多个开源项目使用；</li>\n<li>功能支持：功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>Kafka 单机超过 64 个队列 / 分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消息响应时间变长</li>\n<li>使用短轮询方式，实时性取决于轮询间隔时间；</li>\n<li>消费失败不支持重试；</li>\n<li>支持消息顺序，但是一台代理宕机后，就会产生消息乱序；</li>\n<li>社区更新较慢；</li>\n</ol>\n<h3 id=\"rabbitmq\"><a class=\"anchor\" href=\"#rabbitmq\">#</a> RabbitMQ</h3>\n<p>RabbitMQ 2007 年发布，是一个在 AMQP (高级消息队列协议) 基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p>\n<p><strong>优点</strong>：</p>\n<ol>\n<li>\n<p>由于 erlang 语言的特性，mq 性能较好，高并发；</p>\n</li>\n<li>\n<p>吞吐量到万级，MQ 功能比较完备</p>\n</li>\n<li>\n<p>健壮、稳定、易用、跨平台、支持多种语言、文档齐全；</p>\n</li>\n<li>\n<p>开源提供的管理界面非常棒，用起来很好用</p>\n</li>\n<li>\n<p>社区活跃度高；</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>erlang 开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复 bug，不利于做二次开发和维护。</li>\n<li>RabbitMQ 确实吞吐量会低一些，这是因为他做的实现机制比较重。</li>\n<li>需要学习比较复杂的接口和协议，学习和维护成本较高。</li>\n</ol>\n<h3 id=\"rocketmq\"><a class=\"anchor\" href=\"#rocketmq\">#</a> RocketMQ</h3>\n<p>RocketMQ 出自 阿里公司的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进。</p>\n<p>RocketMQ 在阿里集团被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li>单机吞吐量：十万级</li>\n<li>可用性：非常高，分布式架构</li>\n<li>消息可靠性：经过参数优化配置，消息可以做到 0 丢失</li>\n<li>功能支持：MQ 功能较为完善，还是分布式的，扩展性好</li>\n<li>支持 10 亿级别的消息堆积，不会因为堆积导致性能下降</li>\n<li>源码是 java，我们可以自己阅读源码，定制自己公司的 MQ，可以掌控</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>支持的客户端语言不多，目前是 java 及 c++，其中 c++ 不成熟；</li>\n<li>社区活跃度一般</li>\n<li>没有在 mq 核心中去实现 JMS 等接口，有些系统要迁移需要修改大量代码</li>\n</ol>\n<h2 id=\"选择\"><a class=\"anchor\" href=\"#选择\">#</a> 选择</h2>\n<p><strong>1.Kafka</strong><br />\nKafka 主要特点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生大量数据的互联网服务的数据收集业务。</p>\n<p>大型公司建议可以选用，如果有日志采集功能，肯定是首选 kafka 了。</p>\n<p><strong>2.RocketMQ</strong></p>\n<p>天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。</p>\n<p>RoketMQ 在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择 RocketMQ。</p>\n<p><strong>3.RabbitMQ</strong></p>\n<p>RabbitMQ : 结合 erlang 语言本身的并发优势，性能较好，社区活跃度也比较高，但是不利于做二次开发和维护。不过，RabbitMQ 的社区十分活跃，可以解决开发过程中遇到的 bug。</p>\n<p>如果你的数据量没有那么大，小公司优先选择功能比较完备的 RabbitMQ。</p>\n<h2 id=\"为什么用rocketmq\"><a class=\"anchor\" href=\"#为什么用rocketmq\">#</a> 为什么用 RocketMQ？</h2>\n<p>从功能上来说，Kafka 不支持广播、延时、事务、消息轨迹，以及顺序消息时，如果一台 Broker 宕机后，会产生消息乱序，不支持基于 Broker 的 Tag 消息过滤，网上说当 Kafka 分区多的时候，性能会下降。从语言上来说，  Kafka 使用 Java 和 Scala，针对一些框架原理查看以及二开不便利。</p>\n<p>从使用场景 Kafka 更侧重于通过流处理引擎实现<strong>实时数据流处理</strong>，在大数据流处理和实时数据分析方面使用较多（高并发、日志处理）。 RocketMQ 的设计更注重实现<strong>高可用和多功能</strong>的消息服务，在国内较多公司应用较为广泛。</p>\n<p>综合比对，Kafka 的优势在于性能高，而 RocketMQ 的功能和业务场景更贴合国内公司，所以使用也较多。</p>\n<p>Kafka 可以广播，新版本也开始支持事务性消息，只是不支持<strong>延时</strong>。</p>\n<p>这么问主要是问他们的主要区别的，Kafka 在数据吞吐上是远超 rocketmq 的，但是它的 topic 很多的情况下，性能又远低于 rocketmq。基于这种情况 kafka 多用于处理海量的日志，历史数据等体量庞大的数据集合体，这样在个体数据庞大的情况下使用的 topic 点更少；rocketmq 有着更加严谨的检查和规则，所以它更适合分散式的短消息和小数据，这也得于它的 topic 算法和规划，即使有成千上万个 topic 点，性能下降并不多。</p>\n<h2 id=\"深入rocketmq\"><a class=\"anchor\" href=\"#深入rocketmq\">#</a> 深入 RocketMQ</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/010d6da2edd0764240381793eb56466c.png\" alt=\"\" /></p>\n<p>RocketMQ 分布式集群是在 Broker 中引入了主从框架，通过 Master 和 Slave 的配合达到高可用性（brokerId 的值为 0 表明这个 Brocker 是 Master，大于 0 表明这个 Brocker 是 Slave，还有 BrokerRole 参数）。监督管理它们的 Server，有点像 Redis 的哨兵机制？</p>\n<ul>\n<li>\n<p>Master 角色的 Brocker 支持读和写，Slave 角色的 Brocker 仅支持读</p>\n<ul>\n<li>也即是 Producer 只能和 Master 角色的 Broker 连接写入消息</li>\n<li>而 Consumer 可以连接 Master 角色的 Brocker, 也可以连接 Slave 觉得的 Brocker 来读取消息</li>\n</ul>\n</li>\n<li>\n<p>消息消费高可用</p>\n<ul>\n<li>在 Consumer 的配置文件中，并不需要设置是从 Master 读还是从 Slave 读</li>\n<li>当 Master 不可用或者繁忙的时候，Consumer 会被自动切换从 Slave 读</li>\n</ul>\n</li>\n<li>\n<p>消息发送高可用</p>\n</li>\n<li>\n<p>消息的主从复制</p>\n<ul>\n<li>如果一个 Brocker 组有 Master 和 Slave，消息需要从 Master 复制到 Slave 上，有同步和异步两种方式</li>\n<li>同步复制方式等 Master 和 Slave 均写 成功后反馈给客户端写成功状态。在同步复制方式下，如果 Master 出现故障，Slave 上有全部的备份数据，容易恢复，但是同步复制会增大数据写入迟缓，降低系统吞吐量。</li>\n<li>异步复制方式是只要 Master 写成功 即可反馈给客户端写成功状态。在异步复制方式下，系统拥有较低的延迟和较高的吞吐量，但是如果 Master 出了故障，有些数据因为没有被写入 Slave，有可能会丢失</li>\n<li>通过 BrockerRole 参数：ASYNC_MASTER，SYNC_MASTER，SLAVE 设置</li>\n</ul>\n</li>\n</ul>\n<p>更多参数</p>\n<ul>\n<li>\n<p>Topic（主题）：Topic 是消息的分类，在 RocketMQ 中，生产者将消息发送到特定的 Topic，消费者则从特定的 Topic 中订阅消息。一个 Topic 可以有多个生产者和消费者，它们可以并行地发送和接收消息。</p>\n</li>\n<li>\n<p>Queue（队列）：Queue 是消息的存储结构，每个 Topic 下面会有多个 Queue。RocketMQ 会将同一个 Topic 下的消息平均分配到各个 Queue 中，这样可以提高消息的并发处理能力。消费者从 Queue 中拉取并消费消息。</p>\n</li>\n<li>\n<p>其中 queue 就是来源于数据结构的 FIFO 队列。而 Topic 是个抽象的概念，每个 Topic 底层对应 N 个 queue，而数据也真实存在 queue 上的</p>\n</li>\n<li>\n<p>在 RocketMQ 中，如果你想要保证一个消息只被一个 Consumer 消费，你可以使用 RocketMQ 的消费者组（Consumer Group）的概念。</p>\n<ul>\n<li>消费者组是一组共享同一个消息队列的消费者，它们可以并行地消费消息，但是同一个消息只会被组中的一个消费者消费。RocketMQ 会保证同一个消费者组中的消费者不会消费到重复的消息。</li>\n</ul>\n</li>\n<li>\n<p>每个 Broker 可以存储多个 Topic 的消息，每个 Topic 的消息也可以分片存储于不同的 Broker。MessageQueue 用于存储消息的物理地址，每个 Topic 中的消息地址存储于多个 MessageQueue 中。ConsumerGroup 由多个 Consumer 实例构成。</p>\n</li>\n</ul>\n<p>整体流程：<br />\n<img data-src=\"image-20240329203230897.png\" alt=\"\" /></p>\n<div class=\"note warning no-icon\">\n<p>问：RocketMQ 一个消费组内订阅同一个主题不同的 TAG 为什么会丢消息？<br />\n 答：<strong>和消息队列负载机制有关</strong></p>\n<ul>\n<li>在 RocketMQ 中使用集群模式消费时，同一个消费组中的多个消费者共同完成主题中的队列的消费，即一个消费者只会分配到其中某几个队列，并且同一时间，一个队列只会分配给一个消费者<br />\n<img data-src=\"https://pic1.zhimg.com/80/v2-df9f806108165dcd05cc537c4ad94a04_720w.webp\" alt=\"\" /></li>\n<li>其问题的核心关键是，同一个 tag 会分布在不同的队列中，但消费者 C1 分配到的队列为 q0,q1，q0,q1 中有 taga 和 tagb 的消息，但 tagb 的消息会被消费者 C1 过滤，但这部分消息却不会被 C2 消费，造成了消息丢失。<br />\n<mark><strong>所以在 RocketMQ 中，一个消费组内的所有消费这，其订阅关系必须保持一致。</strong></mark></li>\n</ul>\n</div>\n<h2 id=\"实现案例rocketmqspringboot\"><a class=\"anchor\" href=\"#实现案例rocketmqspringboot\">#</a> 实现案例（RocketMQ+Springboot）</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzM3ODAzL2FydGljbGUvZGV0YWlscy8xMTIyNjEzNTI=\">参考</span> 、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMzQ3NjE2L2FydGljbGUvZGV0YWlscy8xMTk5MzA0ODM=\">RabbitMQ 参考</span></p>\n<h3 id=\"五种工作模式\"><a class=\"anchor\" href=\"#五种工作模式\">#</a> 五种工作模式</h3>\n<p>五种工作模式是一种迭代关系：</p>\n<ol>\n<li>比如简单模式是一对一</li>\n<li>那我有两个甚至多个消费者怎么办，这就有了工作队列模式一对多</li>\n<li>现在我觉得消费者太多，队列太少不够用，于是就引进多个队列，对应不同的消费者，这就有了发布订阅模式</li>\n<li>现在我只想给其中一个消费者的消息队列发消息，其他的不发怎么办，于是就是有 Routing 路由模式</li>\n<li>但是问题又来了，我现在想要某一种的消息类型都发到某个队列中去，路由模式一一对应太严苛了，怎么办？就有了通配符 (主题) 模式。</li>\n</ol>\n<h3 id=\"第零步环境设置\"><a class=\"anchor\" href=\"#第零步环境设置\">#</a> 第零步：环境设置</h3>\n<p>安装略过，在 win 上测试了下<br />\n在 bin 目录下，启动 nameserver：<br />\n <code>start mqnamesrv.cmd</code> <br />\n 启动 broker 并指定 nameserver<br />\n <code>start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable=true</code> <br />\n 关闭则是<br />\n <code>mqshutdown namesrv</code>  和  <code>mqshutdown broker</code></p>\n<div class=\"note info no-icon\">\n<p>tips：错误：找不到或无法加载主类</p>\n<ul>\n<li>编辑 runbroker.cmd</li>\n<li><code>set CLASSPATH=.;%BASE_DIR%conf;%CLASSPATH%</code>  给 <strong>%CLASSPATH%</strong> 加上 英文换引号，如下：</li>\n<li><code>set CLASSPATH=.;%BASE_DIR%conf;&quot;%CLASSPATH%&quot;</code></li>\n</ul>\n</div>\n<p>都成功如图所示：<br />\n<img data-src=\"image-20240327203621083.png\" alt=\"\" /><br />\n测试：<br />\n启动消费者</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">NAMESRV_ADDR</span><span class=\"token operator\">=</span>localhost:9876  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tools.cmd org.apache.rocketmq.example.quickstart.Consumer</pre></td></tr></table></figure><p>启动生产者</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">NAMESRV_ADDR</span><span class=\"token operator\">=</span>localhost:9876  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tools.cmd org.apache.rocketmq.example.quickstart.Producer</pre></td></tr></table></figure><p>当生产者启动之后，会发送 1000 个消息，然后自动推出，当退出结束时会返回 true。同时消费者接受到消息则成功</p>\n<h3 id=\"第一步引入maven依赖和配置\"><a class=\"anchor\" href=\"#第一步引入maven依赖和配置\">#</a> 第一步：引入 maven 依赖和配置</h3>\n<p>在 pom.xml 中加入以下依赖（这里用的 2.0.4 版本，不算太老，完全够用，新的 2.x 版本在事务消息那块代码有小小改动）</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.rocketmq<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>rocketmq-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- 还有其它需要的 jar 包自由引入（注：fastjson 不要使用低于 1.2.60 版本，会有安全漏洞） --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.62<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">&lt;!--        @Slf4j 的 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在 application.yml 中添加以下配置</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">rocketmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">name-server</span><span class=\"token punctuation\">:</span> ip<span class=\"token punctuation\">:</span>port <span class=\"token comment\"># MQ 服务的 host 地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">producer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> Pro_Group <span class=\"token comment\"># 必须指定 group</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">send-message-timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span> <span class=\"token comment\"># 消息发送超时时长，默认 3s</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">retry-times-when-send-failed</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 同步发送消息失败重试次数，默认 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">retry-times-when-send-async-failed</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 异步发送消息失败重试次数，默认 2</span></pre></td></tr></table></figure><h3 id=\"第二步编写生产者\"><a class=\"anchor\" href=\"#第二步编写生产者\">#</a> 第二步：编写生产者</h3>\n<p>新建 MQProducerService 类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:MQProducerService</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MQProducerService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;rocketmq.producer.send-message-timeout&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> messageTimeOut<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 建议正常规模项目统一用一个 TOPIC</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> topic <span class=\"token operator\">=</span> <span class=\"token string\">\"RLT_TEST_TOPIC\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 直接注入使用，用于发送消息到 broker 服务器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RocketMQTemplate</span> rocketMQTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 普通发送（这里的参数对象User可以随意定义，可以发送个对象，也可以是字符串等）</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        rocketMQTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">+</span> <span class=\"token string\">\":tag1\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//        rocketMQTemplate.send (topic + \":tag1\", MessageBuilder.withPayload (user).build ()); // 等价于上面一行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 发送同步消息（阻塞当前线程，等待broker响应发送结果，这样不太容易丢失消息）</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * （msgBody也可以是对象，sendResult为返回的发送结果）</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SendResult</span> <span class=\"token function\">sendMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msgBody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">SendResult</span> sendResult <span class=\"token operator\">=</span> rocketMQTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">syncSend</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>msgBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【sendMsg】sendResult=&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>sendResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> sendResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * 发送异步消息（通过线程池执行发送到broker的消息任务，执行完后回调：在SendCallback中可处理相关成功失败时的逻辑）</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * （适合对响应时间敏感的业务场景）</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendAsyncMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msgBody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        rocketMQTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">asyncSend</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>msgBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SendCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SendResult</span> sendResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">// 处理消息发送成功逻辑</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token comment\">// 处理消息发送异常逻辑</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * 发送延时消息（上面的发送同步消息，delayLevel的值就为0，因为不延时）</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 在start版本中 延时消息一共分为18个等级分别为：1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendDelayMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msgBody<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> delayLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        rocketMQTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">syncSend</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>msgBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> messageTimeOut<span class=\"token punctuation\">,</span> delayLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     * 发送单向消息（只负责发送消息，不等待应答，不关心发送结果，如日志）</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWayMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msgBody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        rocketMQTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">sendOneWay</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>msgBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     * 发送带tag的消息，直接在topic后面加上\":tag\"</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SendResult</span> <span class=\"token function\">sendTagMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msgBody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> rocketMQTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">syncSend</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">+</span> <span class=\"token string\">\":tag2\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>msgBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>上面写的这几个消息发送方法， 第一个方法和最后一个方法的参数 topic 和其它的不一样，其实这是 rocketmq 和 springboot 整合后设置 Tag 的方式（Tag：用于区分过滤同一主题下的不同业务类型的消息，非常实用）, 在项目里往 mq 写入消息时，最好每条消息都带上 tag，用于消费时根据业务过滤</li>\n</ul>\n<p>在 rocketmq-spring-boot-starter 中，Tag 的设置方式： 在 topic 后面加上 “:tagName”，源码中是以 “:” 进行分割的，前面的是 topic，后面的就是 tag：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20210106163141447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzM3ODAz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\" /></p>\n<h3 id=\"第三步编写消费者\"><a class=\"anchor\" href=\"#第三步编写消费者\">#</a> 第三步：编写消费者</h3>\n<p>新建 MQConsumerService 类（本案例以上面生产者中第一个和最后一个加了 tag 的消息进行消费）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:MQConsumerService</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MQConsumerService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//topic 需要和生产者的 topic 一致，consumerGroup 属性是必须指定的，内容可以随意</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//selectorExpression 的意思指的就是 tag，默认为 “*”，不设置的话会监听所有消息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@RocketMQMessageListener</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"RLT_TEST_TOPIC\"</span><span class=\"token punctuation\">,</span> selectorExpression <span class=\"token operator\">=</span> <span class=\"token string\">\"tag1\"</span><span class=\"token punctuation\">,</span> consumerGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"Con_Group_One\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerSend</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RocketMQListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 监听到消息就会执行此方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"监听到消息：user=&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 注意：这个 ConsumerSend2 和上面 ConsumerSend 在没有添加 tag 做区分时，不能共存，</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 不然生产者发送一条消息，这两个都会去消费，如果类型不同会有一个报错，所以实际运用中最好加上 tag，写这只是让你看知道就行</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 不设置 selectorExpression 就是都接受，所以测试的时候和上面同时响应了</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@RocketMQMessageListener</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"RLT_TEST_TOPIC\"</span><span class=\"token punctuation\">,</span> consumerGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"Con_Group_Two\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerSend2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RocketMQListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"监听到消息：str=&#123;&#125;\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// MessageExt：是一个消息接收通配符，不管发送的是 String 还是对象，都可接收，当然也可以像上面明确指定类型（我建议还是指定类型较方便）</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@RocketMQMessageListener</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"RLT_TEST_TOPIC\"</span><span class=\"token punctuation\">,</span> selectorExpression <span class=\"token operator\">=</span> <span class=\"token string\">\"tag2\"</span><span class=\"token punctuation\">,</span> consumerGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"Con_Group_Three\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RocketMQListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageExt</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageExt</span> messageExt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body <span class=\"token operator\">=</span> messageExt<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"监听到消息：msg=&#123;&#125;\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"第四步测试\"><a class=\"anchor\" href=\"#第四步测试\">#</a> 第四步：测试</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/rocketmq\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RocketMQController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MQProducerService</span> mqProducerService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/send\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t    <span class=\"token comment\">// 正好有个随便测的一个自己的 User 数据表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tqueryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getPhone</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zy@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 核心在于发送了这个信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmqProducerService<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sendTag\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SendResult</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">sendTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">SendResult</span> sendResult <span class=\"token operator\">=</span> mqProducerService<span class=\"token punctuation\">.</span><span class=\"token function\">sendTagMsg</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"带有tag的字符消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>sendResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用 Postman 测试 <code>http://localhost/rocketmq/send</code> ， <code>http://localhost/rocketmq/sendTag</code> <br />\n<img data-src=\"image-20240327212233987.png\" alt=\"\" /><br />\n<img data-src=\"image-20240327212427240.png\" alt=\"\" /></p>\n<h2 id=\"redis的mq\"><a class=\"anchor\" href=\"#redis的mq\">#</a> redis 的 MQ</h2>\n<p>Redis 提供了三种不同的方式来实现消息队列：</p>\n<ul>\n<li>list 结构：基于 List 结构模拟消息队列</li>\n<li>PubSub：基本的点对点消息模型</li>\n<li>Stream：比较完善的消息队列模型</li>\n</ul>\n<h3 id=\"基于list实现消息队列\"><a class=\"anchor\" href=\"#基于list实现消息队列\">#</a> 基于 List 实现消息队列</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># lpush 命令在 l1 队列中放入两个元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> LPUSH l1 element1 element2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># brpop 命令在 l1 队列右侧取出第一个元素，等待时间 20s</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> BRPOP l1 <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"l1\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"element1\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># brpop 命令在 l1 队列右侧取出第二个元素，等待时间 20s</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> BRPOP l1 <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"l1\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"element2\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># brpop 命令在 l1 队列右侧取出第三个元素，等待时间 20s，元素被取完，命令处于阻塞状态</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> BRPOP l1 <span class=\"token number\">20</span></pre></td></tr></table></figure><p>优点：</p>\n<ul>\n<li>利用 Redis 存储，不受限于 JVM 内存上限</li>\n<li>基于 Redis 的持久化机制，数据安全性有保证</li>\n<li>可以满足消息有序性</li>\n<li></li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>无法避免消息丢失</li>\n<li><strong>只支持单消费者</strong></li>\n</ul>\n<p><mark>更多面向搜索引擎，用了 RocketMQ，没用这个，大概知道下</mark></p>\n<h1 id=\"改头换面\"><a class=\"anchor\" href=\"#改头换面\">#</a> 改头换面</h1>\n<p>如果有面试官真看博客的话 —— 我能咋办捏，都是这些项目拼凑的，同质化严重</p>\n<p>校园在线跳蚤平台<br />\n项目介绍：本平台项目实现了用户登录注册管理，发布商品及评论，点赞收藏及系统通知功能，实现了高并发的订单管理。<br />\n相关技术：【SpringBoot，Mybatis Plus，MySQL，Redis，RocketMQ，Nginx】</p>\n<ul>\n<li>项目构建在 SpringBoot 框架上，实现了统一的异常处理，日志记录</li>\n<li>利用 Redis 实现高频数据缓存，提高并发访问能力，解决缓存穿透、缓存击穿问题</li>\n<li>利用 Redis 实现了订单全局唯一 id 功能，通过乐观锁实现库存扣减，利用分布式锁实现了一人一单</li>\n<li>利用自定义注解 + 拦截器的方式实现用户登录鉴权以及登录状态缓存功能</li>\n<li>利用 RocketMQ 进行流量削峰，实现了点赞，关注，收藏等通知的异步处理</li>\n<li>利用 Nginx 对 IP 进行哈希映射 + 轮询实现负载均衡，尽量保证会话保持又不会不均匀负载</li>\n</ul>\n<h2 id=\"拦截器自定义注解\"><a class=\"anchor\" href=\"#拦截器自定义注解\">#</a> 拦截器 + 自定义注解</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTczNjk1OS9hcnRpY2xlL2RldGFpbHMvMTA3ODQzMTc5\">拦截器 + 自定义注解</span></p>\n<h3 id=\"拦截器\"><a class=\"anchor\" href=\"#拦截器\">#</a> 拦截器</h3>\n<p>可以自定义拦截类 (继承 <code>HandlerInterceptorAdapter</code> ) 在 <code>preHandle</code>  中重写拦截逻辑，并在  <code>WebMvcConfigurer</code>  重写 <code>addInterceptors</code>  添加</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:LoginInterceptor</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintWriter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelAndView</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HandlerInterceptorAdapter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 登录拦截器（判断用户是否登录）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginInterceptor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HandlerInterceptorAdapter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 从 session 中获取用户对象（该对象在用户登录的时候存于 session 中）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USER_OBJECT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 用户未登录，则返回 false, 拦截该请求</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">PrintWriter</span> printWriter <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            printWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请登录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 用户已登录，则返回 true, 放行该请求</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// TODO Auto-generated method stub</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// TODO Auto-generated method stub</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">ModelAndView</span> modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// TODO Auto-generated method stub</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> modelAndView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:WebMvcConfigurer</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InterceptorRegistry</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebMvcConfigurer</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptorConfig</span>  <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">TokenInterceptor</span> tokenInterceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 设置所有的路径都要进行拦截，除了 /test/login</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginInterceptor</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">excludePathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>或者实现 Filter 中 的 doFilter，并使用 <code>@WebFilter</code>  注解会自动解析</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:LoginCheckFilter</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@WebFilter</span><span class=\"token punctuation\">(</span>filterName <span class=\"token operator\">=</span> <span class=\"token string\">\"LoginCheckFilter\"</span><span class=\"token punctuation\">,</span> urlPatterns <span class=\"token operator\">=</span> <span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginCheckFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 路径匹配  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AntPathMatcher</span> <span class=\"token constant\">PATH_MATCHER</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AntPathMatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 强转  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> servletRequest<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">HttpServletResponse</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> servletResponse<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//1. 获取本次请求的 URI  </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> requestURI <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"拦截到请求：&#123;&#125;\"</span><span class=\"token punctuation\">,</span>requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 定义不需要处理的请求  </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> urls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token string\">\"/employee/login\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token string\">\"/employee/logout\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token string\">\"/backend/**\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token string\">\"/front/**\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token string\">\"/common/**\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 对用户登陆操作放行  </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token string\">\"/user/sendMsg\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token string\">\"/rocketmq/*\"</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">//2. 判断本次请求是否需要处理  </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">boolean</span> check <span class=\"token operator\">=</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">,</span> requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//3. 如果不需要处理，则直接放行  </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本次请求：&#123;&#125;，不需要处理\"</span><span class=\"token punctuation\">,</span>requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">//4. 判断登录状态，如果已登录，则直接放行  </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 管理员后台登录  </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户已登录，id为&#123;&#125;\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 在这里获取一下线程 id  </span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doFilter的线程id为：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 根据 session 来获取之前我们存的 id 值  </span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">Long</span> empId <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">)</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 使用 BaseContext 封装 id  </span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">BaseContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCurrentId</span><span class=\"token punctuation\">(</span>empId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 用户前台登录  </span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户已登录，用户id为：&#123;&#125;\"</span><span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">)</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">BaseContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCurrentId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">//5. 如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据  </span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户未登录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户id&#123;&#125;\"</span><span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NOTLOGIN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> urls<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url <span class=\"token operator\">:</span> urls<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">boolean</span> match <span class=\"token operator\">=</span> <span class=\"token constant\">PATH_MATCHER</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token comment\">// 匹配  </span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">// 不匹配  </span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"自定义注解\"><a class=\"anchor\" href=\"#自定义注解\">#</a> 自定义注解</h3>\n<p>注解的本质是一个 interface 接口，注解接口默认继承了 java.lang.annotation.Annotation 接口<br />\n以设定一个只允许管理员权限处理为例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注解的范围是类、接口、枚举的方法上</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 被虚拟机保存，可用反射机制读取</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">OnlyAdmin</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在对应 Controller 方法上加上即可触发</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 删除博客文章</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@OnlyAdmin</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Resp</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tbokeService<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Resp</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>更改 preHandle，添加是否有该注解的判断</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:LoginInterceptor</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintWriter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HandlerMethod</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelAndView</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HandlerInterceptorAdapter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 登录拦截器</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginInterceptor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HandlerInterceptorAdapter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 从 session 中获取用户对象（该对象在用户登录的时候存于 session 中）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USER_OBJECT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 用户未登录，则以游客身份登录</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游客\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">DateTool</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatDateTimeSecond</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USER_OBJECT</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 请求的方法是否有注解</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">boolean</span> haveAnnotataion <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerMethod</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haveAnnotataion<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 检测是否有 @OnlyAdmin 注解</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">OnlyAdmin</span> oa <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerMethod</span><span class=\"token punctuation\">)</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethodAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OnlyAdmin</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oa <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// 如果有 @OnlyAdmin 则表明该方法只允许管理员删除</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token class-name\">Object</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USER_OBJECT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 这里假设以 ID 为 1 为管理员</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    response<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/json;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token class-name\">PrintWriter</span> pw <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    pw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    pw<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;\\\"msg\\\":\\\"你未有该权限\\\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 用户已登录，则返回 true, 放行该请求</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// TODO Auto-generated method stub</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre> </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// TODO Auto-generated method stub</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre> </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\">ModelAndView</span> modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// TODO Auto-generated method stub</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> modelAndView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre> </pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"rocketmq通知的异步处理\"><a class=\"anchor\" href=\"#rocketmq通知的异步处理\">#</a> RocketMQ 通知的异步处理</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81ODQ4MjMxMS9hcnRpY2xlL2RldGFpbHMvMTM0NzAxMDA3P3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yfmRlZmF1bHR+YmFpZHVqc19iYWlkdWxhbmRpbmd3b3JkfmRlZmF1bHQtMC0xMzQ3MDEwMDctYmxvZy0xMzAxOTg4OTkuMjM1JTVFdjQzJTVFcGNfYmxvZ19ib3R0b21fcmVsZXZhbmNlX2Jhc2U3JmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNDI0Mi4xJmFtcDt1dG1fcmVsZXZhbnRfaW5kZXg9Mw==\">参考</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4OTQ4MzU5L2FydGljbGUvZGV0YWlscy8xMzAxOTg4OTkjOn46dGV4dD0lRTUlQkUlODUlRTYlQjYlODglRTglQjQlQjklRUYlQkMlOUElRTYlQjYlODglRTYlODElQUYlRTglQTIlQUIlRTUlOEYlOTElRTklODAlODElRTUlODglQjAlRTYlOUMlOEQlRTUlOEElQTElRTclQUIlQUYlRUYlQkMlOEMlRTUlQUYlQjklRTYlQjYlODglRTglQjQlQjklRTglODAlODUlRTUlOEYlQUYlRTglQTclODElRUYlQkMlOEMlRTclQUQlODklRTUlQkUlODUlRTYlQjYlODglRTglQjQlQjklRTglODAlODUlRTYlQjYlODglRTglQjQlQjklRTclOUElODQlRTclOEElQjYlRTYlODAlODElRTMlODAlODIlMjAlRTYlQjYlODglRTglQjQlQjklRTQlQjglQUQlRUYlQkMlOUElRTYlQjYlODglRTYlODElQUYlRTglQTIlQUIlRTYlQjYlODglRTglQjQlQjklRTglODAlODUlRTglOEUlQjclRTUlOEYlOTYlRUYlQkMlOEMlRTUlQjklQjYlRTYlOEMlODklRTclODUlQTclRTYlQjYlODglRTglQjQlQjklRTglODAlODUlRTYlOUMlQUMlRTUlOUMlQjAlRTclOUElODQlRTQlQjglOUElRTUlOEElQTElRTklODAlQkIlRTglQkUlOTElRTglQkYlOUIlRTglQTElOEMlRTUlQTQlODQlRTclOTAlODYlRTclOUElODQlRTglQkYlODclRTclQTglOEIlRTMlODAlODIlMjAlRTYlQUQlQTQlRTYlOTclQjYlRTYlOUMlOEQlRTUlOEElQTElRTclQUIlQUYlRTQlQkMlOUElRTclQUQlODklRTUlQkUlODUlRTYlQjYlODglRTglQjQlQjklRTglODAlODUlRTUlQUUlOEMlRTYlODglOTAlRTYlQjYlODglRTglQjQlQjklRTUlQjklQjYlRTYlOEYlOTAlRTQlQkElQTQlRTYlQjYlODglRTglQjQlQjklRTclQkIlOTMlRTYlOUUlOUMlRUYlQkMlOEMlRTUlQTYlODIlRTYlOUUlOUMlRTQlQjglODAlRTUlQUUlOUElRTYlOTclQjYlRTklOTclQjQlRTUlOTAlOEUlRTYlQjIlQTElRTYlOUMlODklRTYlOTQlQjYlRTUlODglQjAlRTYlQjYlODglRTglQjQlQjklRTglODAlODUlRTclOUElODQlRTUlOTMlOEQlRTUlQkElOTQlRUYlQkMlOENBcGFjaGUlMjBSb2NrZXRNUSVFNCVCQyU5QSVFNSVBRiVCOSVFNiVCNiU4OCVFNiU4MSVBRiVFOCVCRiU5QiVFOCVBMSU4QyVFOSU4NyU4RCVFOCVBRiU5NSVFNSVBNCU4NCVFNyU5MCU4NiVFMyU4MCU4MiwlRTUlODUlQjclRTQlQkQlOTMlRTQlQkYlQTElRTYlODElQUYlRUYlQkMlOEMlRTglQUYlQjclRTUlOEYlODIlRTglQTclODElRTYlQjYlODglRTglQjQlQjklRTklODclOEQlRTglQUYlOTUlRTMlODAlODIlMjAlRTYlQjYlODglRTglQjQlQjklRTYlOEYlOTAlRTQlQkElQTQlRUYlQkMlOUElRTYlQjYlODglRTglQjQlQjklRTglODAlODUlRTUlQUUlOEMlRTYlODglOTAlRTYlQjYlODglRTglQjQlQjklRTUlQTQlODQlRTclOTAlODYlRUYlQkMlOEMlRTUlQjklQjYlRTUlOTAlOTElRTYlOUMlOEQlRTUlOEElQTElRTclQUIlQUYlRTYlOEYlOTAlRTQlQkElQTQlRTYlQjYlODglRTglQjQlQjklRTclQkIlOTMlRTYlOUUlOUMlRUYlQkMlOEMlRTYlOUMlOEQlRTUlOEElQTElRTclQUIlQUYlRTYlQTAlODclRTglQUUlQjAlRTUlQkQlOTMlRTUlODklOEQlRTYlQjYlODglRTYlODElQUYlRTUlQjclQjIlRTclQkIlOEYlRTglQTIlQUIlRTUlQTQlODQlRTclOTAlODYlRUYlQkMlODglRTUlOEMlODUlRTYlOEIlQUMlRTYlQjYlODglRTglQjQlQjklRTYlODglOTAlRTUlOEElOUYlRTUlOTIlOEMlRTUlQTQlQjElRTglQjQlQTUlRUYlQkMlODklRTMlODAlODIlMjBBcGFjaGUlMjBSb2NrZXRNUSVFOSVCQiU5OCVFOCVBRSVBNCVFNiU5NCVBRiVFNiU4QyU4MSVFNCVCRiU5RCVFNyU5NSU5OSVFNiU4OSU4MCVFNiU5QyU4OSVFNiVCNiU4OCVFNiU4MSVBRiVFRiVCQyU4QyVFNiVBRCVBNCVFNiU5NyVCNiVFNiVCNiU4OCVFNiU4MSVBRiVFNiU5NSVCMCVFNiU4RCVBRSVFNSVCOSVCNiVFNCVCOCU4RCVFNCVCQyU5QSVFNyVBQiU4QiVFNSU4RCVCMyVFOCVBMiVBQiVFNSU4OCVBMCVFOSU5OSVBNCVFRiVCQyU4QyVFNSU4RiVBQSVFNiU5OCVBRiVFOSU4MCVCQiVFOCVCRSU5MSVFNiVBMCU4NyVFOCVBRSVCMCVFNSVCNyVCMiVFNiVCNiU4OCVFOCVCNCVCOSVFMyU4MCU4MiUyMCVFNiVCNiU4OCVFNiU4MSVBRiVFNSU5QyVBOCVFNCVCRiU5RCVFNSVBRCU5OCVFNiU5NyVCNiVFOSU5NyVCNCVFNSU4OCVCMCVFNiU5QyU5RiVFNiU4OCU5NiVFNSVBRCU5OCVFNSU4MiVBOCVFNyVBOSVCQSVFOSU5NyVCNCVFNCVCOCU4RCVFOCVCNiVCMyVFOCVBMiVBQiVFNSU4OCVBMCVFOSU5OSVBNCVFNSU4OSU4RCVFRiVCQyU4QyVFNiVCNiU4OCVFOCVCNCVCOSVFOCU4MCU4NSVFNCVCQiU4RCVFNyU4NCVCNiVFNSU4RiVBRiVFNCVCQiVBNSVFNSU5QiU5RSVFNiVCQSVBRiVFNiVCNiU4OCVFNiU4MSVBRiVFOSU4NyU4RCVFNiU5NiVCMCVFNiVCNiU4OCVFOCVCNCVCOSVFMyU4MCU4Mg==\">参考</span></p>\n<h2 id=\"ip哈希\"><a class=\"anchor\" href=\"#ip哈希\">#</a> IP 哈希</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xOTE1MzQwMzE=\">参考</span></p>\n<h1 id=\"项目细节深挖\"><a class=\"anchor\" href=\"#项目细节深挖\">#</a> 项目细节深挖</h1>\n<ol>\n<li>\n<p><strong>订单全局唯一 ID 功能</strong>：利用 Redis 可以很方便地实现订单全局唯一 ID 功能，可以使用 Redis 的原子性操作（如 INCR 命令）来生成全局唯一的订单 ID。</p>\n</li>\n<li>\n<p><strong>乐观锁实现库存扣减</strong>：乐观锁可以用于保证并发环境下的数据一致性，确保库存扣减操作的原子性和一致性。在扣减库存时，需要先查询当前库存数量，然后进行扣减操作，并在更新库存时检查库存是否充足。如果在查询和更新之间库存发生了变化，则说明其他线程已经修改了库存，此时扣减操作可能会失败，需要进行重试或者放弃。</p>\n</li>\n<li>\n<p><strong>分布式锁实现一人一单</strong>：分布式锁可以用于保证一人一单的原则，防止重复下单。在用户下单时，可以先获取分布式锁，然后再生成订单。获取锁成功则可以继续下单，获取锁失败则表示已经有其他线程在处理订单，此时需要等待或者返回错误信息。</p>\n</li>\n<li>\n<p>Mybatis 中不能重载函数（同名），意味着 xml 中有两个 id 相同的语句。查询单个和查询多个应该合并</p>\n</li>\n</ol>\n<h1 id=\"具体优化问题\"><a class=\"anchor\" href=\"#具体优化问题\">#</a> 具体优化问题</h1>\n<p>索引解决不了的：</p>\n<ol>\n<li>大量的分页查询对于 mysql 始终要从前开始一页页查询，大量的操作会有很多无用的操作，给定一个查询 id，和一页大小，转为范围查询\n<ol>\n<li>条件查询、跳页、主键雪花等页没什么办法：轻量级搜索引擎，存热数据。冷数据就解决不了了</li>\n<li>针对客户端的一般限制可浏览的页数，避免太多的页数导致 offset 过大，或者用其他的数据库存数据</li>\n</ol>\n</li>\n<li>单纯的大量数据，不改动的前提下，提高查询响应速度。首先是本质上定位问题，10 亿，也才 4 层 B + 树，也只多一次随机 io。但 MySQL 的机制是先查询 buff pool（默认 128m），才走索引，加载页。数据量多了后因为页大小固定 16k，数据分散，pool 被占满后就会有频繁的内存交换。（是走随机 io 和走缓存的差距）。临时解决方案就是提高 pool 缓存区大小 / 加大线程池最大线程数。最终就是分库分表、分布式数据库。</li>\n</ol>\n<p>高可用、高并发、高性能</p>\n",
            "tags": [
                "JAVA",
                "Mysql"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/21/Java%E7%AC%94%E8%AE%B0/",
            "url": "https://zyakmd.github.io/2024/03/21/Java%E7%AC%94%E8%AE%B0/",
            "title": "Java笔记",
            "date_published": "2024-03-21T13:05:07.000Z",
            "content_html": "<p>记录一些 java 的机制利于复习</p>\n<ul>\n<li>\n<p>JDK（Java Development Kit），它是功能齐全的 Java SDK，是提供给开发者使用，能够创建和编译 Java 程序的开发套件。它包含了 JRE，同时还包含了编译 java 源码的编译器 javac 以及一些其他工具比如 javadoc（文档注释工具）、jdb（调试器）、jconsole（基于 JMX 的可视化监控⼯具）、javap（反编译工具）等等。</p>\n</li>\n<li>\n<p>JRE（Java Runtime Environment） 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，主要包括 Java 虚拟机（JVM）、Java 基础类库（Class Library）。</p>\n</li>\n</ul>\n<p>也就是说，JRE 是 Java 运行时环境，仅包含 Java 应用程序的运行时环境和必要的类库。而 JDK 则包含了 JRE，同时还包括了 javac、javadoc、jdb、jconsole、javap 等工具，可以用于 Java 应用程序的开发和调试。如果需要进行 Java 编程工作，比如编写和编译 Java 程序、使用 Java API 文档等，就需要安装 JDK。而对于某些需要使用 Java 特性的应用程序，如 JSP 转换为 Java Servlet、使用反射等，也需要 JDK 来编译和运行 Java 代码。因此，即使不打算进行 Java 应用程序的开发工作，也有可能需要安装 JDK。</p>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/java/basis/jdk-include-jre.png\" alt=\"\" /></p>\n<h1 id=\"jvm\"><a class=\"anchor\" href=\"#jvm\">#</a> JVM</h1>\n<p><img data-src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctbXkuY3Nkbi5uZXQvdXBsb2Fkcy8yMDEyMTIvMTUvMTM1NTU3MTUwMV85NjY5LmpwZw\" alt=\"\" /><br />\nJVM 是 Java Virtual Machine 的缩写，它是一个虚构出来的计算机，一种规范。通过在实际的计算机上仿真模拟各类计算机功能实现</p>\n<p>jvm 虚拟机位于操作系统的堆中，java 程序的运行就是由它管理</p>\n<h2 id=\"执行过程\"><a class=\"anchor\" href=\"#执行过程\">#</a> 执行过程</h2>\n<p><strong>JVM</strong> 是不认识文本文件的，所以它需要一个 <strong>编译</strong> ，让其成为一个它会读二进制文件的 <strong>HelloWorld.class</strong></p>\n<p>Java 源文件通过编译器，能够生产相应的.Class 文件，也就是字节码文件，而字节码文件又通过 Java 虚拟机中的解释器，编译成特定机器上的机器码 。</p>\n<ul>\n<li>Java 源文件 —-&gt; 编译器 —-&gt; 字节码文件</li>\n<li>字节码文件 —-&gt;JVM—-&gt; 机器码</li>\n<li>虚拟机主要的 5 大块：方法区，堆都为线程共享区域，有线程安全问题，栈和本地方法栈和计数器都是独享区域，不存在线程安全问题，而 JVM 的调优主要就是围绕堆，栈两大块进行</li>\n</ul>\n<ol>\n<li>\n<p>类加载器</p>\n<ul>\n<li>如果 <strong>JVM</strong> 想要执行这个 <strong>.class</strong> 文件，我们需要将其装进一个 <strong>类加载器</strong> 中，它就像一个搬运工一样，会把所有的 <strong>.class</strong> 文件全部搬进 JVM 里面来。<br />\n<img data-src=\"https://static001.geekbang.org/infoq/2f/2f012fde94376f43a25dbe1dd07e0dd8.png\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>方法区</p>\n<ul>\n<li><strong>方法区</strong>是用于存放类似于元数据信息方面的数据的，比如类信息，常量，静态变量，编译后代码・・・等</li>\n</ul>\n</li>\n<li>\n<p>堆</p>\n<ul>\n<li><strong>堆</strong> 主要放了一些存储的数据，比如对象实例，数组・・・等，它和方法区都同属于 <strong>线程共享区域</strong> 。也就是说它们都是 <strong>线程不安全</strong> 的</li>\n</ul>\n</li>\n<li>\n<p>栈</p>\n<ul>\n<li><strong>栈</strong> 这是我们的代码运行空间。我们编写的每一个方法都会放到 <strong>栈</strong> 里面运行。<br />\n我们会听说过 本地方法栈 或者 本地方法接口 这两个名词，不过我们基本不会涉及这两块的内容，它俩底层是使用 C 来进行工作的，和 Java 没有太大的关系。</li>\n</ul>\n</li>\n<li>\n<p>程序计数器</p>\n<ul>\n<li>主要就是完成一个加载工作，类似于一个指针一样的，指向下一行我们需要执行的代码。和栈一样，都是 <strong>线程独享</strong> 的，就是说每一个线程都会有自己对应的一块区域而不会存在并发和多线程的问题。</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://static001.geekbang.org/infoq/c6/c602f57ea9297f50bbc265f1821d6263.png\" alt=\"\" /></p>\n<ul>\n<li>以一个包含 name 属性的学生类 student 为例：</li>\n</ul>\n<blockquote>\n<p>执行 main 方法的步骤如下:</p>\n</blockquote>\n<ol>\n<li>编译好 App.java 后得到 App.class 后，执行 App.class，系统会启动一个 JVM 进程，从 classpath 路径中找到一个名为 App.class 的二进制文件，将 App 的类信息加载到运行时数据区的方法区内，这个过程叫做 App 类的加载</li>\n<li>JVM 找到 App 的主程序入口，执行 main 方法</li>\n<li>这个 main 中的第一条语句为 Student student = new Student (&quot;tellUrDream&quot;) ，就是让 JVM 创建一个 Student 对象，但是这个时候方法区中是没有 Student 类的信息的，所以 JVM 马上加载 Student 类，把 Student 类的信息放到方法区中</li>\n<li>加载完 Student 类后，JVM 在堆中为一个新的 Student 实例分配内存，然后调用构造函数初始化 Student 实例，这个 Student 实例持有 <strong>指向方法区中的 Student 类的类型信息</strong> 的引用</li>\n<li>执行 student.sayName (); 时，JVM 根据 student 的引用找到 student 对象，然后根据 student 对象持有的引用定位到方法区中 student 类的类型信息的方法表，获得 sayName () 的字节码地址。</li>\n<li>执行 sayName ()</li>\n</ol>\n<p>其实也不用管太多，只需要知道对象实例初始化时会去方法区中找类信息，完成后再到栈那里去运行方法。找方法就在方法表中找</p>\n<h2 id=\"字节码\"><a class=\"anchor\" href=\"#字节码\">#</a> 字节码</h2>\n<p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为  <code>.class</code>  的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以， Java 程序运行时相对来说还是高效的（不过，和 C、 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行</p>\n<h3 id=\"编译与解释\"><a class=\"anchor\" href=\"#编译与解释\">#</a> 编译与解释</h3>\n<p>为什么说 java 语言编译与解释并存？<br />\n我们可以将高级编程语言按照程序的执行方式分为两种：</p>\n<ul>\n<li><strong>编译型</strong>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUI3JUE4JUU4JUFEJUFGJUU4JUFBJTlFJUU4JUE4JTgw\">编译型语言 open in new window</span> 会通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUI3JUE4JUU4JUFEJUFGJUU1JTk5JUE4\">编译器 open in new window</span> 将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。</li>\n<li><strong>解释型</strong>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTlCJUI0JUU4JUFEJUFGJUU4JUFBJTlFJUU4JUE4JTgw\">解释型语言 open in new window</span> 会通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTlCJUI0JUU4JUFEJUFGJUU1JTk5JUE4\">解释器 open in new window</span> 一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。<br />\n<img data-src=\"https://oss.javaguide.cn/github/javaguide/java/basis/compiled-and-interpreted-languages.png\" alt=\"\" /><br />\nJava 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（ <code>.class</code>  文件），这种字节码必须由 Java 解释器来解释执行。</li>\n</ul>\n<h2 id=\"类加载器\"><a class=\"anchor\" href=\"#类加载器\">#</a> 类加载器</h2>\n<ul>\n<li>ClassLoader 只负责 class 文件的加载，而是否能够运行则由 Execution Engine 来决定</li>\n<li>从类被加载到虚拟机内存中开始，到释放内存总共有 7 个步骤：加载，验证，准备，解析，初始化，使用，卸载。其中<strong>验证，准备，解析三个部分统称为连接</strong></li>\n</ul>\n<h3 id=\"加载\"><a class=\"anchor\" href=\"#加载\">#</a> 加载</h3>\n<ol>\n<li>将 class 文件加载到内存</li>\n<li>将静态数据结构转化成方法区中运行时的数据结构</li>\n<li>在堆中生成一个代表这个类的 java.lang.Class 对象作为数据访问的入口</li>\n</ol>\n<h3 id=\"连接\"><a class=\"anchor\" href=\"#连接\">#</a> 连接</h3>\n<ol>\n<li>验证：确保加载的类符合 JVM 规范和安全，保证被校验类的方法在运行时不会做出危害虚拟机的事件，其实就是一个安全检查</li>\n<li>准备：为 static 变量在方法区中分配内存空间，设置变量的初始值，例如 static int a = 3 （注意：准备阶段只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），实例变量是对象初始化时赋值的）</li>\n<li>解析：虚拟机将常量池内的符号引用替换为直接引用的过程（符号引用比如我现在 import java.util.ArrayList 这就算符号引用，直接引用就是指针或者对象地址，注意引用对象一定是在内存进行）</li>\n</ol>\n<h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<ul>\n<li>初始化其实就是一个赋值的操作，它会执行一个类构造器的 &lt;clinit&gt;() 方法。由编译器自动收集类中所有变量的赋值动作，此时准备阶段时的那个 static int a = 3 的例子，在这个时候就正式赋值为 3</li>\n</ul>\n<h3 id=\"卸载\"><a class=\"anchor\" href=\"#卸载\">#</a> 卸载</h3>\n<ul>\n<li>GC 将无用对象从内存中卸载</li>\n</ul>\n<h3 id=\"加载顺序\"><a class=\"anchor\" href=\"#加载顺序\">#</a> 加载顺序</h3>\n<p>加载一个 Class 类的顺序也是有优先级的，类加载器从最底层开始往上的顺序是这样的</p>\n<ol>\n<li>BootStrap ClassLoader：rt.jar</li>\n<li>Extention ClassLoader: 加载扩展的 jar 包</li>\n<li>App ClassLoader：指定的 classpath 下面的 jar 包</li>\n<li>Custom ClassLoader：自定义的类加载器</li>\n</ol>\n<h2 id=\"运行时数据区\"><a class=\"anchor\" href=\"#运行时数据区\">#</a> 运行时数据区</h2>\n<p>JVM 内存区域主要分为线程私有区域【程序计数器、虚拟机栈、本地方法区】、线程共享区域【JAVA 堆（虚拟机堆？）、方法区】、直接内存。</p>\n<h3 id=\"方法区\"><a class=\"anchor\" href=\"#方法区\">#</a> 方法区</h3>\n<ul>\n<li>方法区主要的作用技术存放类的元数据信息，常量和静态变量・・・等。当它存储的信息过大时，会在无法满足内存分配时报错。</li>\n</ul>\n<h3 id=\"虚拟机栈和虚拟机堆\"><a class=\"anchor\" href=\"#虚拟机栈和虚拟机堆\">#</a> 虚拟机栈和虚拟机堆</h3>\n<p>一句话便是：栈管运行，堆管存储。则虚拟机栈负责运行代码，而虚拟机堆负责存储数据。</p>\n<h4 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> 栈</h4>\n<p>概念：</p>\n<ul>\n<li>它是 Java 方法执行的内存模型。栈由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法返回地址，且线程独享。同时如果我们听到局部变量表，那也是在说虚拟机栈，和数据结构上的栈类似，两者都是先进后出的数据结构，只支持出栈和入栈两种操作。\n<ul>\n<li><strong>局部变量表</strong> 主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用</li>\n<li><strong>操作数栈</strong> 主要作为方法调用的中转站使用，用于存放方法执行过程中产生的中间计算结果</li>\n<li><strong>动态链接</strong> 主要服务一个方法需要调用其他方法的场景。</li>\n</ul>\n</li>\n</ul>\n<p>异常：</p>\n<ul>\n<li>如果线程请求的栈的深度大于虚拟机栈的最大深度，就会报 <strong>StackOverflowError</strong> （这种错误经常出现在递归中）。Java 虚拟机也可以动态扩展，但随着扩展会不断地申请内存，当无法申请足够内存时就会报错 <strong>OutOfMemoryError</strong>。</li>\n</ul>\n<p>生命周期：</p>\n<ul>\n<li>对于栈来说，不存在垃圾回收。只要程序运行结束，栈的空间自然就会释放了。栈的生命周期和所处的线程是一致的。</li>\n</ul>\n<p>执行：</p>\n<ul>\n<li>经常说的栈帧数据，说白了在 JVM 中叫栈帧，放到 Java 中其实就是方法，它也是存放在栈中的。</li>\n<li>栈中的数据都是以栈帧的格式存在，它是一个<mark>关于方法和运行期数据的数据集</mark>。比如我们执行一个方法 a，就会对应产生一个栈帧 A1，然后 A1 会被压入栈中。同理方法 b 会有一个 B1，方法 c 会有一个 C1，等到这个线程执行完毕后，栈会先弹出 C1，后 B1,A1。它是一个先进后出，后进先出原则。</li>\n</ul>\n<h4 id=\"堆\"><a class=\"anchor\" href=\"#堆\">#</a> 堆</h4>\n<p>概念：</p>\n<ul>\n<li>JVM 内存会划分为堆内存和非堆内存，堆内存中也会划分为<strong>年轻代</strong>和<strong>老年代</strong>，而非堆内存则为<strong>永久代</strong>。年轻代又会分为<strong> Eden</strong> 和<strong> Survivor</strong> 区。Survivor 也会分为<strong> FromPlace</strong> 和<strong> ToPlace</strong>，toPlace 的 survivor 区域是空的。Eden，FromPlace 和 ToPlace 的默认占比为 <strong>8:1:1</strong>。当然这个东西其实也可以通过一个 -XX:+UsePSAdaptiveSurvivorSizePolicy 参数来根据生成对象的速率动态调整</li>\n<li>堆内存中存放的是对象，垃圾收集就是收集这些对象然后交给 GC 算法进行回收。非堆内存其实我们已经说过了，就是方法区。在 1.8 中已经移除永久代，替代品是一个元空间 (MetaSpace)，最大区别是 metaSpace 是不存在于 JVM 中的，它使用的是本地内存。并有两个参数</li>\n</ul>\n<p>既然堆是随着 JVM 开启的全局资源，不像栈随着线程的开启 / 关闭而创建 / 销毁资源，就需要相应的管理手段，GC 回收。但哪些资源被判定要回收呢？<br />\n<img data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/14/16fa2057cf851442~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"\" /></p>\n<p>有两个基础的计算方法</p>\n<ol>\n<li>\n<p>引用计数器计算：给对象添加一个引用计数器，每次引用这个对象时计数器加一，引用失效时减一，计数器等于 0 时就是不会再次使用的。不过这个方法有一种情况就是出现对象的<mark>循环引用</mark>时 GC 没法回收。</p>\n</li>\n<li>\n<p>可达性分析计算：这是一种类似于二叉树的实现，将一系列的 GC ROOTS 作为起始的存活对象集，从这个节点往下搜索，搜索所走过的路径成为引用链，把能被该集合引用到的对象加入到集合中。搜索当一个对象到 GC Roots 没有使用任何引用链时，则说明该对象是不可用的。主流的商用程序语言，例如 Java，C# 等都是靠这招去判定对象是否存活的。</p>\n<ul>\n<li>在 Java 语言汇总能作为 GC Roots 的对象分为以下几种：</li>\n</ul>\n<ol>\n<li>虚拟机栈（栈帧中的本地方法表）中引用的对象（局部变量）</li>\n<li>方法区中静态变量所引用的对象（静态变量）</li>\n<li>方法区中常量引用的对象</li>\n<li>本地方法栈（即 native 修饰的方法）中 JNI 引用的对象（JNI 是 Java 虚拟机调用对应的 C 函数的方式，通过 JNI 函数也可以创建新的 Java 对象。且 JNI 对于对象的局部引用或者全局引用都会把它们指向的对象都标记为不可回收）</li>\n<li>已启动的且未终止的 Java 线程</li>\n</ol>\n</li>\n</ol>\n<p>这种方法的优点是能够解决循环引用的问题，可它的实现需要耗费大量资源和时间，也需要 GC</p>\n<h4 id=\"区别\"><a class=\"anchor\" href=\"#区别\">#</a> 区别</h4>\n<ol>\n<li>堆和栈区别</li>\n</ol>\n<ul>\n<li>\n<p>堆：主要用于储存实例化的对象，数组。由 JVM 动态分配内存空间。一个 JVM 只有一个堆内存，线程是可以共享数据的。</p>\n</li>\n<li>\n<p>栈：主要用于储存局部变量和对象的引用变量，每个线程都会有一个独立的栈空间，所以线程之间是不共享数据的。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>堆内存和栈内存区别</li>\n</ol>\n<ul>\n<li>\n<p>堆内存：储存的是数组和对象 (其实数组就是对象)，凡是 new 建立的都是在堆中，堆中存放的都是实体 (对象)，实体用于封装数据，而且是封装多个 (实体的多个属性)，如果一个数据消失，这个实体也没有消失，还可以用，所以堆是不会随时释放的，但是栈不一样，栈里存放的都是单个变量，变量被释放了，那就没有了。堆里的实体虽然不会被释放，但是会被当成垃圾，Java 有垃圾回收机制不定时的收取。</p>\n</li>\n<li>\n<p>栈内存：栈内存首先是一片内存区域，存储的都是局部变量，凡是定义在方法中的都是局部变量 (方法外的是全局变量)，for 循环内部定义的也是局部变量，是先加载函数才能进行局部变量的定义，所以方法先进栈，然后再定义变量，变量有自己的作用域，一旦离开作用域，变量就会被释放。栈内存的更新速度很快，因为局部变量的生命周期很短。</p>\n</li>\n</ul>\n<h3 id=\"本地方法栈\"><a class=\"anchor\" href=\"#本地方法栈\">#</a> 本地方法栈</h3>\n<p>和虚拟机栈所发挥的作用非常相似，区别是：<strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p>\n<p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p>\n<p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现  <code>StackOverFlowError</code>  和  <code>OutOfMemoryError</code>  两种错误。</p>\n<h3 id=\"方法区-2\"><a class=\"anchor\" href=\"#方法区-2\">#</a> 方法区</h3>\n<p>方法区属于是 JVM 运行时数据区域的一块逻辑区域，是各个线程共享的内存区域。</p>\n<p>《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，方法区到底要如何实现那就是虚拟机自己要考虑的事情了。也就是说，在不同的虚拟机实现上，方法区的实现是不同的。</p>\n<p>当虚拟机要使用一个类时，它需要读取并解析 Class 文件获取相关信息，再将信息存入到方法区。方法区会存储已被虚拟机加载的 <strong>类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据</strong>。</p>\n<p><strong>方法区和永久代以及元空间是什么关系呢？</strong> 方法区和永久代以及元空间的关系很像 Java 中接口和类的关系，类实现了接口，这里的类就可以看作是永久代和元空间，接口可以看作是方法区，也就是说永久代以及元空间是 HotSpot 虚拟机对虚拟机规范中方法区的两种实现方式。并且，永久代是 JDK 1.8 之前的方法区实现，JDK 1.8 及以后方法区的实现变成了元空间。</p>\n<h3 id=\"运行时常量池\"><a class=\"anchor\" href=\"#运行时常量池\">#</a> 运行时常量池</h3>\n<p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有用于存放编译期生成的各种字面量（Literal）和符号引用（Symbolic Reference）的 <strong>常量池表 (Constant Pool Table)</strong> 。</p>\n<ul>\n<li>字面量是源代码中的固定值的表示法，即通过字面我们就能知道其值的含义。字面量包括整数、浮点数和字符串字面量。常见的符号引用包括类符号引用、字段符号引用、方法符号引用、接口方法符号。</li>\n</ul>\n<h3 id=\"字符串常量池\"><a class=\"anchor\" href=\"#字符串常量池\">#</a> 字符串常量池</h3>\n<p><strong>字符串常量池</strong> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p>\n<h3 id=\"hotspot虚拟机案例\"><a class=\"anchor\" href=\"#hotspot虚拟机案例\">#</a> HotSpot 虚拟机案例</h3>\n<h4 id=\"对象的创建\"><a class=\"anchor\" href=\"#对象的创建\">#</a> 对象的创建</h4>\n<blockquote>\n<p>Step1: 类加载检查</p>\n</blockquote>\n<p>虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p>\n<blockquote>\n<p>Step2: 分配内存</p>\n</blockquote>\n<p>在<strong>类加载检查</strong>通过后，接下来虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p>\n<ul>\n<li>\n<p><strong>内存分配的两种方式</strong> （补充内容，需要掌握）：</p>\n<ul>\n<li>指针碰撞：\n<ul>\n<li>适用场合：堆内存规整（即没有内存碎片）的情况下。</li>\n<li>原理：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界指针，只需要向着没用过的内存方向将该指针移动对象内存大小位置即可。</li>\n<li>使用该分配方式的 GC 收集器：Serial, ParNew</li>\n</ul>\n</li>\n<li>空闲列表：\n<ul>\n<li>适用场合：堆内存不规整的情况下。</li>\n<li>原理：虚拟机会维护一个列表，该列表中会记录哪些内存块是可用的，在分配的时候，找一块儿足够大的内存块儿来划分给对象实例，最后更新列表记录。</li>\n<li>使用该分配方式的 GC 收集器：CMS</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是 &quot;标记 - 清除&quot;，还是 &quot;标记 - 整理&quot;（也称作 &quot;标记 - 压缩&quot;），值得注意的是，复制算法内存也是规整的。</p>\n<ul>\n<li>\n<p><strong>内存分配并发问题（补充内容，需要掌握）</strong></p>\n<p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p>\n<ul>\n<li><strong>CAS + 失败重试：</strong> CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</strong></li>\n<li><strong>TLAB：</strong> 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Step3: 初始化零值</p>\n</blockquote>\n<p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p>\n<blockquote>\n<p>Step4: 设置对象头</p>\n</blockquote>\n<p>初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>\n<blockquote>\n<p>step5 - 执行 - init - 方法</p>\n</blockquote>\n<p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始， <code>&lt;init&gt;</code>  方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行  <code>&lt;init&gt;</code>  方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p>\n<h4 id=\"对象的内存布局\"><a class=\"anchor\" href=\"#对象的内存布局\">#</a> 对象的内存布局</h4>\n<p>在 Hotspot 虚拟机中，对象在内存中的布局可以分为 3 块区域：<strong>对象头</strong>、<strong>实例数据</strong>和<strong>对齐填充</strong>。</p>\n<p><strong>Hotspot 虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的运行时数据</strong>（哈希码、GC 分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>\n<p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p>\n<p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>\n<h4 id=\"对象的访问定位\"><a class=\"anchor\" href=\"#对象的访问定位\">#</a> 对象的访问定位</h4>\n<p>建立对象就是为了使用对象，我们的 Java 程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，目前主流的访问方式有：<strong>使用句柄</strong>、<strong>直接指针</strong>。</p>\n<h5 id=\"句柄\"><a class=\"anchor\" href=\"#句柄\">#</a> 句柄</h5>\n<p>如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与对象类型数据各自的具体地址信息</p>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/java/jvm/access-location-of-object-handle.png\" alt=\"\" /></p>\n<h5 id=\"直接指针\"><a class=\"anchor\" href=\"#直接指针\">#</a> 直接指针</h5>\n<p>如果使用直接指针访问，reference 中存储的直接就是对象的地址。</p>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/java/jvm/access-location-of-object-handle-direct-pointer.png\" alt=\"\" /></p>\n<p>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。</p>\n<p>HotSpot 虚拟机主要使用的就是这种方式来进行对象访问。</p>\n<h2 id=\"垃圾回收算法\"><a class=\"anchor\" href=\"#垃圾回收算法\">#</a> 垃圾回收算法</h2>\n<h3 id=\"标记清除算法\"><a class=\"anchor\" href=\"#标记清除算法\">#</a> 标记清除算法</h3>\n<p>标记清除算法就是分为 “标记” 和 “清除” 两个阶段。标记出所有需要回收的对象，标记结束后统一回收。这个套路很简单，也存在不足，后续的算法都是根据这个基础来加以改进的。</p>\n<ul>\n<li>其实它就是把已死亡的对象标记为空闲内存，然后记录在一个空闲列表中，当我们需要 new 一个对象时，内存管理模块会从空闲列表中寻找空闲的内存来分给新的对象。</li>\n<li>不足的方面就是标记和清除的效率比较低下。且这种做法会让内存中的碎片非常多。这个导致了如果我们需要使用到较大的内存块时，无法分配到足够的连续内存。<br />\n<img data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa593b220bd65b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"\" /></li>\n</ul>\n<h3 id=\"复制算法\"><a class=\"anchor\" href=\"#复制算法\">#</a> 复制算法</h3>\n<p>为了解决效率问题，复制算法就出现了。</p>\n<ul>\n<li>它将可用内存按容量划分成两等分，每次只使用其中的一块。和 survivor 一样也是用 from 和 to 两个指针这样的玩法。</li>\n<li>fromPlace 存满了，就把存活的对象 copy 到另一块 toPlace 上，然后交换指针的内容。这样就解决了碎片的问题。</li>\n</ul>\n<p>这个算法的代价就是把内存缩水了，堆内存的使用效率会变得十分低<br />\n<img data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa599ea6f4ce56~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"\" /></p>\n<h3 id=\"标记整理算法\"><a class=\"anchor\" href=\"#标记整理算法\">#</a> 标记整理算法</h3>\n<p>复制算法在对象存活率高的时候会有一定的效率问题，标记过程仍然与 “标记 - 清除” 算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存</p>\n<p><img data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa59da25a1629e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"\" /></p>\n<h3 id=\"分代收集算法\"><a class=\"anchor\" href=\"#分代收集算法\">#</a> 分代收集算法</h3>\n<p>根据对象存活周期的不同将内存划分为几块。一般是把 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p>\n<ul>\n<li>在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。</li>\n<li>而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用 “标记 - 清理” 或者 “标记 - 整理” 算法来进行回收。</li>\n</ul>\n<h2 id=\"调优\"><a class=\"anchor\" href=\"#调优\">#</a> 调优</h2>\n<p>针对堆内存主要是：不同代的分配进行调整、最大最小堆内存调整</p>\n<ul>\n<li>所有线程共享数据区大小 = 新生代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为 64m。所以 java 堆中增大年轻代后，将会减小年老代大小（因为老年代的清理是使用 full gc，所以老年代过小的话反而是会增多 fullgc 的）。此值对系统性能影响较大，Sun 官方推荐配置为 java 堆的 3/8</li>\n</ul>\n<p>对于栈就是调整每个线程栈空间的大小</p>\n<ul>\n<li>JDK5.0 以后每个线程堆栈大小为 1M，以前每个线程堆栈大小为 256K。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000 左右</li>\n</ul>\n<h1 id=\"jmm\"><a class=\"anchor\" href=\"#jmm\">#</a> JMM</h1>\n<p>JMM 是一个抽象的概念，它描述了一系列的规则或者规范，用来解决多线程的共享变量问题，比如 volatile、synchronized 等关键字就是围绕 JMM 的语法。这里所说的变量，包括实例字段、静态字段，但不包括局部变量和方法参数，因为后者是线程私有的，不存在竞争问题。</p>\n<p><strong>Q</strong>：随着 CPU 和内存的发展速度差异的问题，导致 CPU 的速度远快于内存，所以现在的 CPU 加入了高速缓存，高速缓存一般可以分为 L1、L2、L3 三级缓存。基于上面的例子我们知道了这导致了缓存一致性的问题，所以加入了缓存一致性协议，同时导致了内存可见性的问题，而编译器和 CPU 的重排序导致了原子性和有序性的问题，JMM 内存模型正是对多线程操作下的一系列规范约束，因为不可能让陈雇员的代码去兼容所有的 CPU，JVM 试图定义一种统一的内存模型，能将各种底层硬件，以及操作系统的内存访问差异进行封装，使 Java 程序在不同硬件及操作系统上都能达到相同的并发效果。</p>\n<p>JMM 规定了内存主要划分为<strong>主内存</strong>和<strong>工作内存</strong>两种。此处的主内存和工作内存跟 JVM 内存划分（堆、栈、方法区）是在不同的层次上进行的。</p>\n<p>如果非要对应起来，主内存对应的是 Java 堆中的对象实例部分，工作内存对应的是栈中的部分区域。更底层的，主内存可以认为就是物理内存，Java 内存模型中实际就是虚拟机内存的一部分。而工作内存就是 CPU 缓存，他有可能是寄存器也有可能是 L1\\L2\\L3 缓存，都是有可能的。</p>\n<p>CPU 缓存，他有可能是寄存器也有可能是 L1\\L2\\L3 缓存，都是有可能的。</p>\n<p>（1）<strong>read</strong>（读取）作用于主内存，它把变量从主内存传动到线程的工作内存中，供后面的 load 动作使用。</p>\n<p>（2）<strong>load</strong>（载入）作用于工作内存，它把 read 操作的值放入到工作内存中的变量副本中。</p>\n<p>（3）<strong>store</strong>（存储）作用于工作内存，它把工作内存中的一个变量传送给主内存中，以备随后的 write 操作使用。</p>\n<p>（4）<strong>write</strong>（写入）作用于主内存，它把 store 传送值放到主内存中的变量中。</p>\n<p>（5）<strong>use</strong>（使用）作用于工作内存，它把工作内存中的值传递给执行引擎，每当虚拟机遇到一个需要使用这个变量的指令时，将会执行这个动作。</p>\n<p>（6）<strong>assign</strong>（赋值）作用于工作内存，它把从执行引擎获取的值赋值给工作内存中的变量，每当虚拟机遇到一个给变量赋值的指令时，执行该操作。</p>\n<p>（7）<strong>lock</strong>（锁定）作用于主内存，把变量标记为线程独占状态。</p>\n<p>（8）<strong>unlock</strong>（解锁）作用于主内存，它将释放独占状态。</p>\n<p><img data-src=\"https://img-hello-world.oss-cn-beijing.aliyuncs.com/a91c17312674d3c0900c5779ee60e3b2.png\" alt=\"\" /><br />\n把一个变量从主内存复制到工作内存，就要顺序执行 read 和 load；而把变量从工作内存同步回主内存，就要顺序执行 store 和 write 操作。</p>\n<h2 id=\"三大特征\"><a class=\"anchor\" href=\"#三大特征\">#</a> 三大特征</h2>\n<p><strong>（1）原子性</strong></p>\n<p>JMM 保证了 read、load、assign、use、store 和 write 六个操作具有原子性，可以认为除了 long 和 double 类型以外，对其他基本数据类型所对应的内存单元的访问读写都是原子的。</p>\n<p>如果想要一个颗粒度更大的原子性保证，就可以使用 lock 和 unlock 这两个操作。</p>\n<p><strong>（2）可见性</strong></p>\n<p>可见性是指当一个线程修改了共享变量的值，其他线程也能立即感知到这种变化。</p>\n<p>我们从前面的图中可以看到，要保证这种效果，需要经历多次操作。一个线程对变量的修改，需要先同步给主内存，赶在另外一个线程的读取之前刷新变量值。</p>\n<p>volatile、synchronized、final 和锁，都是保证可见性的方式。</p>\n<p>这里要着重提一下 volatile，因为它的特点最显著。使用了 volatile 关键字的变量，每当变量的值有变动时，都会把更改立即同步到主内存中；而如果某个线程想要使用这个变量，则先要从主存中刷新到工作内存上，这样就确保了变量的可见性。</p>\n<p>而锁和同步关键字就比较好理解一些，它是把更多个操作强制转化为原子化的过程。由于只有一把锁，变量的可见性就更容易保证。</p>\n<p><strong>（3）有序性</strong></p>\n<p>Java 程序很有意思，从上面的 add 操作可以看出，如果在线程中观察，则所有的操作都是有序的；而如果在另一个线程中观察，则所有的操作都是无序的。</p>\n<p>除了多线程这种无序性的观测，无序的产生还来源于<strong>指令重排</strong>。</p>\n<p>指令重排序是 JVM 为了优化指令，来提高程序运行效率的，在不影响单线程程序执行结果的前提下，按照一定的规则进行指令优化。在某些情况下，这种优化会带来一些执行的逻辑问题，在并发执行的情况下，按照不同的逻辑会得到不同的结果。</p>\n<p>我们可以看一下 Java 语言中默认的一些 “有序” 行为，也就是 ** 先行发生（happens-before）** 原则，这些可能在写代码的时候没有感知，因为它是一种默认行为。</p>\n<p>先行发生是一个非常重要的概念，如果操作 A 先行发生于操作 B，那么操作 A 产生的影响能够被操作 B 感知到。</p>\n<p>下面的原则是《Java 并发编程实践》这本书中对一些法则的描述。</p>\n<ul>\n<li><strong>程序次序</strong>：一个线程内，按照代码顺序，写在前面的操作先行发生于写在后面的操作。</li>\n<li><strong>监视器锁定</strong>：unLock 操作先行发生于后面对同一个锁的 lock 操作。</li>\n<li><strong>volatile</strong>：对一个变量的写操作先行发生于后面对这个变量的读操作。</li>\n<li><strong>传递规则</strong>：如果操作 A 先行发生于操作 B，而操作 B 又先行发生于操作 C，则可以得出操作 A 先行发生于操作 C。</li>\n<li><strong>线程启动</strong>：对线程 start () 的操作先行发生于线程内的任何操作。</li>\n<li><strong>线程中断</strong>：对线程 interrupt () 的调用先行发生于线程代码中检测到中断事件的发生，可以通过 Thread.interrupted () 方法检测是否发生中断。</li>\n<li><strong>线程终结规则</strong>：线程中的所有操作先行发生于检测到线程终止，可以通过 Thread.join ()、Thread.isAlive () 的返回值检测线程是否已经终止。</li>\n<li><strong>对象终结规则</strong>：一个对象的初始化完成先行发生于它的 finalize () 方法的开始</li>\n</ul>\n<p>以上这些都是如何保证实现的？</p>\n<h2 id=\"内存屏障\"><a class=\"anchor\" href=\"#内存屏障\">#</a> 内存屏障</h2>\n<p>内存屏障（Memory Barrier）用于控制在特定条件下的重排序和内存可见性问题。JMM 内存屏障可分为读屏障和写屏障，Java 的内存屏障实际上也是上述两种的组合，完成一系列的屏障和数据同步功能。Java 编译器在生成字节码时，会在执行指令序列的适当位置插入内存屏障来限制处理器的重排序。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 保证 load1 数据的装载优先于 load2 以及所有后续装载指令的装载。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>load1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">LoadLoad</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>load2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 保证 load1 数据装载优先于 store2 以及后续的存储指令刷新到内存。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>load1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">LoadStore</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>store2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 保证 store1 数据对其他处理器可见，优先于 store2 以及所有后续存储指令的存储。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>store1 </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">StoreStore</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>store</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 在 Load2 及后续所有读取操作执行前，保证 Store1 的写入对所有处理器可见。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>store1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">StoreLoad</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>load2</pre></td></tr></table></figure><h1 id=\"并发\"><a class=\"anchor\" href=\"#并发\">#</a> 并发</h1>\n<h2 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h2>\n<ul>\n<li>Hotspot JVM 中的 Java 线程与原生操作系统线程有直接的映射关系。当线程本地存储、缓冲区分配、同步对象、栈、程序计数器等准备好以后，就会创建一个操作系统原生线程。Java 线程结束，原生线程随之被回收。操作系统负责调度所有线程，并把它们分配到任何可用的 CPU 上。当原生线程初始化完毕，就会调用 Java 线程的 run () 方法。当线程结束时，会释放原生线程和 Java 线程的所有资源。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>虚拟机线程（VM thread）</th>\n<th>这个线程等待 JVM 到达安全点操作出现。这些操作必须要在独立的线程里执行，因为当堆修改无法进行时，线程都需要 JVM 位于安全点。这些操作的类型有：stop-the\u0002world 垃圾回收、线程栈 dump、线程暂停、线程偏向锁（biased locking）解除。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>周期性任务线程</td>\n<td>这线程负责定时器事件（也就是中断），用来调度周期性操作的执行。</td>\n</tr>\n<tr>\n<td>GC 线程</td>\n<td>这些线程支持 JVM 中不同的垃圾回收活动。</td>\n</tr>\n<tr>\n<td>编译器线程</td>\n<td>这些线程在运行时将字节码动态编译成本地平台相关的机器码。</td>\n</tr>\n<tr>\n<td>信号分发线程</td>\n<td>这个线程接收发送到 JVM 的信号并调用适当的 JVM 方法处理。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"状态生命周期\"><a class=\"anchor\" href=\"#状态生命周期\">#</a> 状态 / 生命周期</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190825102819846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0YWt5dWJp,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<ol>\n<li>\n<p>新建状态<br />\n使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start () 这个线程。</p>\n</li>\n<li>\n<p>就绪状态<br />\n当线程对象调用了 start () 方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待 JVM 里线程调度器的调度。</p>\n</li>\n<li>\n<p>运行状态<br />\n如果就绪状态的线程获取 CPU 资源，就可以执行 run ()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>\n</li>\n<li>\n<p>阻塞状态<br />\n如果一个线程执行了 sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：</p>\n<ul>\n<li>等待阻塞，运行状态中的线程执行 wait () 方法，使线程进入到等待阻塞状态。wait () 释放锁</li>\n<li>同步阻塞，线程在获取 synchronized 同步锁失败 (因为同步锁被其他线程占用)。</li>\n<li>其他阻塞，通过调用线程的 sleep () 或 join () 发出了 I/O 请求时，线程就会进入到阻塞状态。当 sleep () 状态超时，join () 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。sleep () 不释放锁</li>\n</ul>\n</li>\n<li>\n<p>死亡状态<br />\n一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p>\n</li>\n</ol>\n<h3 id=\"创建方法\"><a class=\"anchor\" href=\"#创建方法\">#</a> 创建方法</h3>\n<h5 id=\"继承thread类\"><a class=\"anchor\" href=\"#继承thread类\">#</a> 继承 Thread 类</h5>\n<ol>\n<li>创建一个继承与 Thread 的子类</li>\n<li>重写 Thread 的 run（）方法</li>\n<li>创建 Thread 类子类的对象</li>\n<li>通过这个对象调用 start（）</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span>  <span class=\"token class-name\">Mythread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 创建一个继承与 Thread 的子类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 重写 Thread 的 run（）方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分支线程--->\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 创建 Thread 类的子类对象  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">Mythread</span> mythread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mythread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// 不会启动线程，不会分配新的分支栈。（这种方式就是单线程。）  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmythread<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//start（）启动一个分支线程  </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// mythread.start();  </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程--->\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info no-icon\">\n<ul>\n<li>t.run () 不会启动线程，只是普通的调用方法而已。不会分配新的分支栈。（这种方式就是单线程。）</li>\n<li>t.start () 方法的作用是：启动一个分支线程，在 JVM 中开辟一个新的栈空间，这段代码任务完成之后，瞬间就结束了。<br />\n这段代码的任务只是为了开启一个新的栈空间，只要新的栈空间开出来，start () 方法就结束了。线程就启动成功了。启动成功的线程会自动调用 run 方法，并且 run 方法在分支栈的栈底部（压栈）。</li>\n<li>run 方法在分支栈的栈底部，main 方法在主栈的栈底部。run 和 main 是平级的。</li>\n<li>Thread 还有个 Yield 方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法，而且只保证当前线程放弃 CPU 占用而不能保证使其它线程一定能占用 CPU，执行 yield () 的线程有可能在进入到暂停状态后马上又被执行。</li>\n</ul>\n</div>\n<p>终止 Thread 方法：</p>\n<ol>\n<li>使用退出标志，使线程正常退出，也就是当 run 方法完成后线程终止</li>\n<li>使用 stop 方法强行终止，但是不推荐这个方法，因为 stop 和 suspend 及 resume 一样都是过期作废的方法</li>\n<li>使用 interrupt 方法中断线程</li>\n</ol>\n<h5 id=\"匿名创建thread类子类\"><a class=\"anchor\" href=\"#匿名创建thread类子类\">#</a> 匿名创建 Thread 类子类</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"thread中的常用方法\"><a class=\"anchor\" href=\"#thread中的常用方法\">#</a> Thread 中的常用方法</h5>\n<ol>\n<li>currentThread ()：静态方法，返回当前代码的线程</li>\n<li>getName ()：获得当先线程的名字</li>\n<li>setName ()：设置当前线程的名字</li>\n<li>yield（）：释放当前 cpu 的执行权</li>\n<li>join（）：在线程 a 中调用线程 b 的 join（）；则线程 a 进入阻塞状态，等线程 b 结束后结束阻塞状态，哪怕 b 是 start（）单独开的栈</li>\n<li>sleep（Long militime）让当前线程阻断指定的 militime 毫秒，此时为阻塞状态</li>\n<li>isAlive（）；判断线程是否存活</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:Thread</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token static\">sleep</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mythread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻断 100 毫秒  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出线程名  </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Mythread</span> mythread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mythread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        mythread<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置线程名  </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        mythread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    mythread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 阻断主线程  </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻断 100 毫秒  </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取主前线程的名字  </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 判断 mythread 线程是否还存活  </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mythread<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"线程的优先级\"><a class=\"anchor\" href=\"#线程的优先级\">#</a> 线程的优先级</h5>\n<ul>\n<li>MAX_PRIORITY:10</li>\n<li>MIN_PRIORITY:1</li>\n<li>NORM_PRIORITY:5 (默认)<br />\n 使用方法 <code>setPriority()</code> <br />\n<strong> 注意：高优先级抢占低优先级线程 cpu，但不代表一定先执行完高优先级再执行低优先级</strong></li>\n</ul>\n<h5 id=\"抢票案例\"><a class=\"anchor\" href=\"#抢票案例\">#</a> 抢票案例</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span>  piao <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> tickect<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tickect<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"卖了\"</span><span class=\"token operator\">+</span>tickect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            tickect<span class=\"token operator\">=</span>tickect<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        piao p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">piao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 给 p1 设定优先级</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        p1<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_PRIORITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        piao p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">piao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        piao p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">piao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        p1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"窗口一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        p2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"窗口二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        p3<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"窗口三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        p1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        p2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        p3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"实现runnable接口\"><a class=\"anchor\" href=\"#实现runnable接口\">#</a> 实现 Runnable 接口</h4>\n<ol>\n<li>创建一个实现了 Runnable 接口的类</li>\n<li>重写 run（）；</li>\n<li>创建实现 Runnable 类的对象；</li>\n<li>将此对象作为参数传递到 Thread 类的构造器中，创建 Thread 类的对象；</li>\n<li>通过 Thread 类的对象调用 start（）；</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个实现了 Runnable 接口的类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> mythread <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tickect <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 重写 run（）；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tickect <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"卖了第\"</span> <span class=\"token operator\">+</span> tickect <span class=\"token operator\">+</span> <span class=\"token string\">\"张票\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\ttickect<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 创建实现类的对象；</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tmythread mythread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">mythread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 将此对象作为参数传递到 Thread 类的构造器中，创建 Thread 类的对象；</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>mythread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>mythread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>mythread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一号窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二号窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tt3<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"三号窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_PRIORITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// 通过 Thread 类的对象调用 start（）；</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tt3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>优势：实现的方式没有类的单继承的局限性，实现的方式更适合处理多个共享数据的类型</p>\n<h5 id=\"采用匿名内部类创建\"><a class=\"anchor\" href=\"#采用匿名内部类创建\">#</a> 采用匿名内部类创建：</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建线程对象，采用匿名内部类方式。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Thread</span> mythread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mythread线程---> \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        mythread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main线程---> \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"实现callable接口\"><a class=\"anchor\" href=\"#实现callable接口\">#</a> 实现 Callable 接口</h4>\n<p>优点:</p>\n<ol>\n<li>call 方法相比于 run 方法可以有返回值</li>\n<li>可以抛出异常</li>\n<li>支持泛型</li>\n</ol>\n<p>操作步骤:</p>\n<ol>\n<li>创建一个实现 Callable 的实现类</li>\n<li>实现 call 方法，将操作声明在 call 方法中</li>\n<li>创建 Callable 实现类的对象</li>\n<li>将此实现类的对象作为参数，传递到 FutureTask 构造器，创建 FutureTask 对象</li>\n<li>将 FutureTask 的对象作为参数传递到 Thread 类的构造器中，创建 Thread 对象</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 创建一个实现 Callable 的实现类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> call <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//2. 实现 call 方法，将操作声明在 call 方法中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            sum<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span>  <span class=\"token keyword\">class</span> text01 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//3. 创建 Callable 实现类的对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        call call<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//4, 将此实现类的对象作为参数，传递到 FutureTask 构造器，创建 FutureTask 对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">FutureTask</span> futureTask<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token comment\">//5. 将 FutureTask 的对象作为参数传递到 Thread 类的构造器中，创建 Thread 对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">Object</span> sum <span class=\"token operator\">=</span> futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总计\"</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"runnable和callable的区别\"><a class=\"anchor\" href=\"#runnable和callable的区别\">#</a> Runnable 和 Callable 的区别</h4>\n<p>Runnable 和 Callable 都是用于创建线程任务的接口，它们之间的主要区别在于以下几点：</p>\n<ol>\n<li>返回值\n<ul>\n<li>Runnable 接口的 run () 方法没有返回值，因此线程任务无法返回执行结果。</li>\n<li>Callable 接口的 call () 方法可以返回执行结果，并且可以抛出受检查的异常。</li>\n</ul>\n</li>\n<li>异常处理\n<ul>\n<li>Runnable 接口的 run () 方法不能抛出受检查的异常，只能抛出非受检查的 RuntimeException。</li>\n<li>Callable 接口的 call () 方法可以抛出任何类型的异常，包括受检查的异常。</li>\n</ul>\n</li>\n<li>兼容性\n<ul>\n<li>Callable 接口是在 Java 5 中引入的新接口，而 Runnable 接口是在 Java 1.0 中就存在的。</li>\n<li>Callable 接口提供了更多的灵活性和功能，但 Runnable 接口仍然是使用较多的接口之一，因为它的简单性和兼容性。</li>\n</ul>\n</li>\n<li>并发集合\n<ul>\n<li>Callable 接口通常与 ExecutorService 和 Future 配合使用，以支持异步任务执行和获取结果。</li>\n<li>Runnable 接口通常与 Thread 类或者 Executor 框架一起使用，用于执行简单的线程任务。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>受检查的异常：这种在编译时被强制检查的异常称为 &quot;受检查的异常&quot;。即在方法的声明中声明的异常</li>\n<li>不受检查的异常：在方法的声明中没有声明，但在方法的运行过程中发生的各种异常被称为 &quot;不被检查的异常&quot;。这种异常是错误，会被自动捕获</li>\n</ul>\n<h2 id=\"线程池\"><a class=\"anchor\" href=\"#线程池\">#</a> 线程池</h2>\n<p>每个线程都有自己的调用栈，自己的寄存器环境，创建一个新线程，CPU 需要执行额外的命令为这些线程分配对应的内存。此外，线程创建后并不会马上被执行，它需要被列入操作系统的调度中。同样，销毁线程的时候也一样需要清理现场。另外，线程切换的时候 CPU 需要保存当前线程的程序计数器，寄存器中的值，打开的文件等信息，因此创建过多的线程，也会增加线程切换带来的 CPU 开销。所以应该<strong>尽量复用已经创建好的线程</strong>，<strong>线程池就是为解决此问题而生的</strong>。</p>\n<p>好处:</p>\n<ol>\n<li>提高响应速度，在执行大量异步任务时提高了性能</li>\n<li>降低资源消耗，节约系统的开销。线程的创建和销毁由线程池维护，一个线程在完成任务后并不会立即销毁，而是由后续的任务复用这个线程，从而减少线程的创建和销毁。</li>\n<li>便于线程管理，Java 内置的一套 ExecutorService 线程池相关的 api，可以更方便的控制线程的最大并发数、线程的定时任务、单线程的顺序执行等</li>\n</ol>\n<p>实现方法:</p>\n<ol>\n<li>提供指定线程数量的线程池</li>\n<li>执行指定的线程操作，需要实现 Runnable 接口或者 Callable 接口实现类的对象</li>\n<li>将实例化的对象作为参数 执行 service.execute ();</li>\n<li>关闭线程池</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:ThreadPoolDemo</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> thread <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> thread0 <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> pool <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//1 提供指定线程数量的线程池</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> service <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">//2 执行指定的线程操作，需要实现 Runnable 接口或者 Callable 接口实现类的对象</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        thread thread1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        thread0 thread2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">thread0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">//3 将实例化的对象作为参数 执行 service.execute ();</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        service<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>thread1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        service<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>thread2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//service.submit (); 适用于 callable</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">ThreadPoolExecutor</span> service1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">)</span>service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        service1<span class=\"token punctuation\">.</span><span class=\"token function\">setCorePoolSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">//4 关闭线程池</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        service<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// 直接使用 ThreadPoolExecutor</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token class-name\">ThreadPoolExecutor</span> pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 任务 1</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        pool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--helloWorld_001--\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 任务 2</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        pool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--helloWorld_002--\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>corePoolSize：核心池的大小</li>\n<li>maximumPoolSize：最大线程数</li>\n<li>keepAliveTime：线程没有任务时最多保存多长时间后终止</li>\n<li><strong>workQueue</strong> ：当线程数目超过核心线程数时用于保存任务的队列。主要有 3 种类型的 BlockingQueue 可供选择：无界队列，有界队列和同步移交。将在下文中详细阐述。从参数中可以看到，此队列仅保存实现 Runnable 接口的任务。 别看这个参数位置很靠后，但是真的很重要，因为楼主的坑就因这个参数而起，这些细节有必要仔细了解清楚</li>\n<li>threadFactory： 执行程序创建新线程时使用的工厂</li>\n<li>handler：阻塞队列已满且线程数达到最大值时所采取的饱和策略。java 默认提供了 4 种饱和策略的实现方式：中止、抛弃、抛弃最旧的、调用者运行。将在下文中详细阐述。</li>\n</ul>\n<p><strong>无界队列</strong></p>\n<p>队列大小无限制，常用的为无界的 LinkedBlockingQueue，使用该队列做为阻塞队列时要尤其当心，当任务耗时较长时可能会导致大量新任务在队列中堆积最终导致 OOM。阅读代码发现，Executors.newFixedThreadPool 采用就是 LinkedBlockingQueue，而楼主踩到的就是这个坑，当 QPS 很高，发送数据很大，大量的任务被添加到这个无界 LinkedBlockingQueue 中，导致 cpu 和内存飙升服务器挂掉。</p>\n<p><strong>有界队列</strong></p>\n<p>常用的有两类，一类是遵循 FIFO 原则的队列如 ArrayBlockingQueue，另一类是优先级队列如 PriorityBlockingQueue。使用有界队列时队列大小需和线程池大小互相配合，线程池较小有界队列较大时可减少内存消耗，降低 cpu 使用率和上下文切换，但是可能会限制系统吞吐量。</p>\n<p><strong>同步移交队列</strong></p>\n<p>如果不希望任务在队列中等待而是希望将任务直接移交给工作线程，可使用 SynchronousQueue 作为等待队列。SynchronousQueue 不是一个真正的队列，而是一种线程之间移交的机制。要将一个元素放入 SynchronousQueue 中，必须有另一个线程正在等待接收这个元素。只有在使用无界线程池或者有饱和策略时才建议使用该队列。</p>\n<p><strong>四种线程池解析</strong>：</p>\n<ul>\n<li>newSingleThreadExecutor：创建一个单线程的线程池，此线程池保证所有任务的执行顺序按照任务的提交顺序执行</li>\n<li>newFixedThreadPool：创建固定大小的线程池，每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小</li>\n<li>newCachedThreadPool：创建一个可缓存的线程池，此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说 JVM）能够创建的最大线程大小</li>\n<li>newScheduledThreadPool：创建一个大小无限的线程池，此线程池支持定时以及周期性执行任务的需求</li>\n</ul>\n<p><strong>简述对线程池的理解</strong>：<br />\n如果问到了这样的问题，可以展开的说一下线程池如何用、线程池的好处、线程池的启动策略）合理利用线程池能够带来三个好处</p>\n<ul>\n<li>有以上几种创建，对应不同的情形，其中了解过第二种，有个最小和最大的两个参数，小于 corePoolSize 时，有任务了直接创建，大于时添加进队列，询问是否大于最大，没到则创建。若阻塞队列和当前线程数等于最大，则抛异常。</li>\n<li>前面最开始的好处：降低消耗、提高速度、便于管理</li>\n<li>讲下队列、讲下 handle</li>\n</ul>\n<h4 id=\"复用及原理\"><a class=\"anchor\" href=\"#复用及原理\">#</a> 复用及原理</h4>\n<p>假设现在有 100 个任务，我们创建一个固定线程的线程池（FixedThreadPool），核心线程数和最大线程数都是 3，那么当这个 100 个任务执行完，都只会使用三个线程。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FixedThreadPoolDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-> 执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pool-1-thread-1-<span class=\"token operator\">></span> 执行</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pool-1-thread-2-<span class=\"token operator\">></span> 执行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pool-1-thread-3-<span class=\"token operator\">></span> 执行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pool-1-thread-1-<span class=\"token operator\">></span> 执行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pool-1-thread-3-<span class=\"token operator\">></span> 执行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pool-1-thread-2-<span class=\"token operator\">></span> 执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pool-1-thread-3-<span class=\"token operator\">></span> 执行</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pool-1-thread-1-<span class=\"token operator\">></span> 执行</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><ul>\n<li>线程池将线程和任务进行解耦，线程是线程，任务是任务，摆脱了之前通过 Thread 创建线程时的一个线程必须对应一个任务的限制</li>\n<li>在线程池中，同一个线程可以从阻塞队列中不断获取新任务来执行，其核心原理在于线程池对 Thread 进行了封装，并不是每次执行任务都会调用 Thread.start () 来创建新线程，而是让每个线程去执行一个 “循环任务”</li>\n<li>在这个 “循环任务” 中不停的检查是否有任务需要被执行，如果有则直接执行，也就是调用任务中的 run 方法，将 run 方法当成一个普通的方法执行，通过这种方式将只使用固定的线程就将所有任务的 run 方法串联起来。</li>\n</ul>\n<div class=\"note default no-icon\">\n<ul>\n<li>当池中正在运行的线程数（包括空闲线程数）大于等于 corePoolSize 时，新插入的任务进入 workQueue 排队 (如果 workQueue 长度允许)，等待空闲线程来执行</li>\n<li>当队列里的任务达到上限，并且池中正在进行的线程小于 maxinumPoolSize, 对于新加入的任务，新建线程</li>\n<li>队列里的任务达到上限，并且池中正在运行的线程等于 maximumPoolSize，对于新加入的任务，执行拒绝策略（线程池默认的策略是抛异常）</li>\n</ul>\n</div>\n<h4 id=\"拒绝策略\"><a class=\"anchor\" href=\"#拒绝策略\">#</a> 拒绝策略</h4>\n<ol>\n<li>ThreadPoolExecutor.AbortPolicy：丢弃任务并抛出 RejectedExecutionException 异常。</li>\n<li>ThreadPoolExecutor.DiscardPolicy：丢弃任务，但是不抛出异常。</li>\n<li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新提交被拒绝的任务</li>\n<li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程（提交任务的线程）处理该任务</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXdlbmZlbmc1MjAvYXJ0aWNsZS9kZXRhaWxzLzEwNzAxMzY2NQ==\">源码解析</span></p>\n<div class=\"note info no-icon\">\n<p>核心就是：</p>\n<ul>\n<li>通过取 Worker 的 firstTask 或者 getTask 方法从 workQueue 中取出了新任务，并直接调用 Runnable 的 run 方法来执行任务，也就是如之前所说的，每个线程都始终在一个大循环中，反复获取任务，然后执行任务，从而实现了线程的复用</li>\n</ul>\n</div>\n<h2 id=\"threadlocal\"><a class=\"anchor\" href=\"#threadlocal\">#</a> ThreadLocal</h2>\n<p><code>Thread</code>  类有一个类型为 <code>ThreadLocal.ThreadLocalMap</code>  的实例变量 <code>threadLocals</code> ，也就是说每个线程有一个自己的 <code>ThreadLocalMap</code>  (数组实现)<br />\n <code>ThreadLocal</code>  对象可以提供线程局部变量，每个线程 <code>Thread</code>  拥有一份自己的<strong>副本变量</strong>，多个线程互不干扰</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:demo</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> messages <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocalTest</span><span class=\"token punctuation\">></span></span> holder <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">.</span><span class=\"token function\">withInitial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocalTest</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        holder<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> messages <span class=\"token operator\">=</span> holder<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        holder<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size: \"</span> <span class=\"token operator\">+</span> holder<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> messages<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">ThreadLocalTest</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>holder<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">ThreadLocalTest</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">[</span>test<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>size<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>ThreadLocal</code>  的 key 是<strong>弱引用</strong>，那么在  <code>ThreadLocal.get()</code>  的时候，发生<strong> GC</strong> 之后，key 是否为<strong> null</strong>？</p>\n<ul>\n<li>首先关于引用：\n<ul>\n<li><strong>强引用</strong>：我们常常 new 出来的对象就是强引用类型，只要强引用存在，垃圾回收器将永远不会回收被引用的对象，哪怕内存不足的时候</li>\n<li><strong>软引用</strong>：使用 SoftReference 修饰的对象被称为软引用，软引用指向的对象在内存要溢出的时候被回收</li>\n<li><strong>弱引用</strong>：使用 WeakReference 修饰的对象被称为弱引用，只要发生垃圾回收，若这个对象只被弱引用指向，那么就会被回收</li>\n<li><strong>虚引用</strong>：虚引用是最弱的引用，在 Java 中使用 PhantomReference 进行定义。虚引用中唯一的作用就是用队列接收对象即将死亡的通知</li>\n</ul>\n</li>\n<li>题目说的是在做  <code>ThreadLocal.get()</code>  操作，证明其实还是有<strong>强引用</strong>存在的，所以  <code>key</code>  并不为  <code>null</code> 。没有强引用的话就不在了</li>\n</ul>\n</li>\n<li>\n<p><code>ThreadLocal</code>  中 <code>ThreadLocalMap</code>  的<strong>数据结构</strong>？<br />\nmap</p>\n</li>\n<li>\n<p><code>ThreadLocalMap</code>  的<strong> Hash 算法</strong>？</p>\n<ul>\n<li><code>int i = key.threadLocalHashCode &amp; (len-1);</code></li>\n<li><code>ThreadLocalMap</code>  中 <code>hash</code>  算法很简单，这里 <code>i</code>  就是当前 key 在散列表中对应的数组下标位置。这里最关键的就是 <code>threadLocalHashCode</code>  值的计算， <code>ThreadLocal</code>  中有一个属性为 <code>HASH_INCREMENT = 0x61c88647</code></li>\n<li>每次增长上述量，即斐波那契数 也叫 黄金分割数。好处就是非常均匀</li>\n</ul>\n</li>\n<li>\n<p><code>ThreadLocalMap</code>  中<strong> Hash 冲突</strong>如何解决？</p>\n<ul>\n<li>最朴实的探测式：冲突了就后移</li>\n</ul>\n</li>\n<li>\n<p><code>ThreadLocalMap</code>  的<strong>扩容机制</strong>？</p>\n<ul>\n<li>在 <code>ThreadLocalMap.set()</code>  方法的最后，如果执行完启发式清理工作后，未清理到任何数据，且当前散列数组中 <code>Entry</code>  的数量已经达到了列表的扩容阈值 <code>(len*2/3)</code></li>\n<li>扩容后的 <code>tab</code>  的大小为 <code>oldLen * 2</code> ，然后遍历老的散列表，重新计算 <code>hash</code>  位置，然后放到新的 <code>tab</code>  数组中</li>\n</ul>\n</li>\n<li>\n<p><code>ThreadLocalMap</code>  中<strong>过期 key 的清理机制</strong>？<strong>探测式清理</strong>和<strong>启发式清理</strong>流程？</p>\n<ul>\n<li>在 set、get、扩容前过程中都会触发清理，有 null 就把后续前移</li>\n</ul>\n</li>\n<li>\n<p><code>ThreadLocalMap.set()/get</code>  方法实现原理？</p>\n<ul>\n<li>就是 hash 映射完，看 key 是否一致，一致就操作，不一致就往后找，期间可能触发清理机制</li>\n</ul>\n</li>\n<li>\n<h2 id=\"项目中threadlocal使用情况遇到的坑\"><a class=\"anchor\" href=\"#项目中threadlocal使用情况遇到的坑\">#</a> 项目中 <code>ThreadLocal</code>  使用情况？遇到的坑？</h2>\n</li>\n</ul>\n<h2 id=\"多线程综合案例\"><a class=\"anchor\" href=\"#多线程综合案例\">#</a> 多线程综合案例</h2>\n<h3 id=\"买票\"><a class=\"anchor\" href=\"#买票\">#</a> 买票</h3>\n<p>使用生产者消费者模式。通过缓存区，保证产品数量大于消费数量</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:Thread1</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 测试生产者消费者-->利用缓冲区：管程法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 成产者，消费者，产品，缓存区</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestPC</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Syncontainer</span> syncontainer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Syncontainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Productor</span><span class=\"token punctuation\">(</span>syncontainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">(</span>syncontainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 生产者</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Productor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Syncontainer</span> container<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Productor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Syncontainer</span> container<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token operator\">=</span>container<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 生产</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                container<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Chicken</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产了\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"只鸡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 消费者</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token keyword\">extends</span>  <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token class-name\">Syncontainer</span> container<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Syncontainer</span> container<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token operator\">=</span>container<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 消费</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费了->\"</span><span class=\"token operator\">+</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>id<span class=\"token operator\">+</span><span class=\"token string\">\"只鸡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 产品</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chicken</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token class-name\">Chicken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 缓冲区</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Syncontainer</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// 需要一个容器大小</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token class-name\">Chicken</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chickens <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chicken</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 生产者放入产品</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Chicken</span> chicken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 如果容器满了，需要消费者消费</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span>chickens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// 如果没有满，就需要生产产品放入</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        chickens<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chicken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">// 可以通知消费者了</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token comment\">// 消费者消费产品</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Chicken</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">// 判断缓冲区是否还有产品</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 等待生产者生产，消费者等待</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">return</span> chickens<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\">//        this.notifyAll();</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token comment\">// 吃完了，通知生产者生产</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"信号灯法通过标志为解决\"><a class=\"anchor\" href=\"#信号灯法通过标志为解决\">#</a> 信号灯法，通过标志为解决</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:Thread2</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>xjt<span class=\"token punctuation\">.</span>gaoji</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 测试生产者，消费者问题 2：信号灯法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 标志位解决</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestPC2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">TV</span> tv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token function\">actor</span><span class=\"token punctuation\">(</span>tv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token function\">watcher</span><span class=\"token punctuation\">(</span>tv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 生产者 -> 演员</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> actor <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">TV</span> tv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">actor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TV</span> tv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tv<span class=\"token operator\">=</span>tv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    tv<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抖音:记录美好生活\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    tv<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"快乐大本营\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 消费者 -> 观众</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">class</span> watcher <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">TV</span> tv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">watcher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TV</span> tv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tv<span class=\"token operator\">=</span>tv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                tv<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"观众\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">// 产品 ->Tv</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TV</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token class-name\">String</span> video<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">//    String Watchername;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 演员表演，观众等待 T</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// 观众观看，演员等待 F</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 表演方法</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> vidio<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 判断如果是 true，则表演节目</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"演员表演了->\"</span><span class=\"token operator\">+</span>vidio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 通知观众观看</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 通知观众观看节目</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>video<span class=\"token operator\">=</span>vidio<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            flag<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 否则，等待观众观看</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> watchername<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 判断如果为 flase，则观众观看节目</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>watchername<span class=\"token operator\">+</span><span class=\"token string\">\"观看了\"</span><span class=\"token operator\">+</span>video<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            flag<span class=\"token operator\">=</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 否则等待，直到表演者表演完，再继续观看</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"加锁解决并发\"><a class=\"anchor\" href=\"#加锁解决并发\">#</a> 加锁解决并发</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:Thread3</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 买票系统会出现不安全</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 需要加上锁</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 通过ReenTrantlock对象进行加锁，解锁</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * private final ReentrantLock locks = new ReentrantLock();</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestReentrantLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        buyticket person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">buyticket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        t<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 一个卖票的类</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> buyticket <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//Reentrantlock: 可重进锁</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> locks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 票数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> ticket <span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 重写的方法</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 开启一个锁        开启一个锁最好放在 try 语句</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                locks<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ticket<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ticket<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你买的票已经被购完\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token comment\">// 关闭一个锁</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                locks<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"juc\"><a class=\"anchor\" href=\"#juc\">#</a> JUC</h2>\n<p>JUC 是 java.util.concurrent 包的简称，在 Java5.0 添加，目的就是为了更好的支持高并发任务。让开发者进行多线程编程时减少竞争条件和死锁的问题</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210508223838713.png\" alt=\"\" /></p>\n<ol>\n<li>\n<p>tools（工具类）：又叫信号量三组工具类，包含有:</p>\n<ul>\n<li>CountDownLatch（闭锁） 是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待</li>\n<li>CyclicBarrier（栅栏） 之所以叫 barrier，是因为是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点 ，并且在释放等待线程后可以重用</li>\n<li>Semaphore（信号量） 是一个计数信号量，它的本质是一个 “共享锁 “。信号量维护了一个信号量许可集。线程可以通过调用 acquire () 来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过 release () 来释放它所持有的信号量许可。</li>\n</ul>\n</li>\n<li>\n<p>executor (执行者)：是 Java 里面线程池的顶级接口，但它只是一个执行线程的工具，真正的线程池接口是 ExecutorService，里面包含的类有：</p>\n<ul>\n<li>ScheduledExecutorService 解决那些需要任务重复执行的问题</li>\n<li>ScheduledThreadPoolExecutor 周期性任务调度的类实现</li>\n</ul>\n</li>\n<li>\n<p>atomic (原子性包)：是 JDK 提供的一组原子操作类，</p>\n<ul>\n<li>包含有 AtomicBoolean、AtomicInteger、AtomicIntegerArray 等原子变量类，他们的实现原理大多是持有它们各自的对应的类型变量 value，而且被 volatile 关键字修饰了。这样来保证每次一个线程要使用它都会拿到最新的值。</li>\n</ul>\n</li>\n<li>\n<p>locks（锁包）：是 JDK 提供的锁机制，相比 synchronized 关键字来进行同步锁，功能更加强大，它为锁提供了一个框架，该框架允许更灵活地使用锁包含的实现类有：</p>\n<ul>\n<li>ReentrantLock 它是独占锁，是指只能被独自占领，即同一个时间点只能被一个线程锁获取到的锁</li>\n<li>ReentrantReadWriteLock 它包括子类 ReadLock 和 WriteLock。ReadLock 是共享锁，而 WriteLock 是独占锁</li>\n<li>LockSupport 它具备阻塞线程和解除阻塞线程的功能，并且不会引发死锁。</li>\n</ul>\n</li>\n<li>\n<p>collections (集合类)：主要是提供线程安全的集合， 比如：</p>\n<ul>\n<li>ArrayList 对应的高并发类是 CopyOnWriteArrayList</li>\n<li>HashSet 对应的高并发类是 CopyOnWriteArraySet</li>\n<li>HashMap 对应的高并发类是 ConcurrentHashMap 等等</li>\n</ul>\n</li>\n</ol>\n<p>只是一个应用包，但牵扯到的：<br />\n<img data-src=\"https://ucc.alicdn.com/pic/developer-ecology/2ebkmj4srtokq_965b1006254c4780a1ae6418902460f3.png\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzEzNTI2MTc=\">超多，对着整理下</span></p>\n<h3 id=\"并发collections\"><a class=\"anchor\" href=\"#并发collections\">#</a> 并发 collections</h3>\n<ul>\n<li><strong> <code>ConcurrentHashMap</code> </strong> : 线程安全的  <code>HashMap</code></li>\n<li><strong> <code>CopyOnWriteArrayList</code> </strong> : 线程安全的  <code>List</code> ，在读多写少的场合性能非常好，远远好于  <code>Vector</code> 。</li>\n<li><strong> <code>ConcurrentLinkedQueue</code> </strong> : 高效的并发队列，使用链表实现。可以看做一个线程安全的  <code>LinkedList</code> ，这是一个非阻塞队列。</li>\n<li><strong> <code>BlockingQueue</code> </strong> : 这是一个接口，JDK 内部通过链表、数组等方式实现了这个接口。表示阻塞队列，非常适合用于作为数据共享的通道。</li>\n<li><strong> <code>ConcurrentSkipListMap</code> </strong> : 跳表的实现。这是一个 Map，使用跳表的数据结构进行快速查找。</li>\n</ul>\n<h3 id=\"atomic-原子类\"><a class=\"anchor\" href=\"#atomic-原子类\">#</a> Atomic 原子类</h3>\n<p><code>java.util.concurrent.atomic</code>  下</p>\n<p><strong>基本类型</strong><br />\n使用原子的方式更新基本类型</p>\n<ul>\n<li><code>AtomicInteger</code> ：整型原子类</li>\n<li><code>AtomicLong</code> ：长整型原子类</li>\n<li><code>AtomicBoolean</code> ：布尔型原子类</li>\n</ul>\n<p><strong>数组类型</strong><br />\n使用原子的方式更新数组里的某个元素</p>\n<ul>\n<li><code>AtomicIntegerArray</code> ：整型数组原子类</li>\n<li><code>AtomicLongArray</code> ：长整型数组原子类</li>\n<li><code>AtomicReferenceArray</code> ：引用类型数组原子类</li>\n</ul>\n<p><strong>引用类型</strong><br />\n基本类型原子类只能更新一个变量，如果需要原子更新多个变量，需要使用 引用类型原子类。</p>\n<ul>\n<li><code>AtomicReference</code> ：引用类型原子类</li>\n<li><code>AtomicMarkableReference</code> ：原子更新带有标记的引用类型。该类将 boolean 标记与引用关联起来，<s>也可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题</s>。</li>\n<li><code>AtomicStampedReference</code> ：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题。</li>\n</ul>\n<p><strong>对象的属性修改类型</strong><br />\n如果需要原子更新某个类里的某个字段时，需要用到  对象的属性修改类型 / 器 修改属性。</p>\n<ul>\n<li><code>AtomicIntegerFieldUpdater</code> : 原子更新整型字段的更新器</li>\n<li><code>AtomicLongFieldUpdater</code> ：原子更新长整型字段的更新器</li>\n<li><code>AtomicReferenceFieldUpdater</code> ：原子更新引用类型里的字段</li>\n</ul>\n<p><strong>应用：</strong> 对于并发的数据保证安全（另一种安全实现：volatile 修饰）</p>\n<div class=\"note info no-icon 本质\">\n<ul>\n<li>利用 CAS (compare and swap) + volatile 和 native 方法来保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升。</li>\n<li>CAS 的原理是拿期望的值和原本的一个值作比较，如果相同则更新成新的值。UnSafe 类的  <code>objectFieldOffset()</code>  方法是一个本地方法，这个方法是用来拿到 “原来的值” 的内存地址。另外 value 是一个 volatile 变量，在内存中可见，因此 JVM 可以保证任何时刻任何线程总能拿到该变量的最新值</li>\n</ul>\n</div>\n<h3 id=\"future\"><a class=\"anchor\" href=\"#future\">#</a> Future</h3>\n<p>在并发编程中，我们经常用到非阻塞的模型，在之前的多线程的三种实现中，不管是继承 thread 类还是实现 runnable 接口，都无法保证获取到之前的执行结果。通过实现 Callback 接口，并用 Future 可以来接收多线程的执行结果。</p>\n<p>Future 表示一个可能还没有完成的异步任务的结果，针对这个结果可以添加 Callback 以便在任务执行成功或失败后作出相应的操作。</p>\n<ul>\n<li>简单理解就是：我有一个任务，提交给了  <code>Future</code>  来处理。任务执行期间我自己可以去做任何想做的事情。并且，在这期间我还可以取消任务以及获取任务的执行状态。一段时间之后，我就可以  <code>Future</code>  那里直接取出任务执行结果</li>\n</ul>\n<p>包含函数：</p>\n<ul>\n<li>get（）方法可以当任务结束后返回一个结果，如果调用时，工作还没有结束，则会阻塞线程，直到任务执行完毕</li>\n<li>get（long timeout,TimeUnit unit）做多等待 timeout 的时间就会返回结果</li>\n<li>cancel（boolean mayInterruptIfRunning）方法可以用来停止一个任务，如果任务可以停止（通过 mayInterruptIfRunning 来进行判断），则可以返回 true, 如果任务已经完成或者已经停止，或者这个任务无法停止，则会返回 false</li>\n<li>isDone（）方法判断当前方法是否完成</li>\n<li>isCancel（）方法判断当前方法是否取消</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:demo</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// 等凉菜 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">Callable</span> ca1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"凉菜准备完毕\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> ft1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>ca1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>ft1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 等包子 -- 必须要等待返回的结果，所以要调用 join 方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token class-name\">Callable</span> ca2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"包子准备完毕\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> ft2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>ca2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>ft2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ft1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ft2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"准备完毕时间：\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>凉菜准备完毕</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>包子准备完毕</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>准备完毕时间：<span class=\"token number\">3012</span></pre></td></tr></table></figure><h1 id=\"锁\"><a class=\"anchor\" href=\"#锁\">#</a> 锁</h1>\n<p>自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁<br />\n锁的状态从低到高依次为无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁，升级的过程就是从低到高，降级在一定条件也是有可能发生的。</p>\n<p>升级举例：一开始 A 请求访问后端，获得偏向锁，执行一个慢 SQL。B 也来请求锁则升级为轻量锁，且 B  CAS 自选。多次后升级为重量级锁，且 B 进入 EntrySet 阻塞。后续请求依次入 EntrySet，等待获取。</p>\n<p><strong>自旋锁</strong>：由于大部分时候，锁被占用的时间很短，共享变量的锁定时间也很短，所有没有必要挂起线程，用户态和内核态的来回上下文切换严重影响性能。自旋的概念就是让线程执行一个忙循环，可以理解为就是啥也不干，防止从用户态转入内核态，自旋锁可以通过设置 - XX:+UseSpining 来开启，自旋的默认次数是 10 次，可以使用 - XX:PreBlockSpin 设置。</p>\n<ul>\n<li>性能提升、减少上下文切换的消耗。但不适合竞争激烈或者持有锁的线程需要长时间占用锁执行同步块，因为会占用 cpu 做无用功造成 CPU 浪费</li>\n<li>为防止一直自旋抢不到锁的，又有 <code>TicketLock </code> 采用排队叫号的机制，但需要缓存同步，这会导致繁重的系统总线和内存的流量，大大降低系统整体的性能。又有 CLHLock 和 MCSLock 通过链表的方式避免了减少了处理器缓存同步</li>\n</ul>\n<p><strong>自适应锁</strong>：自适应锁就是自适应的自旋锁，自旋的时间不是固定时间，而是由前一次在同一个锁上的自旋时间和锁的持有者状态来决定。</p>\n<p><strong>锁消除</strong>：锁消除指的是 JVM 检测到一些同步的代码块，完全不存在数据竞争的场景，也就是不需要加锁，就会进行锁消除。</p>\n<p><strong>锁粗化</strong>：锁粗化指的是有很多操作都是对同一个对象进行加锁，就会把锁的同步范围扩展到整个操作序列之外。</p>\n<p><strong>偏向锁</strong>：当线程访问同步块获取锁时，会在对象头和栈帧中的锁记录里存储偏向锁的线程 ID，之后这个线程再次进入同步块时都不需要 CAS 来加锁和解锁了，偏向锁会永远偏向第一个获得锁的线程，如果后续没有其他线程获得过这个锁，持有锁的线程就永远不需要进行同步，反之，当有其他线程竞争偏向锁时，持有偏向锁的线程就会释放偏向锁。可以用过设置 - XX:+UseBiasedLocking 开启偏向锁。</p>\n<p><strong>轻量级锁</strong>：JVM 的对象的对象头中包含有一些锁的标志位，代码进入同步块的时候，JVM 将会使用 CAS 方式来尝试获取锁，如果更新成功则会把对象头中的状态位标记为轻量级锁，如果更新失败，当前线程就尝试自旋来获得锁。整个锁升级的过程非常复杂，我尽力去除一些无用的环节，简单来描述整个升级的机制。简单点说，偏向锁就是通过对象头的偏向线程 ID 来对比，甚至都不需要 CAS 了，而轻量级锁主要就是通过 CAS 修改对象头锁记录和自旋来实现，重量级锁则是除了拥有锁的线程其他全部阻塞。</p>\n<p><img data-src=\"image-20240401111401274.png\" alt=\"\" /></p>\n<h2 id=\"synchronized\"><a class=\"anchor\" href=\"#synchronized\">#</a> synchronized</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5ncWlsdUdydWJieS9hcnRpY2xlL2RldGFpbHMvODA1MDA1MDU=\">更多案例</span></p>\n<blockquote>\n<p>方法一：同步代码块</p>\n</blockquote>\n<p><strong>关键字 synchronized（同步监视器）</strong></p>\n<ol>\n<li>操作共享数据的代码就是需要同步的代码</li>\n<li>同步监视器俗称锁，任何一个类的对象都可以充当锁</li>\n<li>要求：需要同步的线程要共用同一把锁</li>\n<li>操作同步代码时只能运行一个线程，相当于一个单线程，但能保证安全问题</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> mythread <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tickect <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Object</span> object<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/* 如果是继承方法的多线程，要这样书写</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Object static object=new Object ();</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    因为在主函数中创建了三个 mythread 对象，要加 static 只生成一个 object 确保公用一把锁。*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token comment\">// 也可以直接写成 synchronized (this) 这里的 this 指 myehread 对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tickect <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"卖了第\"</span> <span class=\"token operator\">+</span> tickect <span class=\"token operator\">+</span> <span class=\"token string\">\"张票\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    tickect<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        mythread mythread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">mythread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>mythread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>mythread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>mythread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一号窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二号窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"三号窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note warning no-icon\">\n<ul>\n<li>在实现 Runnable 接口创建多线程的方式中，可以考虑用 this 充当对象</li>\n<li>在继承 thread 创建多线程的方式中，慎用 this 充当对象，可以考虑用当前类充当对象</li>\n</ul>\n</div>\n<blockquote>\n<p>方法二：同步方法接口</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> mythread <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tickect <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">boolean</span> ture <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ture<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 实现接口多线程使用同步方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tickect <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"卖了第\"</span> <span class=\"token operator\">+</span> tickect <span class=\"token operator\">+</span> <span class=\"token string\">\"张票\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            tickect<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note warning no-icon\">\n<p>继承 thread 多线程同步方法需要调用静态方法<br />\n <code>public static synchronized void show()&#123;&#125;</code></p>\n</div>\n<ol>\n<li>同步方法依然涉及到同步监视器，只是不显示说明。</li>\n<li>非静态同步方法的同步监视器是：this</li>\n</ol>\n<p>​ 静态同步方法的同步监视器是：当前类</p>\n<h2 id=\"cas\"><a class=\"anchor\" href=\"#cas\">#</a> CAS</h2>\n<ul>\n<li>CAS (compare and swap) 可以理解成一种乐观的自旋锁的机制，使用他时不锁住对象，达到加锁的目的。（乐观锁 和 并发原子类也是利用 CAS 工具实现的）</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200917191510311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU1MjIxNQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\" /></p>\n<h3 id=\"重试机制\"><a class=\"anchor\" href=\"#重试机制\">#</a> 重试机制</h3>\n<p>有文章说，CAS 操作失败后会一直重试直到成功，这种说法很不严谨。</p>\n<p>第一，CAS 本身并未实现失败后的处理机制，它只负责返回成功或失败的布尔值，后续由调用者自行处理。只不过我们最常用的处理方式是重试而已。</p>\n<p>第二，这句话很容易理解错，被理解成重新比较并交换。实际上失败的时候，原值已经被修改，如果不更改期望值，再怎么比较都会失败。而新值同样需要修改。</p>\n<p>所以正确的方法是，使用一个死循环进行 CAS 操作，成功了就结束循环返回，失败了就重新从内存读取值和计算新值，再调用 CAS。看下 AtomicInteger 的源码就什么都懂了：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> incrementAndGet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> current <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>值得注意的是， CAS 只是保证了操作的原子性，并不保证变量的可见性，因此变量需要加上 volatile 关键字。</strong></p>\n<h2 id=\"aqs\"><a class=\"anchor\" href=\"#aqs\">#</a> AQS</h2>\n<p>AQS (AbstractQueuedSynchronizer) 是一种 JAVA 底层实现线程管理的机制，主要用途为并发工具类，提供管理线程（创建，等待，唤醒，销毁）等操作的工具类</p>\n<ul>\n<li>AQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 ReentrantLock，Semaphore，其他的诸如 ReentrantReadWriteLock，SynchronousQueue，FutureTask 等等皆是基于 AQS 的。当然，我们自己也能利用 AQS 非常轻松容易地构造出符合我们自己需求的同步器。</li>\n<li>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。 CLH (Craig,Landin,and Hagersten) 队列是一个虚拟的双向队列 (虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系)。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点 (Node) 来实现锁的分配。 AQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。</li>\n</ul>\n<p><code>AbstractQueuedSynchronizer</code>  (AQS) 是 Java 并发包中的一个基础框架类，常用于实现各种同步器，如  <code>ReentrantLock</code> 、 <code>Semaphore</code> 、 <code>CountDownLatch</code>  和  <code>ReadWriteLock</code>  等。这些类通过继承  <code>AbstractQueuedSynchronizer</code>  并使用其队列机制来管理线程同步。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:AQSDemo</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AQSDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        num <span class=\"token operator\">+=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A 线程执行了1秒,num = \"</span><span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    num <span class=\"token operator\">+=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B 线程执行了0.5秒,num = \"</span><span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    num <span class=\"token operator\">+=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C 线程执行了0.1秒,num = \"</span><span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重复执行会发现每次顺序不同（理论上，但我测试就是顺序的，可能执行太快了？），但都是要 1600ms（这个一定），而不是 start () 启动了多线程</p>\n<h2 id=\"谈谈synchronized与reentrantlock的区别\"><a class=\"anchor\" href=\"#谈谈synchronized与reentrantlock的区别\">#</a> 谈谈 synchronized 与 ReentrantLock 的区别</h2>\n<ol>\n<li><strong>底层实现</strong>上来说，synchronized 是<strong> JVM</strong> 层面的锁，是<strong> Java 关键字</strong>，通过 monitor 对象来完成（monitorenter 与 monitorexit），对象只有在同步块或同步方法中才能调用 wait/notify 方法，ReentrantLock 是从 jdk1.5 以来（java.util.concurrent.locks.Lock）提供的<strong> API 层面</strong>的锁。</li>\n</ol>\n<ul>\n<li>synchronized 的实现涉及到锁的升级，具体为无锁、偏向锁、自旋锁、向 OS 申请重量级锁，ReentrantLock 实现则是通过利用 CAS（CompareAndSwap）自旋机制保证线程操作的原子性和 volatile 保证数据可见性以实现锁的功能。</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p><strong>是否可手动释放</strong>，synchronized 由系统完成，不可。ReentrantLock 的使用和释放需要程序员手动</p>\n</li>\n<li>\n<p><strong>是否可中断</strong>，synchronized 是不可中断类型的锁，除非加锁的代码中出现异常或正常执行完成； ReentrantLock 则可以中断，可通过 trylock (long timeout,TimeUnit unit) 设置超时方法或者将 lockInterruptibly () 放到代码块中，调用 interrupt 方法进行中断。</p>\n</li>\n<li>\n<p><strong>是否公平</strong>，synchronized 为非公平锁 ReentrantLock 则即可以选公平锁也可以选非公平锁，通过构造方法 new ReentrantLock 时传入 boolean 值进行选择，为空默认 false 非公平锁，true 为公平锁。</p>\n</li>\n<li>\n<p><strong>是否可绑定条件 Condition</strong>，synchronized 不能绑定； ReentrantLock 通过绑定 Condition 结合 await ()/singal () 方法实现线程的精确唤醒</p>\n</li>\n<li>\n<p><strong>锁的对象</strong>，synchronzied 锁的是对象，锁是保存在对象头里面的，根据对象头数据来标识是否有线程获得锁 / 争抢锁；ReentrantLock 锁的是线程，根据进入的线程和 int 类型的 state 标识锁的获得 / 争抢。</p>\n</li>\n</ol>\n<h1 id=\"设计模式\"><a class=\"anchor\" href=\"#设计模式\">#</a> 设计模式</h1>\n<ul>\n<li><strong>工厂设计模式</strong>（简单工厂和工厂方法）：Spring 使用工厂模式可以通过 BeanFactory 或 ApplicationContext 创建 bean 对象\n<ul>\n<li>BeanFactory ：延迟注入 (使用到某个 bean 的时候才会注入), 相比于 BeanFactory 来说会占用更少的内存，程序启动速度更快。</li>\n<li>ApplicationContext ：容器启动的时候，不管你用没用到，一次性创建所有 bean 。BeanFactory 仅提供了最基本的依赖注入支持，ApplicationContext 扩展了 BeanFactory , 除了有 BeanFactory 的功能还有额外更多功能，所以一般开发人员使用 ApplicationContext 会更多。</li>\n</ul>\n</li>\n<li><strong>单例设计模式</strong>：Spring 中 bean 的默认作用域就是 singleton。\n<ul>\n<li>除了 singleton 作用域，Spring bean 还有下面几种作用域：prototype （多例，每次都生成）、request（每次 HTTP 请求生成一个，仅在该次请求内有效）、session（每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效）、global-session： 全局 session 作用域，仅仅在基于 portlet 的 web 应用中才有意义，Spring5 已经没有了</li>\n</ul>\n</li>\n<li><strong>代理设计模式</strong>：Spring AOP 就是基于动态代理的</li>\n<li><strong>模板方法设计模式</strong>：模板方法模式是一种行为设计模式，它定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。\n<ul>\n<li>通过继承实现父类方法？</li>\n</ul>\n</li>\n<li><strong>观察者设计模式</strong>：它表示的是一种对象与对象之间具有依赖关系，当一个对象发生改变时，这个对象锁依赖的对象也会做出反应。<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:观察者模式</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 定义一个事件<span class=\"token operator\">:</span> 实现一个继承自 <span class=\"token class-name\">ApplicationEvent</span>，并且写相应的构造函数；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 定义一个事件监听者：实现 <span class=\"token class-name\">ApplicationListener</span> 接口，重写 <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> 使用事件发布者发布消息<span class=\"token operator\">:</span> 可以通过 <span class=\"token class-name\">ApplicationEventPublisher</span> 的 <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法发布消息。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 定义一个事件，继承自 ApplicationEvent 并且写相应的构造函数  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">DemoEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t  <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 定义一个事件监听者，实现 ApplicationListener 接口，重写 onApplicationEvent () 方法；  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DemoEvent</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 使用 onApplicationEvent 接收消息  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到的信息是：\"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 发布事件，可以通过 ApplicationEventPublisher  的 publishEvent () 方法发布消息。  </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoPublisher</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Autowired</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">// 发布事件  </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tapplicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li><strong>适配器设计模式</strong>：又叫包装器 (Wrapper) 模式，适配器设计模式将一个接口转换成客户希望的另一个接口，适配器模式使得接口不兼容的那些类可以一起工作</li>\n<li><strong>装饰者设计模式</strong>：装饰者设计模式可以动态地给对象增加些额外的属性或行为。如 DataSource 切换不同的数据库和数据源</li>\n<li><strong>策略设计模式</strong>：Spring 框架的资源访问接口就是基于策略设计模式实现的。</li>\n</ul>\n<h1 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> 数据结构</h1>\n<h2 id=\"hashmap\"><a class=\"anchor\" href=\"#hashmap\">#</a> HashMap</h2>\n<p><strong>–》JDK 1.7</strong> ： Table 数组 + Entry 链表<br />\n<strong>–》JDK1.8</strong> :  Table 数组 + Entry 链表 / 红黑树</p>\n<ul>\n<li>为什么使用数组 + 链表？</li>\n<li>用 LinkedList 代替数组可以吗？</li>\n<li>既然是可以的，为什么不用反而用数组？</li>\n</ul>\n<h3 id=\"重要变量\"><a class=\"anchor\" href=\"#重要变量\">#</a> 重要变量</h3>\n<ul>\n<li><code>DEFAULT_INITIAL_CAPACITY</code>  Table 数组的初始化长度：  <code>1 &lt;&lt; 4``2^4=16</code> （为什么要是 2 的 n 次方？）</li>\n<li><code>MAXIMUM_CAPACITY</code>  Table 数组的最大长度：  <code>1&lt;&lt;30</code>    <code>2^30=1073741824</code></li>\n<li><code>DEFAULT_LOAD_FACTOR</code>  负载因子：默认值为 <code>0.75</code> 。 当元素的总个数 &gt; 当前数组的长度 * 负载因子。数组会进行扩容，扩容为原来的两倍（todo：为什么是两倍？）</li>\n<li><code>TREEIFY_THRESHOLD</code>  链表树化阙值： 默认值为  <code>8</code>  。表示在一个 node（Table）节点下的值的个数大于 8 时候，会将链表转换成为红黑树。</li>\n<li><code>UNTREEIFY_THRESHOLD</code>  红黑树链化阙值： 默认值为  <code>6</code>  。 表示在进行扩容期间，单个 Node 节点下的红黑树节点的个数小于 6 时候，会将红黑树转化成为链表。</li>\n<li><code>MIN_TREEIFY_CAPACITY = 64</code>  最小树化阈值，当 Table 所有元素超过改值，才会进行树化（为了防止前期阶段频繁扩容和树化过程冲突）</li>\n</ul>\n<h3 id=\"实现原理\"><a class=\"anchor\" href=\"#实现原理\">#</a> 实现原理</h3>\n<p><img data-src=\"https://pic1.zhimg.com/80/v2-3e203e5dcf8c12e7ebf137c344615aa4_720w.webp\" alt=\"\" /><br />\nHashMap 采⽤ Entry 数组来存储 key-value 对，每⼀个键值对组成了⼀个 Entry 实体 (实现 Map.Entry&lt; K ,V&gt; 这个接口，通过 entry 类可以构成一个单向链表 )，Entry 类实际上是⼀个单向的链表结 构，它具有 Next 指针，可以连接下⼀个 Entry 实体。 只是在 JDK1.8 中，链表⻓度⼤于 8 的时候，链表会转成红⿊树！</p>\n<p><strong>第一问：</strong> 为什么使用链表 + 数组：</p>\n<ul>\n<li>要知道为什么使用链表首先需要知道 Hash 冲突是如何来的：</li>\n<li>由于我们的数组的值是限制死的，我们在对 key 值进行散列取到下标以后，放入到数组中时，难免出现两个 key 值不同，但是却放入到下标相同的<strong>格子</strong>中，此时我们就可以使用链表来对其进行链式的存放。</li>\n</ul>\n<p><strong>第二问：</strong> ⽤ LinkedList 代替数组结构可以吗？<br />\n源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>是否可以替换：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">></span></span> table<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以的。</p>\n<p><strong>第三问：</strong> 那既然可以使用进行替换处理，为什么有偏偏使用到数组呢？</p>\n<ul>\n<li>因为⽤数组效率最⾼！ 在 HashMap 中，定位节点的位置是利⽤元素的 key 的哈希值对数组⻓度取模得到。此时，我们已得到节点的位置。显然数组的查 找效率⽐ <code>LinkedList</code>  ⼤（底层是链表结构）。</li>\n<li>那 <code>ArrayList</code> ，底层也是数组，查找也快啊，为啥不⽤ ArrayList? 因为采⽤基本数组结构，扩容机制可以⾃⼰定义，HashMap 中数组扩容刚好是<strong> 2 的次幂</strong>，在做取模运算的效率⾼。 ⽽ ArrayList 的扩容机制是 1.5 倍扩容（这一点我相信学习过的都应该清楚），那 ArrayList 为什么是 1.5 倍扩容这就不在本⽂说明了。</li>\n</ul>\n<div class=\"note info no-icon\">\n<p>ArrayList 初始化是 10, 通过 grow () 方法来进行扩容</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 此处 minCapacity 为 10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// overflow-conscious code</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 旧容量就是原数组的长度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> oldCapacity <span class=\"token operator\">=</span> elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 新容量等于旧容量加上旧容量右移一位，也就是 1.5 倍</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> oldCapacity <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>oldCapacity <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 如果计算出的新容量 比 minCapacity 还小的话，就用 minCapacity 表示新容量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> minCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            newCapacity <span class=\"token operator\">=</span> minCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 如果计算出的新容量 比 MAX_ARRAY_SIZE 还大的话，就调用 hugeCapacity 计算新容量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> <span class=\"token constant\">MAX_ARRAY_SIZE</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            newCapacity <span class=\"token operator\">=</span> <span class=\"token function\">hugeCapacity</span><span class=\"token punctuation\">(</span>minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// minCapacity is usually close to size, so this is a win:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 直接用 Arrays 这个工具类中的 copyof () 方法来进行数组复制</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        elementData <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); </code>   所以扩容到原来的 1.5 倍，但为什么不扩容到 1.2 或者 2 倍呢，因为 1.2 扩容空间太小，而 2 倍则扩充的空间太大 ，所以权衡之下，源码采用扩容 1.5 倍的做法</p>\n</div>\n<p><strong>第四问：</strong> 为什么扩容是 2 的次幂？</p>\n<ul>\n<li>与 Hash 映射有关，通过与操作达到 <code>hashcode()</code>  的值映射到表长度区间 ( <code>[0, Table.length-1]</code> ) 内，此时与的对象是 <code>Table.length-1</code> ，因此，只有 Table 数组的长度为 2 的次方，才能最大程度的利用映射空间。</li>\n</ul>\n<p>扩展： HashMap 不支持并发操作，没有同步方法，于是衍生出了支持并发操作的 <code>ConcurrentHashMap</code> ，通过继承  <code>ReentrantLock</code> （JDK1.7 重入锁）/ <code>CAS</code>  和 <code>synchronized</code>  (JDK1.8 内置锁) 来进行加锁（分段锁），每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全。相比 <code>SynchronizedMap</code>  更为精细，不会一🔒就锁了整个 Map，只锁要用到的 segment。</p>\n<ul>\n<li>ConcurrentHashMap 类中包含两个静态内部类 HashEntry 和 Segment。HashEntry 用来封装映射表的键 / 值对；Segment 用来充当锁的角色，每个 Segment 对象守护整个散列映射表的若干个桶。每个桶是由若干个 HashEntry 对象链接起来的链表。一个 ConcurrentHashMap 实例中包含由若干个 Segment 对象组成的数组。</li>\n</ul>\n<h3 id=\"其他问题安全-并发\"><a class=\"anchor\" href=\"#其他问题安全-并发\">#</a> 其他问题（安全、并发）</h3>\n<p><strong>第五问：</strong> HashMap 的线程为什么不安全？</p>\n<p>HashMap 在 <code>jdk1.7</code>  中 使用 数组加链表的方式，并且在进行链表插入时候使用的是头结点插入的方法。<br />\n<strong>注</strong> ：这里为什么使用 头插法的原因是我们若是在散列以后，判断得到值是一样的，使用头插法，不用每次进行遍历链表的长度。但是这样会有一个缺点，在进行扩容时候，会导致进入新数组时候出现倒序的情况，也会在多线程时候出现线程的不安全性。<br />\n但是对与  <code>jdk1.8</code>  而言，还是要进行阙值的判断，判断在什么时候进行红黑树和链表的转换。所以无论什么时候都要进行遍历，于是插入到尾部，防止出现扩容时候还会出现倒序情况。</p>\n<p>所以当在多线程的使用场景中，<strong>尽量使用线程安全的 ConcurrentHashMap</strong>。至于 <code>Hashtable</code>  而言，使用效率太低。</p>\n<p><strong>第五问：</strong> 1.7 中 HashMap 为什么有死循环的安全问题？<br />\n多线程并发头插法导致的。假设有两个线程，线程 1 和线程 2，两个线程进行 hashMap 的 put 操作，触发了扩容。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> src <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> src<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>           </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 两个线程都先进入 if</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              src<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                  <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                 <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">indexFor</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">,</span> newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                 e<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程 1 这里还没执行 停下</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                 newTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                 e <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>线程 1 和线程 2 都进入 if，然后线程 1 没有拿到 cpu 的资源在上面代码注释的地方停下了。此时的变量指针如下图所示：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20210113183932506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdzZW5saW4zNDE=,size_16,color_FFFFFF,t_70\" alt=\"\" /><br />\n记住 线程 1 中 E 变量指向 a 结点，next 变量指向 b 结点。<br />\n下面是线程 2 拿到 cpu 的资源，执行结点转移<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20210113183945982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdzZW5saW4zNDE=,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210113183959741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdzZW5saW4zNDE=,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210113184049658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdzZW5saW4zNDE=,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p>CPU 切换，线程 2 停下，又轮到线程 1<br />\n 因为之前线程 1 中 E 变量指向的是 a 结点，next 变量指向的是 b 结点，所以如下图所示：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20210113184106784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdzZW5saW4zNDE=,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p>此时线程 1 执行第二个注释的后续代码，就造成了链表的死循环，结果如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20210113184120471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdzZW5saW4zNDE=,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p><strong>第六问：</strong> 为什么不一开始就使用红黑树，不是效率很高吗？</p>\n<ul>\n<li>因为红⿊树需要进⾏左旋，右旋，变⾊这些操作来保持平衡，⽽单链表不需要。</li>\n<li>当元素⼩于 8 个当时候，此时做查询操作，链表结构已经能保证查询性能。  当元素⼤于 8 个的时候，此时需要红⿊树来加快查 询速度，但是新增节点的效率变慢了。<br />\n因此，如果⼀开始就⽤红⿊树结构，元素太少，新增效率⼜⽐较慢，⽆疑这是浪费性能的。</li>\n</ul>\n<p><strong>第七问：</strong> 什么时候退化为链表？</p>\n<ul>\n<li>为 6 的时候退转为链表。中间有个差值 7 可以防⽌链表和树之间频繁的转换。</li>\n<li>假设⼀下，如果设计成链表个数超过 8 则链表转 换成树结构，链表个数⼩于 8 则树结构转换成链表，  如果⼀个 HashMap 不停的插⼊、删除元素，链表个数在 8 左右徘徊，就会 频繁的发⽣树转链表、链表转树，效率会很低。</li>\n</ul>\n<p><strong>第八问：</strong> key 可以是 null 吗，value 可以是 null 吗？</p>\n<ul>\n<li>当然都是可以的，但是对于 key 来说只能运行出现一个 key 值为 null，但是可以出现多个 value 值为 null</li>\n</ul>\n<p><strong>第九问：</strong> 一般用什么作为 key 值？</p>\n<p>⼀般⽤ Integer、String 这种不可变类当 HashMap 当 key，⽽且 String 最为常⽤。</p>\n<ul>\n<li>因为字符串是不可变的，所以在它创建的时候 hashcode 就被缓存了，不需要重新计算。 这就使得字符串很适合作为 Map 中的键，字符串的处理速度要快过其它的键对象。 这就是 HashMap 中的键往往都使⽤字符串</li>\n<li>因为获取对象的时候要⽤到 equals () 和 hashCode () ⽅法，那么键对象正确的重写这两个⽅法是⾮常重要的，这些类已 经很规范的覆写了 hashCode () 以及 equals () ⽅法</li>\n</ul>\n<h2 id=\"concurrenthashmap\"><a class=\"anchor\" href=\"#concurrenthashmap\">#</a> ConcurrentHashMap</h2>\n<blockquote>\n<p>SynchronizedMap 和 ConcurrentHashMap 有什么区别？</p>\n</blockquote>\n<p>SynchronizedMap () 和 Hashtable 一样，实现上在调用 map 所有方法时，都对整个 map 进行同步。<br />\n而 ConcurrentHashMap 的实现却更加精细，它对 map 中的所有桶加了锁。所以，只要有一个线程访问 map，其他线程就无法进入 map，而如果一个线程在访问 ConcurrentHashMap 某个桶时，其他线程，仍然可以对 map 执行某些操作。所以，ConcurrentHashMap 在性能以及安全性方面，明显比 Collections.synchronizedMap () 更加有优势。同时，同步操作精确控制到桶，这样，即使在遍历 map 时，如果其他线程试图对 map 进行数据修改，也不会抛出 ConcurrentModificationException。</p>\n<h2 id=\"红黑树\"><a class=\"anchor\" href=\"#红黑树\">#</a> 红黑树</h2>\n<p>太经典了，但每次都是一看就会，隔两天一想就忘...</p>\n<h1 id=\"一些java机制\"><a class=\"anchor\" href=\"#一些java机制\">#</a> 一些 Java 机制</h1>\n<h2 id=\"fail-fast\"><a class=\"anchor\" href=\"#fail-fast\">#</a> fail-fast</h2>\n<p>fail-fast 机制是<strong> Java 集合</strong> (Collection) 中的一种<strong>错误机制</strong>。 在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的结构进行了修改（增加、删除），则会抛出<strong> Concurrent Modification Exception</strong>（并发修改异常）。</p>\n<p>所以，在多线程环境下，是很容易抛出 Concurrent Modification Exception 的，比如线程 1 正在对集合进行遍历，此时线程 2 对集合进行修改（增加、删除）。但是，单线程就不会抛出吗？很明显，单线程也会有类似的情况，比如 main 线程在遍历时对集合进行修改（增加、删除、修改），那么 main 线程就会抛出 Concurrent Modification Exception 异常。</p>\n<ol>\n<li>如果非要在遍历的时候修改集合，那么建议用迭代器的 remove 等方法，而不是用集合的 remove 等方法。(老实遵守阿里巴巴 java 开发规范……)</li>\n<li>如果是并发的环境，那还要对 Iterator 对象加锁；也可以直接使用 Collections.synchronizedList。</li>\n<li>CopyOnWriteArrayList（采用 fail-safe）</li>\n</ol>\n<h2 id=\"fail-safe\"><a class=\"anchor\" href=\"#fail-safe\">#</a> fail-safe</h2>\n<p>ArrayList 使用 fail-fast 机制自然是因为它增强了数据的安全性。但在某些场景，我们可能想避免 fail-fast 机制抛出的异常，这时我们就要将 ArrayList 替换为使用 fail-safe 机制的 CopyOnWriteArrayList。</p>\n<p>采用安全失败机制的集合容器，在 Iterator 的实现上没有设计抛出 ConcurrentModificationException 的代码段，从而避免了 fail-fast。</p>\n<ul>\n<li>CopyOnWriteArrayList 的核心就是写时复制</li>\n</ul>\n<p>简单理解就是，当我们往一个容器添加元素的时候，先将当前容器复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对 CopyOnWrite 容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以 CopyOnWrite 容器也是一种读写分离的思想，读和写不同的容器。</p>\n<ul>\n<li>添加的时候是需要加锁的，否则多线程写的时候会复制出 N 个副本出来</li>\n<li>读的时候不需要加锁，如果读的时候有多个线程正在向 ArrayList 添加数据，读还是会读到旧的数据，因为写的时候不会锁住旧的 ArrayList</li>\n<li>适用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景。</li>\n</ul>\n<h1 id=\"面经汇总\"><a class=\"anchor\" href=\"#面经汇总\">#</a> 面经汇总</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhZ3VpZGUuY24vamF2YQ==\">javaguide</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL2Rpc2N1c3MvNTUxMDgzNjQ1NTUzOTU0ODE2\"> 学习线路</span> 里面有文档整理</p>\n<h2 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> java</h2>\n<ul>\n<li>\n<p><strong>java 真的没有指针吗？</strong><br />\n相比于 C++ 中的链表要通过指针 <code>Node* next;</code>  指定后继节点，而在 Java 中直接 <code>public Node next;</code>  就实现了，实现的方式是引用（除了八种基本类型 int、double、float、char 等，剩下的全都是引用类型），本质都是通过地址访问内存</p>\n<ul>\n<li>Java 引用里，会先将对象的引用（也就是 Node node）存到栈区里，然后 new 出来的东西就放入堆中（在堆中开辟了一块内存空间），这块空间会储存 Node 类中的成员变量以及成员方法的地址值，并且此空间还会产生一个地址值，通过等号又会将此地址值赋值给栈中的 node</li>\n<li>Java 的引用是指向一个对象，它是占一个新内存的，同时传参传的是复制值；而 C++ 的引用则是指向同一个内存的另外一个名字，也就是常说的别名，传的是实参。</li>\n</ul>\n</li>\n<li>\n<p><strong>jar 包内部的文件结构，以及当前 jar 包怎么调用别的文件夹的 jar 包？</strong><br />\njar 包（Java Archive）是一种用于打包 Java 类、资源和元数据的文件格式，通常用于将一组相关的类和资源打包成一个单独的可执行 JAR 文件。JAR 文件内部的结构通常是一个压缩文件，其中包含以下内容：</p>\n<ol>\n<li>\n<p><strong>META-INF 文件夹</strong>：该文件夹通常包含 MANIFEST.MF 文件，该文件包含 JAR 文件的元数据信息，如主类、依赖关系等。</p>\n</li>\n<li>\n<p><strong>Java 类文件</strong>：这些文件存放了编译后的 Java 类文件，按照包名进行组织，通常位于 JAR 文件的根目录或者以包名形式的文件夹中。</p>\n</li>\n<li>\n<p><strong>资源文件</strong>：除了 Java 类文件之外，JAR 文件还可以包含其他类型的文件，如配置文件、图片、文本文件等。这些文件可以放在 JAR 文件的任何位置。</p>\n</li>\n</ol>\n<p>要调用另一个 JAR 文件，你可以使用 Java 的类路径（Classpath）机制。类路径是一组目录路径或 JAR 文件路径，JVM 在搜索类和资源时会查找这些路径。在运行 Java 程序时，可以通过命令行参数  <code>-cp</code>  或者  <code>-classpath</code>  来指定类路径。</p>\n<ul>\n<li><code>java -cp myapp.jar:dependency.jar com.example.MyApp</code> 。  <code>-cp</code>  参数指定了类路径，其中包括了  <code>myapp.jar</code>  和  <code>dependency.jar</code> （也可以是绝对路径）。 <code>com.example.MyApp</code>  是你想要运行的主类。在 Windows 系统上，类路径的分隔符是  <code>;</code>  而不是  <code>:</code> 。</li>\n<li>也可以在 Manifest 文件中的  <code>Class-Path</code>  属性中指定：</li>\n<li><code>Class-Path: /path/to/Library/Library.jar</code>  JVM 将会根据这个路径（可相对，可绝对）加载依赖的 JAR 文件。</li>\n</ul>\n</li>\n<li>\n<p><strong>线程池和多线程有什么区别，如果自己维护可以循环等待的多线程有什么差异？</strong></p>\n<ol>\n<li>\n<p><strong>复用性</strong>：线程池可以自动管理线程的生命周期，并在任务执行完成后将线程放回线程池中以便重用，从而减少了线程创建和销毁的开销。而自定义多线程机制需要手动管理线程的创建、销毁和重用，这可能会增加代码的复杂度和错误的可能性。</p>\n</li>\n<li>\n<p><strong>资源管理</strong>：线程池可以限制同时执行的线程数量，并在需要时动态调整线程池的大小，从而更好地管理系统资源。自定义多线程机制可能需要额外的逻辑来实现线程数量的管理，这可能会增加代码的复杂度。<strong>任务队列、饱和 (抛弃) 策略</strong></p>\n</li>\n<li>\n<p><strong>线程生命周期管理</strong>：线程池提供了丰富的方法来管理线程的生命周期，例如设置线程的优先级、设置线程的超时时间、添加任务执行完成后的回调等。自定义多线程机制需要额外的工作来实现这些功能。</p>\n</li>\n<li>\n<p><strong>可维护性和可扩展性</strong>：线程池是一种标准化的解决方案，具有良好的可维护性和可扩展性。当你使用线程池时，其他开发人员更容易理解和维护你的代码。相比之下，自定义多线程机制可能需要更多的文档和解释，并且可能更难以理解和维护。</p>\n</li>\n</ol>\n<p>线程池（ <code>java.util.concurrent.ThreadPoolExecutor</code> ）是建立在 Java 标准库的基础上的，并没有直接和操作系统的进程调度对接。如果都能做到，那可能确实没什么差异。</p>\n</li>\n<li>\n<p><strong>njinx 本身的负荷怎么办？</strong><br />\n是的，Nginx 作为一个反向代理服务器和负载均衡器，虽然能够有效地分发请求到后端服务器，但它本身也存在一些潜在的瓶颈和限制，特别是在高并发场景下：</p>\n<ol>\n<li>\n<p><strong>单点故障</strong>：尽管 Nginx 负载均衡器可以将流量分发到多个后端服务器，但如果 Nginx 本身发生故障，整个系统的可用性将会受到影响。因此，为了提高可用性，通常会在 Nginx 前端再加上一层负载均衡或者使用高可用方案，如主备或者多主架构。</p>\n</li>\n<li>\n<p><strong>网络带宽</strong>：Nginx 的性能受限于其所在服务器的网络带宽。当流量过大时，可能会出现网络带宽不足的情况，从而影响请求的处理速度。</p>\n</li>\n<li>\n<p><strong>CPU 和内存资源</strong>：Nginx 处理请求时需要消耗 CPU 和内存资源。在高并发情况下，如果服务器的 CPU 或内存资源不足，可能会导致 Nginx 的性能下降，甚至出现请求延迟或丢失的情况。</p>\n</li>\n<li>\n<p><strong>连接数限制</strong>：Nginx 默认配置下有连接数限制，当连接数达到一定阈值时，新的连接将会被拒绝。因此，需要根据实际需求调整 Nginx 的连接数配置。</p>\n</li>\n<li>\n<p><strong>IO 操作</strong>：Nginx 处理请求时涉及到大量的 IO 操作，例如读取请求、转发请求、读取响应等。在高并发情况下，IO 操作可能成为瓶颈，影响系统的响应速度。</p>\n</li>\n</ol>\n<p>为了缓解以上瓶颈，可以采取以下措施：</p>\n<ul>\n<li>使用多台 Nginx 服务器进行负载均衡，通过水平扩展提高系统的处理能力。</li>\n<li>使用高性能硬件或者云计算资源，提高服务器的网络带宽、CPU 和内存资源。</li>\n<li>使用 Nginx 的缓存功能、压缩功能等优化配置，减少服务器的负载。</li>\n<li>使用其他辅助工具和技术，如 CDN、缓存服务器、反向代理集群等，来提高系统的整体性能和可用性。</li>\n</ul>\n<p>Nginx 集群和部署后端服务器集群实现不同的目标和需求（转发和处理业务，游乐园两层排队）。在实际应用中，通常会同时部署 Nginx 集群和后端服务器集群，以构建一个稳定、高效的分布式系统。</p>\n</li>\n<li>\n<p><strong>java8 特性？</strong></p>\n<ul>\n<li>lambda 表达式，经常配合函数式接口使用，可以有效减少代码量</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:lambdaDemo</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式 1：定义一个类 MyRunnable 实现 Runnable 接口，重写 run () 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"多线程程序启动了...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LambdaDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 实现类的方式实现需求</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">MyRunnable</span> my <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 创建 Thread 类的对象，把 MyRunnable 的对象作为构造参数传递</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>my<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 方式 2：匿名内部类的方式改进</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 把实现类的名字给省略掉了，稍微方便点，但 `run` 这个方法名其实也有点冗余，因为 Runnable 里面就这么一个方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LambdaDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 匿名内部类的方式改进</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"多线程程序启动了...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>①、方法形式参数为空，说明调用方法时不需要传递参数  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>②、方法返回值类型为<span class=\"token keyword\">void</span>，说明方法执行没有结果返回  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>③、方法体中的内容，是我们具体要做的事情</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 方式 3：Lambda 表达式的方式改进</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LambdaDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//Lambda 表达式改进</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"多线程程序启动了...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>①、<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：里面没有内容，可以看成是方法形式参数为空  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>②、<span class=\"token operator\">-></span>：用箭头指向后面要做的事情  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>③、<span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>：包含一段代码，我们称之为代码块，可以看成是方法体中的内容</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token operator\">-</span> <span class=\"token class-name\">Lambda</span>表达式的使用前提  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    ①、有一个接口  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    ②、接口中有且仅有一个抽象方法</pre></td></tr></table></figure><ul>\n<li>函数式接口：如果一个接口里面只有一个方法，那么这就是一个函数式接口，对于函数式接口，我们可以通过 lambda 表达式或者方法引用来进行快速的实现，而不必新建一个 class 去继承或者写一个匿名内部类\n<ul>\n<li>接口中只能有一个接口方法</li>\n<li>可以有静态方法和默认方法</li>\n<li>使用  <code>@FunctionalInterface</code>  标记</li>\n<li>默认方法可以被覆写</li>\n</ul>\n</li>\n<li>默认方法，意思是说，我们在写一个接口时可以通过  <code>default</code>  关键字为其中的方法提供默认的实现方案，使得实现类就算不覆写这个方法也没有关系：</li>\n<li>Stream API，我们可以把一个集合转换为流，在这个流上做各种操作，比如查找、排序、过滤等等</li>\n<li>新的 Date Time API，因为 java 中同时存在  <code>java.util.Date</code>  和  <code>java.sql.Date</code>  两个时间类，很容易让人迷惑，而且这两个包里的内容也存在诸多问题，因此 java8 中新增了  <code>java.time</code>  这个包来把所有时间类的 API 一网打尽</li>\n<li>Optional 类，很好的解决了  <code>NullPointerException</code>  的问题，避免源码被各种空检查污染，使源码更加简洁和更加容易阅读</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 假设有一个对象 obj , 你不知道它是不是为空的，但是你想用它的方法，可以这么玩 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> canUseObj <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> canUseObj<span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果 obj 不为空，则可以使用 obj 的方法，这里做个简单输出</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果把项目做成分布式的大型项目，有哪些地方需要优化</p>\n<ul>\n<li>代码（SQL 语句）优化</li>\n</ul>\n</li>\n<li>\n<p><strong>面对海量请求的时候如何保证请求能够快速响应？</strong></p>\n<ul>\n<li>负载均衡</li>\n<li>redis 缓存</li>\n<li>提高服务器性能</li>\n<li>优化流程（服务器尽量执行读操作）</li>\n<li>主从复制、读写分离</li>\n<li>监控调优</li>\n</ul>\n</li>\n<li>\n<p><strong>如果监控到了某个 api 某个时刻有请求有响应时间异常，该怎么去解决和分析？</strong></p>\n<ul>\n<li>保存上下文，使得能复现场景，因为也可能是网络波动等，但如果是代码问题可能有以下几个方面\n<ul>\n<li>线程池满了</li>\n<li>死锁</li>\n<li>超时时间过短</li>\n<li>服务 OOM</li>\n</ul>\n</li>\n<li>debug，连接测试环境的数据库，调试某个 API 接口的业务逻辑</li>\n</ul>\n</li>\n<li>\n<p><strong>分布式如何做到负载均衡？</strong></p>\n<ul>\n<li><strong>请求分发：</strong> 负载均衡器（Load Balancer）接收到来自客户端的请求，然后将请求分发给一组服务器节点</li>\n<li><strong>负载计算：</strong> 负载均衡器会根据各个服务器节点的负载情况，计算出最适合处理该请求的服务器</li>\n<li><strong>请求转发：</strong> 负载均衡器将请求转发给选择出的服务器节点进行处理</li>\n<li><strong>响应处理：</strong> 服务器节点处理请求后，将响应返回给客户端</li>\n<li>算法：随机、轮询、最小连接、加权、ip 哈希、动态（权重、最少相应）</li>\n</ul>\n</li>\n<li>\n<p><strong>在电脑上面 ping 某个域名，会有哪些步骤？</strong></p>\n<ul>\n<li>ping 是基于  <code>ICMP</code>  协议工作的</li>\n<li>主机查找本地系统 Hosts 文件的 DNS 缓存，如果存在该域名对应的 IP，则获取 IP，跳转到第 8 步；如果不存在，则继续</li>\n<li>主机向本网络路由器发起请求，查找路由 DNS 缓存，如果存在该域名对于的 IP，则获取 IP，如果不存在，则继续\n<ul>\n<li>向本地 ISP（互联网提供商）的 DNS 服务器发起请求，查找 DNS 服务器的缓存，如果存在该域名对应的 IP，如果不存在，则继续</li>\n<li>向根域名服务器发起请求，根域名服务器告诉本地服务器，下一次应查询的顶级域名服务器 dns.com 的 IP 地址</li>\n<li>向顶级域名服务器 dns.com 进行查询，顶级域名服务器 dns.com 告诉本地域名服务器，下一步应查询的权限服务器 dns.abc.com 的 IP 地址</li>\n<li>向权限域名服务器 dns.abc.com 进行查询，权限域名服务器 dns.abc.com 告诉本地域名服务器，所查询的主机的 IP 地址</li>\n</ul>\n</li>\n<li>查询到该域名对应的 IP 地址告诉给主机</li>\n<li>主机通过子网掩码判断该 IP 地址是本网段还是跨网段，若跨网段（子网掩码比对）：先查看本地 ARP 高速缓存，查看表中是否有本网络路由器（网关）的 MAC 地址，没有则利用 ARP 请求分组（广播）\n<ul>\n<li>主机将 ICMP 报文封装成 IP 数据报，IP 数据报的源地址为主机的 IP 地址，目的地址是域名对应的 IP 地址</li>\n<li>主机将 IP 数据报封装成 MAC 帧，MAC 帧的源地址为主机的 MAC 地址，目的地址是路由器的 MAC 地址</li>\n<li>路由器接收到 ICMP 报文之后，发现 MAC 帧的目的地址是自己，IP 地址是主机想要访问的 IP 地址，则将 MAC 帧的源地址改为自己的 MAC 地址，目的地址改为本网段另一个路由的 MAC 地址（也要通过 ARP 协议获取），转发下去...</li>\n<li>直到最后一个路由根据 ARP 协议，找到了主机想要访问的 IP 地址对应的主机的 MAC 地址，然后将 ICMP 报文封装成 MAC 帧发送给该域名主机。<br />\n<img data-src=\"https://cdn.xiaolincoding.com//mysql/other/c1019a8be584b27c4fc8b8abda9d3cf1.png\" alt=\"\" /></li>\n</ul>\n</li>\n<li>一个 ARP 包，源 IP 是自己的，目的 IP 是 B 的，源 MAC 是自己的，目的 MAC 是广播的。然后这个请求包在内网中被广播，当其他机器接收到这个包时，用目的 IP 和自己的 IP 进行比较，不是的话就丢弃。B 接到时，发现 IP 与自己的一样，就应答这个包的请求，把自己的 MAC 发送给 A</li>\n</ul>\n</li>\n<li>\n<p><strong>路由器收到一个包是怎么转发出去的，修改了哪些值和字段？</strong></p>\n<ul>\n<li>源 MAC 地址、目标 MAC 地址</li>\n</ul>\n</li>\n<li>\n<p><strong>对阿里云的服务了解的咋样，和其他的一些竞品有什么区别之类的？</strong></p>\n<ul>\n<li>阿里云的电商行业解决方案在国内无出其右，场景丰富，方案完善；其次是政务云方便，杭州城市大脑就是最好的证明（这几年貌似也只有这一个代表作）；最后是金融和工业互联网，阿里云虽说有布局，但生态相对不够完善，提供细分解决方案还不错，但整体解决方案相对不足。 稳定和安全</li>\n<li>腾讯云脱胎于之前的 QQ 事业群，并长期存在于该事业群之下，开始并未得到重视，但随着云计算的发展及行业曙光的出现，腾讯云正在加速布局，也取得了一定的成绩。  性价比</li>\n<li>百度云的优势无疑是人工智能，特别是在自动驾驶方面的人工智能；至于在其他方面的优势，百度目前还未体现出来，但百度是比较重视技术的，所以需要时间</li>\n</ul>\n</li>\n<li>\n<p><strong>面向对象特征， 开闭原则？</strong></p>\n<ul>\n<li>继承、封装、多态性（方法重载 overload 实现的是编译时的多态性（也称为前绑定），而方法重写 override 实现的是运行时的多态性（也称为后绑定））、抽象</li>\n<li>五大原则：单一职责原则（每一个类的职责越单一，越专注最好，低耦合和高内聚）、开放封闭原则（开放扩展、封闭修改，如继承）、LisKov 替换原则（子类必须可以替换其父类，反之不成立，面向接口编程）、依赖倒置原则（高层模块不依赖低层模块、顶层只需调用这些抽象接口，底层只需实现这些抽象接口。消除了顶层和底层的直接依赖）、接口隔离原则（使用多个小而专的接口，不用大而广的接口）</li>\n</ul>\n</li>\n<li>\n<p>碰到 bug 怎么定位</p>\n</li>\n<li>\n<p><strong>跟踪技术（动态追踪技术？）</strong></p>\n<ul>\n<li>曾经的 JSP 作为可以写 html 和 java 共存的语言， 会被转换为 java 代码 -&gt; 字节码 -&gt;class 文件 -&gt;servlet 处理，被 JVM 部署后，只需要刷新页面就能看到修改代码后的效果，这是现在的前后端分离框架如 Spring 等做不到的，通过创建一个新的 ClassLoader 实例，来加载新编译的 Servlet 类</li>\n<li>问题本质上是动态改变内存中已存在对象的行为的问题，对于非私有的方法，会有个存储对象行为的这个公共的地方，这个方法区域是在虚拟机启动时创建的，在所有 Java 虚拟机线程之间共享，并且在逻辑上是堆区域的一部分。它存储每个类的结构，例如运行时常量池、字段和方法数据以及方法和构造函数的代码。</li>\n<li>有没有办法加载一个已经加载过的类呢？如果有的话，我们就能修改字节码中目标方法所在的区域，然后重新加载这个类，这样方法区中的对象行为（方法）就被改变了，而且不改变对象的属性，也不影响已经存在对象的状态，那么就可以搞定这个问题了。</li>\n<li><code>java.lang.instrument.Instrumentation</code></li>\n</ul>\n</li>\n<li>\n<p><strong>java 内存泄漏？</strong></p>\n<ul>\n<li>\n<p>静态集合类引起内存泄漏</p>\n<ul>\n<li>使用 HashMap、Vector 等集合时，最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，则容器中的对象在程序结束之前将不能被释放，从而造成内存泄漏，简单而言，长生命周期的对象持有短生命周期对象的引用，尽管短生命周期的对象不再使用，但是因为长生命周期对象持有它的引用而导致不能被回收。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">Vector</span> vector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vector <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>object <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如上述情况，如果仅仅释放引用本身（object = null），那么 Vector 仍然引用该对象，所以这个对象对 GC 来说是不可回收的。如果对象加入到 Vector 后，还必须从 Vector 中删除，最简单的方法就是将 Vector 对象设置为 null</li>\n<li><strong>解决办法</strong>：静态引用时注意应用对象置空或者少用静态引用</li>\n</ul>\n</li>\n<li>\n<p>资源未关闭或释放导致内存泄露</p>\n<ul>\n<li>创建或者打开一个流或者是新建一个网络连接的时候，JVM 都会为这些资源类分配内存做缓存，常见的资源类有网络连接，数据库连接以及 IO 流。如果忘记关闭这些资源，会阻塞内存，从而导致 GC 无法进行清理</li>\n<li><strong>解决办法</strong>：在 finally 中加上关闭，防止出现异常未正常释放资源</li>\n</ul>\n</li>\n<li>\n<p>不正确的 equals () 和 hashCode ()</p>\n<ul>\n<li>在 HashMap 和 HashSet 这种集合中，常常用到 equal () 和 hashCode () 来比较对象，如果重写不合理，将会成为潜在的内存泄露问题。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadTest</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token class-name\">ThreadTest</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadTest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">ThreadTest</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadTest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token class-name\">ThreadTest</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadTest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t  map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>t1 <span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t  map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t  map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>t3 <span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行结果：\"</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 输出是 3</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>上述代码的 ThreadTest 类并没有重写 equals 和 hashCode 方法，因此在执行 put 操作时，Map 会认为每次创建的对象都是新的对象，从而导致内存不断的增长，会导致内存泄漏的可能。</li>\n<li><strong>解决方法</strong>：重写</li>\n</ul>\n</li>\n<li>\n<p>重写了 finalize () 的类</p>\n<ul>\n<li>使用 finalize () 方法会存在潜在的内存泄露问题，每当类的 finalize () 方法被重写时，该类的对象不会立即被垃圾回收。相反，GC 将它们排队等待最后确定，在以后的某个时间点进行回收。</li>\n</ul>\n</li>\n<li>\n<p>使用 ThreadLocal 造成内存泄露</p>\n<ul>\n<li>一旦线程不在存在，ThreadLocal 就应该被垃圾收集，而现在线程的创建都是使用线程池，线程池有线程重用的功能，因此线程就不会被垃圾回收器回收。所以使用到 ThreadLocal 来保留线程池中线程的变量副本时，ThreadLocal 没有显示的删除时，就会一直保留在内存中，不会被垃圾回收。</li>\n<li><strong>解决方法</strong>：不使用 ThreadLocal 时，调用 remove () 方法，该方法删除了此变量的当前线程值。不要使用 ThreadLocal.set (null)，它只是查找与当前线程关联的 Map 并将键值对设置为当前线程为 null。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>java GC 算法</strong></p>\n<ul>\n<li>见 JVM 中<a href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\">垃圾回收算法</a>小节</li>\n</ul>\n</li>\n<li>\n<p>CMS</p>\n</li>\n<li>\n<p><strong>mybatis 中 $ 和 #区别</strong></p>\n<ul>\n<li>都是从 xml 动态解析参数的语法，最大的区别则是 <code>#&#123;&#125;</code>  方式能够很大程度防止 sql 注入 (安全)， <code>$&#123;&#125;</code>  方式无法防止 Sql 注入</li>\n<li><code>#&#123;&#125;</code> #{} 表示一个占位符号 相当于  <code>jdbc</code>  中的 <strong>?</strong> 符号。同时，将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如果 sql 语句中只有一个参数，此时参数名称可以随意定义</li>\n<li><code>$&#123;&#125;</code>  将传入的数据直接显示生成在 sql 中， <code>$&#123;value&#125;</code>  中 <code>value</code>  值有限制只能写对应的 value 值不能随便写，因为 <code>$&#123;&#125;</code>  不会自动进行 jdbc 类型转换</li>\n<li>在 <code>JDBC</code>  能使用占位符的地方，最好优先使用 <code>#&#123;&#125;</code> ，在 <code>JDBC</code>  不支持使用占位符的地方，就只能使用 <code>$&#123;&#125;</code> ，典型情况就是动态参数（字段名、表名、排序列名、map 的 key 必须用 <code>$&#123;&#125;</code> ，因为不能加上 “” 引号）</li>\n</ul>\n</li>\n<li>\n<p><strong>mysql 事务隔离级别</strong></p>\n<ul>\n<li>读未提交：在读未提交隔离级别下，事务 A 可以读取到事务 B 修改过但未提交的数据。可能发生<strong>脏读、不可重复读和幻读</strong>问题，一般很少使用此隔离级别。就是啥问题都会有，然后随着隔离级别的提高，依次解决。</li>\n<li>读已提交：在读已提交隔离级别下，事务 B 只能在事务 A 修改过并且已提交后才能读取到事务 B 修改的数据。读已提交隔离级别解决了脏读的问题，但可能发生不可重复读和幻读问题，一般很少使用此隔离级别。</li>\n<li>可重复读：在可重复读隔离级别下，事务 B 只能在事务 A 修改过数据并提交后，自己也提交事务后，才能读取到事务 B 修改的数据。可重复读隔离级别解决了脏读和不可重复读的问题，但可能发生幻读问题。\n<ul>\n<li>为什么上了写锁（写操作），别的事务还可以读操作？因为 InnoDB 有 MVCC 机制（多版本并发控制），可以使用快照读，而不会被阻塞。</li>\n</ul>\n</li>\n<li>可串行化：各种问题（脏读、不可重复读、幻读）都不会发生，通过加锁实现（读锁和写锁）。</li>\n<li><strong>幻读</strong>：是存不存在的问题。A 事务 select 某记录是否存在，结果为不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入，此时就发生了幻读。产生这样的原因是因为有另一个事务往表中插入了数据</li>\n<li><strong>不可重复读</strong>：说的是变没变化的问题，原来是 A, 现在却变为了 B, 则为不可重复读</li>\n<li><strong>脏读</strong>：就是一个事务读到另一个事务没有提交的数据。事务 A 修改了一个数据，但未提交，事务 B 读到了事务 A 未提交的更新结果，事务 B 读到的就是脏数据</li>\n</ul>\n</li>\n<li>\n<p><strong>mysql 锁有哪些，该怎么锁行</strong></p>\n<ul>\n<li>\n<p>全局锁</p>\n<ul>\n<li>全局锁主要应用于做<strong>全库逻辑备份</strong>，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。</li>\n<li>会影响业务，怎么解决？如果数据库的引擎支持的事务支持<strong>可重复读的隔离级别</strong>，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View。这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。</li>\n</ul>\n<pre><code class=\"language-mysql\">flush tables with read lock\nunlock tables\n</code></pre>\n</li>\n<li>\n<p>表级锁</p>\n<ul>\n<li>表锁\n<ul>\n<li>表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放</li>\n<li>不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，<strong>InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁</strong></li>\n</ul>\n</li>\n<li>元数据锁（MDL）\n<ul>\n<li>不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：对一张表进行 CRUD 操作时，加的是 <strong>MDL 读锁</strong>；对一张表做结构变更操作的时候，加的是 <strong>MDL 写锁</strong>；</li>\n<li>当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）</li>\n<li>反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）</li>\n<li>MDL 是在事务提交后才会释放，这意味着<strong>事务执行期间，MDL 是一直持有的</strong>。如果有 A 开启事务，进行了 select，此时读锁。B 开事务也读，再加读锁（共享锁）没事。C 若写，由于有了读锁，只能阻塞。后续还有 DEF... 读操作，也会阻塞。因为申请 MDL 锁的操作会形成一个队列，队列中<strong>写锁获取优先级高于读锁</strong>，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作</li>\n</ul>\n</li>\n<li>意向锁\n<ul>\n<li>当执行插入、更新、删除操作 / 读取，需要先对表加上「意向独占锁 / 共享锁」。也就是某行加锁的时候，innoDB 会自动加个表级别意向锁，比如 A 要 7 行改数据，除了 7 行的排他锁，还有意向独占锁。B 要改 8 行，也会给表加个意向独占锁，意向锁之间兼容，7.8 都有各自的排他锁，和两个意向表锁，此时来了个别的表锁，就会看到意向锁，从而阻塞等待，而非遍历全表找有没哪行加了锁</li>\n</ul>\n</li>\n<li>AUTO-INC 锁\n<ul>\n<li><code>AUTO_INCREMENT</code>  的主键自增就是通过该锁实现的，<strong>不是在一个事务提交后才释放，而是在执行完插入语句后就会立即释放</strong>。也就是插入语句会排队执行，上一个插入没完成时有 AUTO-INC 锁。有一定性能影响，5.1.22 后有一个清凉所<strong>给 <code>AUTO_INCREMENT</code>  字段赋值一个自增的值，就把这个轻量级锁释放了</strong>，而不需要等待整个插入语句执行完后才释放锁.\n<ul>\n<li>但主从复制会有问题，主库很即时赋值，但 binlog 日志会将不同 session 的语句合并后一起执行，导致顺序可能不同。解决：binlog 日志格式要设置为 row，这样在 binlog 里面记录的是主库分配的自增值，到备库执行的时候，主库的自增值是什么，从库的自增值就是什么</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>行级锁（InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁）</p>\n<ul>\n<li>普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为<strong>锁定读</strong>。</li>\n<li>上面这两条语句必须在一个事务中，<strong>因为当事务提交了，锁就会被释放</strong></li>\n<li>共享锁（S 锁）满足读读共享，读写互斥。独占锁（X 锁）满足写写互斥、读写互斥</li>\n<li>Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的</li>\n<li>Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象</li>\n<li>next-key lock 是包含间隙锁 + 记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-mysql\">//对读取的记录加共享锁\nselect ... lock in share mode;\n//对读取的记录加独占锁\nselect ... for update;\n</code></pre>\n</li>\n<li>\n<p><strong>乐观锁悲观锁实现方式？</strong></p>\n<ul>\n<li><strong>悲观锁（Pessimistic Lock）：</strong> 就是很悲观，每次去拿数据的时候都认为别人会修改。所以每次在拿数据的时候都会上锁。这样别人想拿数据就被挡住，直到悲观锁被释放，悲观锁中的共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程。数据库中的行锁，表锁，读锁（共享锁），写锁（排他锁），以及 syncronized 实现的锁均为悲观锁</li>\n<li><strong>乐观锁（Optimistic Lock）：</strong> 就是很乐观，每次去拿数据的时候都认为别人不会修改。所以不会上锁，但是如果想要更新数据，则会在更新前检查在读取至更新这段时间别人有没有修改过这个数据。如果修改过，则重新读取，再次尝试更新，循环上述步骤直到更新成功，乐观锁适用于多读的应用类型，这样可以提高吞吐量。一般的实现乐观锁的方式就是记录数据版本（version）或者是时间戳来实现，不过使用版本记录是最常用的。</li>\n</ul>\n</li>\n<li>\n<p><strong>mysql innerjoin 有什么作用？</strong></p>\n<ul>\n<li>用于将两个或多个表中的记录根据某个条件进行匹配，并返回匹配的记录</li>\n<li>join 等同于 inner join（显性）等同于 where（隐性）。没有本质区别，结果也一样。但是！隐性连接随着数据库语言的规范和发展，已经逐渐被淘汰，比较新的数据库语言基本上已经抛弃了隐性连接，全部采用显性连接了。</li>\n</ul>\n</li>\n<li>\n<p><strong>如何优化 mysql 语句？</strong></p>\n<ul>\n<li>避免返回多余的行（where 精准定位）和列（指定列名而不是 *）</li>\n<li>若插入数据过多，考虑批量插入。</li>\n<li>查询一条或者最大 / 最小一条记录，建议使用 limit 1</li>\n<li>尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描</li>\n<li>尽量避免使用 in 和 not in，会导致引擎走全表扫描。如果是连续数值，可以用 between 代替；如果是子查询，可以用 exists 代替</li>\n<li>尽量避免使用 or，会导致数据库引擎放弃索引进行全表扫描。可以用 union 代替 or</li>\n<li>尽量避免进行 null 值的判断，会导致数据库引擎放弃索引进行全表扫描。可以给字段添加默认值 0，对 0 值进行判断</li>\n<li>尽量避免在 where 条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描。 在等号右侧计算</li>\n<li>order by 条件要与 where 中条件一致，否则 order by 不会利用索引进行排序。 <code>SELECT * FROM t order by age;</code>  不走索引， <code>SELECT * FROM t where age &gt; 0 order by age;</code>  走索引</li>\n</ul>\n</li>\n<li>\n<p><strong>redis 缓存更新策略？</strong><br />\n<a href=\"#\">Post not found: 商城项目优化 该文的1.6小节</a></p>\n</li>\n<li>\n<p><strong>redis 数据类型？</strong></p>\n<ul>\n<li>字符串、哈希、列表、集合和有序集合（ZSet）。</li>\n</ul>\n</li>\n<li>\n<p><strong>zset 底层</strong></p>\n<ul>\n<li>每个元素都会关联一个 double 类型的分数 score 为成员排序，内部使用 hashmap 和跳跃表实现存储和有序，HaspMap 存放成员到 score 的映射，而跳跃表存放所有的成员，使用跳表实现比较高的查询效率可以实现优先级队列需求。</li>\n</ul>\n</li>\n<li>\n<p><strong>跳表工作原理</strong></p>\n<ul>\n<li>跳表在动态查找过程中使用了一种非严格的平衡机制来让插入和删除都更加便利和快捷，这种非严格平衡是基于概率的，而不是平衡树的严格平衡</li>\n<li>在有序链表中插入和删除都比较简单，搜索时无法依靠下标只能遍历，但是明明知道要走两步可以到达目的地，偏偏只能一步步走，这就是痛点。<strong>中间层</strong></li>\n<li>加入要搜索值为 55 的节点，则先在上层进行搜索，由 16 跳到 38，在 38 的下一跳将到达 72，因此向下降一级继续类似的搜索，则找到 55。</li>\n<li><img data-src=\"https://pic4.zhimg.com/80/v2-fefc4bea0c7ee756401ad9c918613a13_720w.webp\" alt=\"\" /></li>\n<li>基于偶数节点增加索引并且只有两层的情况下，最高层的节点数是 n/2，整体来看搜索的复杂度降低为 O (n/2)，并不要小看这个 1/2 的系数，看到这里会想 增加索引层数到 k，那么复杂度将指数降低为 O (n/2^k)。但只有在该层，有同样层数的节点，才有用，比如一个节点 1000 层，其他还在 10 层以内，就没有意义。</li>\n<li><strong>如何确定最高索引层数 m 呢？</strong>\n<ul>\n<li>如果一个链表有 n 个结点，如果每两个结点取出一个结点建立索引，那么第一级索引的结点数是 n/2，第二级索引的结点数是 n/4，以此类推第 m 级索引的结点数为 n/(2^m)，前面说过最高层结点数为 2，因此存在关系：</li>\n<li><img data-src=\"https://pic4.zhimg.com/80/v2-4f541c4d76714c82905cc3cf4d99085b_720w.webp\" alt=\"\" /></li>\n<li>redis 中用的随机层数... 有个概率公式：节点层数恰好等于 K 的概率为 p^(k-1)(1-p)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>spring 代理如何实现的？</strong></p>\n<ul>\n<li>静态代理，就是对接口的实现从而实现功能增强，当接口中的功能增加了或修改了，会影响到众多的实现类，都需要修改，工作量会增大，影响比较大。</li>\n<li>动态代理：JDK Proxy 和 CGLIB，jdk 只能代理接口，如果项目没有接口用 CGLIB；另外 Spring AOP 只能实现对方法的增强。当你修改了接口中的方法时，不会影响代理类。在程序的执行过程中，使用 jdk 机制，创建代理类对象，并动态的指定要代理目标类。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:JDKProxy</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">-</span> <span class=\"token number\">1.</span>创建接口，定义目标类要完成的功能</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">-</span> <span class=\"token number\">2.</span>创建目标类实现接口</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">-</span> <span class=\"token number\">3.</span>创建<span class=\"token class-name\">InvocationHandler</span>接口实现类，在invoke方法中完成代理类的功能</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span> <span class=\"token number\">4.</span>使用<span class=\"token class-name\">Proxy</span>类的静态方法，创建代理对象，并把返回值转为接口类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationHandler</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Proxy</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentProxyDTJdk</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 被代理的接口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 生成得到代理类 & lt; 类加载器（加载到那个位置），代理类的接口，代理处理程序实现类，也就是此类 this></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Object</span> result<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"study\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            result <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token function\">openBook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">lectures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">classOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"homework\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            result <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token function\">proDoHomework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">DoHomework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">HomeworkOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">openBook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生打开书本预习。。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lectures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生听老师讲课，做笔记，完成课堂练习。。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">classOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生上课结束，收拾书包，带走垃圾。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">proDoHomework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生准备做家庭作业，复习今天课堂所学得的知识。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">DoHomework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生打开作业本，写作业、检查改错、预习。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">HomeworkOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生完成家庭作业，收拾书本。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token class-name\">StudentImpl</span> student<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token class-name\">StudentProxyDTJdk</span> proxyJdk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentProxyDTJdk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tproxyJdk<span class=\"token punctuation\">.</span><span class=\"token function\">setStudent</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token class-name\">Student</span> proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> proxyJdk<span class=\"token punctuation\">.</span><span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tproxy<span class=\"token punctuation\">.</span><span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tproxy<span class=\"token punctuation\">.</span><span class=\"token function\">homework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:Cglib</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">-</span> <span class=\"token number\">1</span>）o表示增强的对象，即实现这个接口类的一个对象；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">-</span> <span class=\"token number\">2</span>）method表示要被拦截的方法；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">-</span> <span class=\"token number\">3</span>）objects表示要被拦截方法的参数；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span> <span class=\"token number\">4</span>）methodproxy表示要触发父类的方法对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cglib<span class=\"token punctuation\">.</span>proxy<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MethodInterceptor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cglib<span class=\"token punctuation\">.</span>proxy<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MethodProxy</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentProxyDTCglib</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MethodInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodProxy</span> methodProxy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Object</span> result<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"study\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            result <span class=\"token operator\">=</span> methodProxy<span class=\"token punctuation\">.</span><span class=\"token function\">invokeSuper</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">openBook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">lectures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">classOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"homework\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            result <span class=\"token operator\">=</span> methodProxy<span class=\"token punctuation\">.</span><span class=\"token function\">invokeSuper</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">proDoHomework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">DoHomework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">HomeworkOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">openBook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生打开书本预习。。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lectures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生听老师讲课，做笔记，完成课堂练习。。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">classOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生上课结束，收拾书包，带走垃圾。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">proDoHomework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生准备做家庭作业，复习今天课堂所学得的知识。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">DoHomework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生打开作业本，写作业、检查改错、预习。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">HomeworkOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生完成家庭作业，收拾书本。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token class-name\">StudentProxyDTCglib</span> cglibProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentProxyDTCglib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token class-name\">Enhancer</span> enhancer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 设置代理目标</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tenhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StudentImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 设置单一回调对象，在调用中拦截对目标方法的调用</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tenhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span>cglibProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 设置类加载器</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tenhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StudentImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tstudent<span class=\"token punctuation\">.</span><span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tstudent<span class=\"token punctuation\">.</span><span class=\"token function\">homework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Enhancer 是一个非常重要的类，它允许为非接口类型创建一个 JAVA 代理，Enhancer 动态的创建给定类的子类并且拦截代理类的所有的方法，和 JDK 动态代理不一样的是不管是接口还是类它都能正常工作。</p>\n<ul>\n<li>\n<p><strong>反射</strong></p>\n<ul>\n<li>反射让我们在程序运行的时候能够查看到类的信息，获取并调用类的任意方法和属性。像 <code>Student stu = new Student; Class c = stu.getClass();</code>    <code>Class.forName(className)</code>   <code>Class c3 = Student.class;</code></li>\n<li>在 Java 的 java.lang.reflect 中有三个类：Field、Method、Constructor 分别来描述类的域【也就是变量】，方法和构造器。</li>\n<li>最常用就是辅助动态代理的实现，事先并不知道代理类是什么，代理类是在运行时才生成的。</li>\n<li>java.lang.Class 是访问类型元数据的接口，也是实现反射的关键数据。通过 Class 提供的接口，可以访问一个类型的方法、字段等信息。</li>\n<li>Java 的反射是 加载到 jvm 中的.class 文件来进行操作的。.class 文件中包含 java 类的所有信息，当你不知道某个类具体信息时，可以使用反射获取 class</li>\n</ul>\n</li>\n<li>\n<p><strong>AOP 的原理</strong></p>\n<ul>\n<li>就是基于上面说的动态代理，对于是否为实现了接口的类，而采用 JDK/CGLIB。而代理又用到了反射。</li>\n</ul>\n</li>\n<li>\n<p><strong>spring 的设计模式有哪些？</strong></p>\n<ul>\n<li><strong>工厂设计模式</strong>（简单工厂和工厂方法）：Spring 使用工厂模式可以通过 BeanFactory 或 ApplicationContext 创建 bean 对象\n<ul>\n<li>BeanFactory ：延迟注入 (使用到某个 bean 的时候才会注入), 相比于 BeanFactory 来说会占用更少的内存，程序启动速度更快。</li>\n<li>ApplicationContext ：容器启动的时候，不管你用没用到，一次性创建所有 bean 。BeanFactory 仅提供了最基本的依赖注入支持，ApplicationContext 扩展了 BeanFactory , 除了有 BeanFactory 的功能还有额外更多功能，所以一般开发人员使用 ApplicationContext 会更多。</li>\n</ul>\n</li>\n<li><strong>单例设计模式</strong>：Spring 中 bean 的默认作用域就是 singleton。\n<ul>\n<li>除了 singleton 作用域，Spring bean 还有下面几种作用域：prototype （多例，每次都生成）、request（每次 HTTP 请求生成一个，仅在该次请求内有效）、session（每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效）、global-session： 全局 session 作用域，仅仅在基于 portlet 的 web 应用中才有意义，Spring5 已经没有了</li>\n</ul>\n</li>\n<li><strong>代理设计模式</strong>：Spring AOP 就是基于动态代理的</li>\n<li><strong>模板方法设计模式</strong>：模板方法模式是一种行为设计模式，它定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。\n<ul>\n<li>通过继承实现父类方法？</li>\n</ul>\n</li>\n<li><strong>观察者设计模式</strong>：它表示的是一种对象与对象之间具有依赖关系，当一个对象发生改变时，这个对象锁依赖的对象也会做出反应。<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:观察者模式</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 定义一个事件<span class=\"token operator\">:</span> 实现一个继承自 <span class=\"token class-name\">ApplicationEvent</span>，并且写相应的构造函数；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 定义一个事件监听者：实现 <span class=\"token class-name\">ApplicationListener</span> 接口，重写 <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> 使用事件发布者发布消息<span class=\"token operator\">:</span> 可以通过 <span class=\"token class-name\">ApplicationEventPublisher</span> 的 <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法发布消息。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 定义一个事件，继承自 ApplicationEvent 并且写相应的构造函数  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DemoEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 定义一个事件监听者，实现 ApplicationListener 接口，重写 onApplicationEvent () 方法；  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DemoEvent</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 使用 onApplicationEvent 接收消息  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到的信息是：\"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 发布事件，可以通过 ApplicationEventPublisher  的 publishEvent () 方法发布消息。  </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoPublisher</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 发布事件  </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li><strong>适配器设计模式</strong>：又叫包装器 (Wrapper) 模式，适配器设计模式将一个接口转换成客户希望的另一个接口，适配器模式使得接口不兼容的那些类可以一起工作</li>\n<li><strong>装饰者设计模式</strong>：装饰者设计模式可以动态地给对象增加些额外的属性或行为。如 DataSource 切换不同的数据库和数据源</li>\n<li><strong>策略设计模式</strong>：Spring 框架的资源访问接口就是基于策略设计模式实现的。</li>\n</ul>\n</li>\n<li>\n<p><strong>举一个适配器模式的例子</strong></p>\n<ul>\n<li>类适配：(目标用接口实现）就好比有适配者类 A，目标抽象类接口 B，适配器类 C 实现 B 又继承 A。此时实现 B 中的方法，又可以 <code>super.Amethod()</code>  实现 A 中的方法。客户端实际用的是 C</li>\n<li>对象适配：（目标用抽象类实现）就是 C 中实例一个 A，同时继承 B，实现 B 中方法是调用实例 A 的方法 <code>A.Amethod()</code> ，从而封装适配。客户端用的也是 C</li>\n</ul>\n</li>\n<li>\n<p><strong>线程池的创建方式和主要参数</strong></p>\n<ul>\n<li>见线程章节的<a href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0\">线程池</a>。ExecutorService 要手动往里添加线程（本质上是一种异步执行机制，它能够在后台执行任务），ThreadPoolExecutor（是前者的具体实现）后台会管理好对应的线程，直接添加要执行的方法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:Pool</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> pool <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//1 提供指定线程数量的线程池</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> service <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//2 执行指定的线程操作，需要实现 Runnable 接口或者 Callable 接口实现类的对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        thread thread1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        thread0 thread2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">thread0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//3 将实例化的对象作为参数 执行 service.execute ();</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        service<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>thread1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        service<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>thread2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//service.submit (); 适用于 callable</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">ThreadPoolExecutor</span> service1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">)</span>service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        service1<span class=\"token punctuation\">.</span><span class=\"token function\">setCorePoolSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//4 关闭线程池</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        service<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 直接使用 ThreadPoolExecutor</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token class-name\">ThreadPoolExecutor</span> pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 任务 1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        pool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--helloWorld_001--\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 任务 2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        pool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--helloWorld_002--\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><strong>索引失效有哪些情况？</strong></p>\n<ul>\n<li>数据量过大，导致索引无法全部存储在内存中，需要从磁盘中读取数据，这样会导致查询速度变慢。</li>\n<li>数据库表中的数据频繁更新，导致索引失效。比如删除或者更新某条数据时，索引可能需要重新构建。</li>\n<li>数据库表中的数据分布不均匀，导致索引失效。比如某些数据重复出现的次数很多，而其他数据只有很少的出现次数，这种情况下索引就会失效。</li>\n<li>数据库表中的<strong>数据类型不匹配</strong>，导致索引失效。比如将字符串类型的数据存储在数值型的字段中，会导致索引失效。</li>\n<li>数据库表中的数据存在<strong>大量的 NULL 值</strong>，导致索引失效。因为 NULL 值无法作为索引字段。</li>\n<li>查询条件（where）中使用了<strong>函数、操作符或者表达式</strong>，导致索引失效。比如使用 LIKE 关键字模糊查询、使用 <strong>OR</strong> 连接多个查询条件（除非 or 的每个列都有索引）等。</li>\n<li>数据库表中存在大量的重复数据，导致索引失效。这种情况下，查询时需要扫描大量的重复数据，导致查询速度变慢。</li>\n</ul>\n</li>\n<li>\n<p>r<strong>edis 可以做什么？</strong></p>\n<ul>\n<li>缓存：提高数据访问速度和响应速度，减少数据库压力，应对高并发</li>\n<li>队列：Redis 支持列表数据类型，可以将消息存储在列表中，并且支持阻塞式操作，可以实现消息队列的等待和通知机制</li>\n<li>分布式锁：Redis 可以作为一种分布式锁的存储层，通过缓存锁信息和锁状态，实现分布式锁和并发控制</li>\n<li>计数器</li>\n<li>轻量级数据库</li>\n</ul>\n</li>\n<li>\n<p><strong>什么是缓存穿透，如何解决？</strong></p>\n<ul>\n<li>如果有大量的请求传入的商品 id，在缓存中和数据库中都不存在（数据库有就是缓存击穿），这些请求不就每次都会穿透过缓存，而直接访问数据库了</li>\n<li>可以选择过滤器（id 是否在数据库而 放行），但又会有过滤器同步问题。另一个取巧就是不存在的商品 id 访问时也缓存一个不存在缓存，下次在遇到就直接拒绝</li>\n</ul>\n</li>\n<li>\n<p>线程池参数，工作流程，拒绝策略</p>\n<ul>\n<li>见线程章节的线程池<a href=\"#%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5\">小节</a></li>\n</ul>\n</li>\n<li>\n<p>场景题：如何构建一个高并发的系统</p>\n</li>\n<li>\n<p>Exception 和 Error 有什么区别？</p>\n<ul>\n<li>在 Java 中，所有的异常都有一个共同的祖先  <code>java.lang</code>  包中的  <code>Throwable</code>  类。 <code>Throwable</code>  类有两个重要的子类:</li>\n<li><strong> <code>Exception</code> </strong> : 程序本身可以处理的异常，可以通过  <code>catch</code>  来进行捕获。 <code>Exception</code>  又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</li>\n<li><strong> <code>Error</code> </strong>： <code>Error</code>  属于程序无法处理的错误 ，<s>我们没办法通过  <code>catch</code>  来进行捕获</s>不建议通过 <code>catch</code>  捕获 。例如 Java 虚拟机运行错误（ <code>Virtual MachineError</code> ）、虚拟机内存不够错误 ( <code>OutOfMemoryError</code> )、类定义错误（ <code>NoClassDefFoundError</code> ）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"腾讯csig\"><a class=\"anchor\" href=\"#腾讯csig\">#</a> 腾讯 CSIG</h3>\n<ul>\n<li>\n<p>实习期间做了什么项目东西？有没有遇到过什么比较难的问题？自己参与的比较深，可以解决工作中的问题？</p>\n<ul>\n<li>没有，想下项目里难以实现的。</li>\n</ul>\n</li>\n<li>\n<p>redis 缓存用到的是什么数据结构？有序集合的底层原理实现？</p>\n<ul>\n<li>字符串、哈希、列表、集合和有序集合（ZSet）。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDA0MjIyNDE4MSNpdGVtLTI=\">参考</span></li>\n<li>hash 一个 score、跳层</li>\n</ul>\n</li>\n<li>\n<p><strong>Java 中的锁有哪几种？分别是什么实现方式？</strong></p>\n<ul>\n<li>Synchronized（不公平）</li>\n<li>ReentrantLock 重入锁 （可公平可不公平）： <code>Lock lock = new ReentrantLock(); lock.lock(); try&#123;&#125;catch&#123;&#125;finally &#123;lock.unlock();&#125;</code></li>\n<li>ReadWriteLock 读写锁（不公平）：ReadWriteLock 也是一个接口，提供了 readLock 和 writeLock 两种锁的操作机制，一个资源可以被多个线程同时读，或者被一个线程写，但是不能同时存在读和写线程。 <code>lock.writeLock().lock();lock.writeLock().unlock();</code>   <code>lock.readLock().lock();lock.readLock().unlock();</code></li>\n<li>公平锁会按照时间的先后顺序来给予锁，不公平锁在等待队列随机挑选一个来给予锁</li>\n</ul>\n</li>\n<li>\n<p><strong>Java IO 中的阻塞式 IO 和非阻塞式 IO 的区别和联系？</strong></p>\n<ul>\n<li>阻塞式 IO 与同步 I/O 模型相似，它也需要应用程序等待 I/O 操作完成。如 <code>FileInputStream</code></li>\n<li>非阻塞 I/O 模型允许应用程序发起 I/O 操作后继续执行其他任务，而不必等待操作完成。如 <code>SocketChannel </code> 在等待连接完成时可以执行其他任务，而不被阻塞</li>\n</ul>\n</li>\n<li>\n<p><strong>聊聊 Java 中的反射机制？并且在 Spring 中是如何进行反射相关操作的？</strong></p>\n<ul>\n<li>指程序可以获得自己的属性和方法。java 中，只要知道类的名字，就可以通过反射机制获取类的所有属性以及方法</li>\n<li>Spring IOC 就是靠工厂模式 + 反射。从单纯的返回一个 new 的传入名称的类（每增添，都要新写名称判断），换成从 <code>Class.forName(objectname).newInstance()</code>  反射获取。</li>\n</ul>\n</li>\n<li>\n<p>Java 集合 ArrayList 和 LinkedList 的区别联系？哪个查找元素的速度快一点？</p>\n<ul>\n<li>ArrayList 是实现了基于动态数据的数据结构，LinkedList 是基于链表结构实现。</li>\n<li>都是 List 接口的实现类，这两个类都是对 List 进行操作。都定义了如 add (E)、get (int)、remove (int)、set (E) 等基本的 List 操作</li>\n</ul>\n</li>\n<li>\n<p>JMM，java 内存模型 （问得很深，回答不全）</p>\n</li>\n<li>\n<p>MySQL 索引失效问题以及解决方案？</p>\n<ul>\n<li>上面有一部分，解决方案就是不用那些有问题的操作... 更高深的不知道了</li>\n<li>从数据库角度再记录下</li>\n<li>不满足<strong>最左</strong>前缀（如有索引【a，b，c】，查询【b，c】的条件，则不会走索引，但【a，c 可以】）</li>\n<li>范围查询<strong>之后</strong>的索引字段，会失效，但本身用来范围查询的那个索引字段依然有效（如 a，b&gt;10，c。b 走，c 不走）</li>\n<li>对索引字段做运算，使用函数等都会导致索引失效。</li>\n<li>隐式类型转换（索引字段为字符串类型，由于在查询时，没有对字符串加<strong>单引号</strong>，MySQL 的查询优化器，会自动的进行类型转换，造成索引失效。）</li>\n<li>避免使用 select * 。无法使用覆盖索引（如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据就叫做覆盖索引），消耗更多的 CPU 和 IO 以网络带宽资源。</li>\n<li>or 分割的条件。如果 or 前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</li>\n<li>以 % 开头的 Like 模糊查询</li>\n<li>order by 导致索引失效。在基于 <code>order by</code>  和 <code>limit</code>  进行使用时，是否走索引涉及到数据库版本。主键使用 <code>order by</code>  时，可以正常走索引。</li>\n</ul>\n</li>\n<li>\n<p><strong>MySQL 索引用的是什么数据结构？聚集和非聚集索引</strong></p>\n<ul>\n<li>哈希结构，B + 树结构，R 树结构。其中 R 树结构用于空间索引，不常见</li>\n<li><strong>二叉查找树</strong>（任何节点的左子节点的键值都小于当前节点的键值，右子节点的键值都大于当前节点的键值）-&gt;<strong> 平衡二叉树</strong>（查找树基础上每个节点的左右子树的高度差不能超过 1）-&gt;<strong>B 树</strong>（单个节点可以存储多个键值和数据的平衡树）-&gt;<strong>B + 树</strong>（B + 树非叶子节点上是不存储数据的，仅存储键值，数据都在叶子节点），如 3 层 B + 树可以存储 1000×1000×1000=10 亿个数据。一般根节点是常驻内存的，所以一般我们查找 10 亿数据，只需要 2 次磁盘 IO。</li>\n<li><strong>聚集索引</strong>：以 innodb 作为存储引擎的表，表中的数据都会有一个主键，即使你不创建主键，系统也会帮你创建一个隐式的主键。这是因为 innodb 是把数据存放在 B + 树中的，而 B + 树的键值就是主键，在 B + 树的叶子节点中存储了行数据，可以直接在聚集索引中查找到想要的数据。这种以主键作为 B + 树索引的键值而构建的 B + 树索引，我们称之为聚集索引。</li>\n<li><strong>非聚集索引</strong>：以主键以外的列值作为键值构建的 B + 树索引，我们称之为非聚集索引。区别在于非聚集索引的叶子节点不存储表中的数据，而是存储该列对应的主键，想要查找数据我们还需要根据主键再去聚集索引中进行查找，这个再根据聚集索引查找数据的过程，我们称为<strong>回表</strong>。</li>\n</ul>\n</li>\n<li>\n<p>MySQL 数据库服务器飙升，会是什么原因造成的？</p>\n<ul>\n<li>服务器硬件问题</li>\n<li>内存溢出</li>\n<li>业务高并发\n<ul>\n<li>数据库对象设计不合理</li>\n<li>触发器导致</li>\n<li>表索引设计不合理</li>\n<li>数据库锁导致，如行锁冲突、行锁等待、锁超时、死锁等</li>\n<li>系统架构没有缓存中间件</li>\n<li>读写分离配置不合理</li>\n<li>OLTP 系统承载了 OLAP 的业务需求</li>\n<li>未合理升级改造为集群环境</li>\n<li>未配置异构数据分析系统</li>\n<li>MySQL 系统参数设置不合理</li>\n<li>SQL 问题导致，如 group by、order by、join 等，这些很大程度影响 SQL 执行效率，从而占用大量的系统资源</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>确定 CPU 使用率飙升的原因:\n<ul>\n<li>使用 top 或 htop 命令査看系统的 CPU 使用率，并找出占用 CPU 高的进程。</li>\n<li>使用 MySQL 的内置工具如 SHOW PROCESSLIST 命令，查看 MySQL 中当前运行的查询和连接会</li>\n</ul>\n</li>\n<li>优化数据库查询:\n<ul>\n<li>使用  <code>EXPLAIN</code>  命令分析慢查询，检査是否存在索引缺失、全表扫描等问题。0 优化查询语句，确保合适的索引被使用。</li>\n<li>使用合适的查询缓存和查询缓存失效处理策略</li>\n</ul>\n</li>\n<li>优化数据库配置:\n<ul>\n<li>检查 my.cnf 配置文件，合理配置数据库参数</li>\n<li>调整 innodb_buffer_pool_size 参数，以确保适当的内存分配给 InnoDB 存储引擎</li>\n<li>根据系统资源情况，调整 max_connections 参数控制并发连接数。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>缓存中的生产问题（缓存击穿、穿透、雪崩问题，原因、解决方式）\n<ul>\n<li>击穿：热点的 key 失效了，导致大并发集中打在数据库上。热点的 key 可以设置永不过期的 key。使用互斥锁。如果缓存失效的情况，只有拿到锁才可以查询数据库，并且及时写回 redis</li>\n<li>穿透：key 不存在 Redis 中时，大量请求去数据库查询。把无效的 Key 存进 Redis 中；使用布隆过滤器</li>\n<li>雪崩：大规模的 key 失效。熔断机制。当流量到达一定的阈值时，就直接返回 “系统拥挤” 之类的提示，防止过多的请求打在数据库上；提高数据库的容灾能力，可以使用分库分表，读写分离的策略；为了防止 Redis 宕机导致缓存雪崩的问题，可以搭建 Redis 集群，提高 Redis 的容灾性</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"阿里云\"><a class=\"anchor\" href=\"#阿里云\">#</a> 阿里云</h3>\n<ul>\n<li>\n<p>重载与重写区别</p>\n<ul>\n<li><strong>在子类中把父类本身有的方法</strong>重新写一遍，方法名，参数列表，返回类型（除过子类中方法的返回类型是父类中返回类型的子类）必须相同。要注意<strong>子类函数的访问修饰权限不能少于父类的</strong>，不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常</li>\n<li>同名的方法如果有不同的参数列表（<strong>参数类型不同、参数个数不同甚至是参数顺序不同</strong>）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但<strong>不能通过返回类型是否相同来判断重载</strong></li>\n<li>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</li>\n</ul>\n</li>\n<li>\n<p>java 基本数据类型</p>\n<ul>\n<li>六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</li>\n<li><strong>byte</strong> 8、<strong>short</strong> 16、<strong>int</strong> 32、<strong>long</strong> 64、<strong>double</strong> 64、<strong>float</strong> 32、<strong>boolean</strong>、<strong>char</strong></li>\n<li>相对于 C++ 中的 long long，java 中用于操作大数的类主要有俩种 第一个是 BigInteger，代表大整数。第二个是 BigDecimal，代表大浮点数。</li>\n</ul>\n</li>\n<li>\n<p>封装类和基本类型的区别</p>\n<ul>\n<li>基本数据类型是值传递，封装类是引用传递</li>\n<li>基本数据类型是存放在栈中的，而封装类是存放于堆中的</li>\n<li>基本数据类型初始值如:int=0, 而封装类 Integer=null</li>\n<li>集合中添加的元素一定是封装类引用数据类型</li>\n<li>声明基本数据类型不需要实例化可直接赋值，而封装类必须申请一个存储空间实例化才可赋值</li>\n</ul>\n</li>\n<li>\n<p>聊聊 string、string buffer 和 string builder 的区别</p>\n<ul>\n<li>String 类是 Java 中最基本的字符串类，用于表示不可变的字符序列。一旦创建，内容就不能被修改。对 String 对象进行修改操作时（如拼接、替换等），实际上都会创建一个新的 String 对象</li>\n<li>StringBuffer 类是为了解决 String 类在处理大量字符串操作时的性能问题而设计的。与 String 不同，StringBuffer 是可变的，即其内容可以在创建后进行修改。StringBuffer 内部使用了一个字符数组来存储字符串内容。StringBuffer 是线程安全的。它内部的许多方法都是同步的，这意味着在多线程环境下，多个线程可以同时访问和修改同一个 StringBuffer 对象而不会导致数据不一致的问题。然而，这种线程安全性是以牺牲一定性能为代价的。（synchronized 修饰）</li>\n<li>StringBuilder 类是 StringBuffer 的一个简化版本，它同样用于处理可变字符串。与 StringBuffer 的主要区别在于，StringBuilder 不是线程安全的</li>\n</ul>\n</li>\n<li>\n<p>java 接口，抽象类，集合类的区别</p>\n<ul>\n<li>\n<p>类可以实例化对象，而抽象类不能实例化对象。抽象类除了不能实例化对象之外，类的其他功能仍然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。因为抽象类<strong>不能实例化对象</strong>，所以<strong>抽象类必须被继承，才能被使用。</strong></p>\n</li>\n<li>\n<p>一个类只能继承一个抽象类，而一个类却可以实现多个接口。接口和类属于不同的概念，类是描述对象的属性和方法，接口是包含类要实现的方法。除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。<strong>接口无法被实例化，但是可以被实现</strong>。</p>\n</li>\n<li>\n<p><img data-src=\"https://www.runoob.com/wp-content/uploads/2014/01/java-coll-2020-11-16.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>mysql 的单表最多多少记录</p>\n<ul>\n<li>有说法单表数据量超过 500 万行时就要进行分表分库，已经超过 2000 万行时 MySQL 的性能就会急剧下降</li>\n<li>如果主键设置了 int，那就是 2^31，但除了主键和存储空间本质上不会有别的限制增添数据</li>\n<li>是索引深度吗？\n<ul>\n<li>MySQL 中页面偏移占 4 个字节，在非叶子节点的时候实际上是 8+4=12 个字节，12 个字节表示一个页面的映射关系。MySQL 默认是 16K 的页面，抛开它的配置 header，大概就是 15K，因此，非叶子节点的索引页面可放 15*1024/12=1280 条数据，按照每行 1K 计算，每个叶子节点可以存 15 条数据。同理，三层就是 15*1280*1280=24576000 条数据。只有数据量达到 24576000 条时，深度才会增加为 4</li>\n</ul>\n</li>\n<li>IO? 之前机械硬盘的 IOPS 在 100 左右，而现在普遍使用的 SSD 的 IOPS 已经过万，之前的内存最大几十 G，现在服务器内存最大可达到 TB 级。也不是</li>\n<li>是 SMO 无法并发吗？\n<ul>\n<li>InnoDB 引擎使用的是索引组织表，它是通过索引来组织数据的，而它采用 B+tree 作为索引的数据结构。B+Tree 操作非原子，所以当一个线程做结构调整（SMO，Struction-Modification-Operation）时一般会涉及多个节点的改动。SMO 动作过程中，此时若有另一个线程进来可能会访问到错误的 B+Tree 结构，InnoDB 为了解决这个问题采用了乐观锁和悲观锁的并发控制协议。</li>\n<li>方式一，先采用乐观锁的方式尝试进行修改：对根节点加 S 锁（shared lock，叫共享锁，也称读锁），依次对非叶子节点加 S 锁。如果<strong>叶子节点的修改不会引起 B+Tree 结构变动</strong>，如分裂、合并等操作，那么只需要对叶子节点进行加 X 锁（exclusive lock，叫排他锁，也称为写锁）即可完成修改。</li>\n<li>方式二，采用悲观锁的方式：如果对叶子结点的修改会触发 SMO，那么会采用悲观锁的方式。采用悲观锁，需要重新遍历 B+Tree，对根节点加全局 SX 锁（SX 锁是行锁），然后从根节点到叶子节点可能修改的节点加 X 锁。<strong>在整个 SMO 过程中，根节点始终持有 SX 锁（SX 锁表示有意向修改这个保护的范围，SX 锁与 SX 锁、X 锁冲突，与 S 锁不冲突），此时其他的 SMO 则需要等待</strong>。</li>\n<li>因此，InnoDB 对于简单的主键查询比较快，因为数据都存储在叶子节点中，但对于数据量大且改操作比较多的 TP 型业务，并发会有很严重的瓶颈问题。</li>\n<li><strong>改进：</strong> B-Link Tree。1. 中间节点增加 link 指针，指向右兄弟节点；2. 每个节点内增加字段 high key，存储该节点中最大的 key 值。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>就是说有一堆，java 文件，这一个方法把里面的需要导入的类找出来，可能存在链式引用，A 依赖 B，B 依赖 C 这种。</p>\n<ul>\n<li>读取文件，找环处理</li>\n</ul>\n</li>\n<li>\n<p>Spring 循环依赖怎么解决的？</p>\n<ul>\n<li>三级缓存，加载 A 的时候，先中介环节缓存工厂，发现依赖 B，B 也到了 A 的这一步发现 A，又加载 A 发现已经有了该缓存，<s>那就先实现一个并给 B 和</s> 看图吧\n<ul>\n<li>singletonObjects 一级缓存，用于保存实例化、注入、初始化完成的 bean 实例</li>\n<li>earlySingletonObjects 二级缓存，用于保存实例化完成的 bean 实例</li>\n<li>singletonFactories 三级缓存，用于保存 bean 创建工厂，以便于后面扩展有机会创建代理对象</li>\n</ul>\n</li>\n<li><img data-src=\"https://ask.qcloudimg.com/http-save/8024638/b75c8ke07m.png\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p><strong>JVM 如何优化？</strong></p>\n<ul>\n<li>升级垃圾收集器</li>\n<li>分析和定位当前系统的瓶颈\n<ul>\n<li>CPU 指标</li>\n<li>内存指标</li>\n<li>GC 指标 - GC 日志\n<ul>\n<li>更改新老生代比例等</li>\n<li>堆内存大小</li>\n</ul>\n</li>\n<li>代码 bug。典型的有死循环、使用无界队列</li>\n</ul>\n</li>\n<li><strong>内存管理</strong>：\n<ul>\n<li>调整堆内存大小：通过调整堆内存的大小来适应不同应用的内存需求，避免堆内存过小导致频繁的垃圾回收，或者过大导致内存浪费和长时间的垃圾回收暂停。</li>\n<li>使用合适的垃圾回收器：根据应用的特性选择合适的垃圾回收器，如串行垃圾回收器、并行垃圾回收器、CMS（Concurrent Mark-Sweep）垃圾回收器、G1（Garbage-First）垃圾回收器等。</li>\n</ul>\n</li>\n<li><strong>垃圾回收优化</strong>：\n<ul>\n<li>调整垃圾回收器的参数：根据应用的特性和需求调整垃圾回收器的参数，如新生代和老年代的比例、各个代的大小、垃圾回收的触发条件等。</li>\n<li>最小化垃圾对象：尽量减少不必要的对象创建，避免内存泄漏和过度使用内存。</li>\n</ul>\n</li>\n<li><strong>即时编译（JIT）优化</strong>：\n<ul>\n<li>使用适当的编译级别：通过调整 JIT 编译器的编译级别来控制编译的优化程度，根据应用的需求进行选择。</li>\n<li>预热期间的编译优化：在应用启动时通过预热期间进行编译优化，使得 JIT 编译器有足够的时间和数据进行优化，提高代码的执行效率。</li>\n</ul>\n</li>\n<li><strong>代码优化</strong>：\n<ul>\n<li>减少对象的创建和销毁：尽量重用对象，避免频繁的对象创建和销毁，减少垃圾回收的开销。</li>\n<li>避免过度同步：尽量减少同步块的使用，避免过度同步导致的性能损失。</li>\n<li>使用高效的数据结构和算法：选择合适的数据结构和算法来提高代码的执行效率，减少不必要的计算和内存开销。</li>\n</ul>\n</li>\n<li><strong>调优工具</strong>：\n<ul>\n<li>使用 JVM 监控和分析工具：如 JVisualVM、JConsole、VisualVM 等工具，用于监控应用的运行状态、内存使用情况、垃圾回收情况等，并进行性能分析和调优</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Nginx 还是要处理海量请求，怎么处理它本身的压力？</strong></p>\n<ul>\n<li>Nginx 之所以具有低内存消耗，主要是因为其采用了高效的事件驱动架构、内存池管理、优化的数据结构和网络 IO 模型</li>\n<li>10 000 个非活跃的 HTTP Keep-Alive 连接在 Nginx 中仅消耗 2.5MB 的内存，这是 Nginx 支持高并发连接的基础。</li>\n<li>单机支持 10 万以上的并发连接</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"淘天\"><a class=\"anchor\" href=\"#淘天\">#</a> 淘天</h3>\n<p>Java 中 oop 的概念以及 oop 三大基础特性</p>\n<p>父类有字段 a，子类也有字段 a，在父类方法中访问 this.a，这个 a 指向的是父类的 a 字段还是子类的 a 字段</p>\n<p>Java 中接口和抽象类有什么区别？它们都在什么时候使用？</p>\n<p>jdk8 之后接口提供默认方法，默认方法的使用场景是哪些？</p>\n<p>你认为 jdk8 中引入默认方法破坏了 oop 的原则吗？如果是你你会怎么设计呢？</p>\n<p>讲一下 Java 集合类框架有哪些接口和使用场景</p>\n<p>讲一下 map 接口的实现类</p>\n<p>在哈希表的实现中，除了拉链法还有其他实现方式吗？</p>\n<p>泛型代码在编译为字节码时哪部分泛型被保留，哪部分是不被保留的？</p>\n<p>讲一下 jvm 的垃圾回收</p>\n<p>如果在 Java 程序中频繁地发生 full gc，你会如何去排查它，可以举例说明</p>\n<p>（讲了新建大对象时伊甸园放不下，但如果老年代有足够空间会直接将大对象放入老年代，造成老年代空间也不再充足，之后可能要 full gc，会把大对象回收，但之后还要使用大对象还要读入，这时候可能频繁引起 full gc）</p>\n<p>针对上述情况你会怎么优化？（分块读，面试官说可以下一个问题了）</p>\n<p>讲一下 threadlocal</p>\n<p>讲一下 jvm 中哪些数据存储在堆之中，哪些数据存储在栈中？</p>\n<p>多个线程并发访问堆中的数据会产生数据不一致的现象，解释一下根本原因</p>\n<p>讲一次 volatile</p>\n<p>讲一下数据库的四大特性</p>\n<p>一条 sql 实现如果一个数据存在则更新其值为 x 否则插入新数据只为 x</p>\n<p>如果插入的数据比数据库中的数据新就更新，否则不更新，一条 sql 实现</p>\n<p>redis 做消息队列是你的选型还是团队选型</p>\n<p>让你重新设计的话你会怎么选择？为什么？</p>\n<p>redis 支持两种持久化机制，讲一下</p>\n<p>讲一下项目中 minio 做了什么？</p>\n<p>开始聊实习中的业务逻辑</p>\n<p>有参加过什么比赛吗？acm 什么的？（莫得）</p>\n<p>那你本科是计算机吗？（不是）</p>\n<p>那你硕士是计算机吗？（不是）</p>\n<p>你是自学的计算机吗？（是）</p>\n<p>那再问一些基础吧，讲一下 osi 七层模型</p>\n<p>讲一下 tcp 和 udp 的区别</p>\n<p>平时有用 Linux 系统吗？讲一下常用命令</p>\n<p>Python 熟悉吗？</p>\n<p>Python 传参时两种可变参数的方式</p>\n<p>Python 中 dict 中的 key 有什么要求？ （不可变、可哈希）</p>\n<p>反问:</p>\n<p>做什么业务？ 做 aigc 的应用</p>\n<p>是更偏应用开发，还是更偏模型部署，infra？ 更偏应用</p>\n<p>Java 当中是怎么控制并发的？</p>\n<p>有哪些锁机制？</p>\n<p>什么时候会出现死锁以及如何避免死锁？</p>\n<p>synchronized 和 reentrantlock 的区别</p>\n<p>在锁的代码中执行 sleep 会有什么影响？</p>\n<p>所有锁的类型中 sleep 都不会释放吗？</p>\n<p>什么是可重入锁？</p>\n<p>创建一个线程需要哪些开销？</p>\n<p>线程什么时候出现 OOM?</p>\n<p>OOM 有哪几种？</p>\n<p>Java 中什么时候触发垃圾回收？</p>\n<p>输入 URL 之后处理一个网络请求的过程</p>\n<p>如果在这个过程当中，因为网络问题有丢包的情况，会如何解决？</p>\n<p>有时候我们也会考虑使用 udp 到什么时候使用 udp？</p>\n<hr />\n<h3 id=\"美的\"><a class=\"anchor\" href=\"#美的\">#</a> 美的</h3>\n<p>1.AOP 的通知类型<br />\n 2.AOP 应用场景，怎么使用？<br />\n3.Threadlocal 应用场景，底层实现原理？<br />\n4.Redis 数据结构？<br />\n5.Redis 使用场景和 Redis 可能存在的问题？<br />\n6. 缓存三兄弟？<br />\n7. 分别的解决方法？<br />\n8. 负载均衡？<br />\n9. 负载均衡的策略？<br />\n10. 怎么保持 session 的固化？</p>\n<hr />\n<h2 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a> Mysql</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NhbGN1bHVzc3RpbGwvYXJ0aWNsZS9kZXRhaWxzLzEzNjc4MDQ2Mg==\">https://blog.csdn.net/calculusstill/article/details/136780462</span></p>\n<ul>\n<li>\n<p>没有索引的更新操作，逻辑上是行锁，但实际是表锁</p>\n<ul>\n<li>建立索引解决</li>\n</ul>\n</li>\n<li>\n<p><strong>为什么 Mysql 用 B + 树索引而不是 Redis 的跳表模式？</strong></p>\n<ul>\n<li>首先讲两种各自怎么实现的。查询时间复杂度都是 O (logN)，mysql 在页有个目录优化该页的查询（二分查找），而不用 O (N) 遍历。都用空间换时间</li>\n<li>共同点\n<ul>\n<li>最底层都包含了所有数据，且顺序，适用于范围查询</li>\n</ul>\n</li>\n<li>不同点\n<ul>\n<li>增删时\n<ul>\n<li>B + 叶子节点没满则直接插入，若满但索引节点没满，则叶子节点拆分，索引直接插入。若都满，都要拆分，并向更上一级索引插入，以此内推</li>\n<li>调表插入数据，由于链表特性直接插入，而是否往上层见表则由随机算法控制。理论上上层节点数是下层的 1/2.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>关键在于这个不同，mysql 每页 16Kb，基本上作为索引能指向 1000 + 的子页，3 层左右就能有 2000w 的数据，最多需要三次磁盘 IO 读页读数据。而跳表的 2000w 需要 2^24 左右，有之多 24 次 IO。</li>\n<li>因此 B + 树查找更快。但写入时需要调整，而调表不用，因此写入上 Redis 才这么方便写，mysql 不如。</li>\n<li>补充：<strong>mysql 性能下降最根本的原因是内存 hold 不住高频数据了</strong>；树高带来的性能影响忽略不计。 因为 mysql 的非叶子节点基本都是在内存里面的，叶子节点才会经常被淘汰，如果业务整体高频数据太多了，此时 mysql 为了腾出内存会频繁触发刷脏，从而影响其它查询走的是磁盘 io 这时候效率就很慢了，从这里也可以知道讨论 mysql 性能要从整体去看，而不是动不动就拿单表数据量说事，阿里巴巴规范固然很好但也不能无脑，分库分表能不用就不用，因为用好的人不多，切记，架构简单是设计原则</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"项目\"><a class=\"anchor\" href=\"#项目\">#</a> 项目</h2>\n<ul>\n<li>Tomcat 和 Nginx 有什么区别\n<ul>\n<li>都可以响应静态资源，但 Tomcat 可以响应动态资源</li>\n<li>Tomcat 是 Servlet 容器</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"image-20240422224621934.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>优惠卷秒杀的逻辑</p>\n<ul>\n<li>聊聊乐观锁。数据库层面的 update？\n<ul>\n<li>将更新和查询统一在一条 SQL 语句中，也就是 Compare and Swap，CAS；版本号控制（查询版本号是否一致）；</li>\n</ul>\n</li>\n<li><strong>分布式锁</strong>：\n<ul>\n<li><em>基于数据库</em>实现分布式锁\n<ul>\n<li><strong>记录锁</strong>，建立一个锁表，通过往锁表中插入数据 (到唯一索引，再次插入，没删除前就会失败) 的方式，来进行相应的同步操作。服务器是分布式的，公共资源（数据库不是）</li>\n<li><strong>排他锁</strong>（悲观锁），如：在查询语句后面增加 <code>for update</code></li>\n<li><strong>版本号</strong>（乐观锁）</li>\n</ul>\n</li>\n<li><em>基于缓存（Redis 等）</em> 实现分布式锁\n<ul>\n<li>加锁：执行 SETNX，若成功（不存在才能成功）再执行 expire 添加过期时间 。key 的格式是 <code>lock:productId:index</code>  的字符串，value 是锁持有者的线程 ID\n<ul>\n<li>可重入锁：就不能单纯的 String 的 key，value。使用 hash 数据结构，key 还是锁的名称，value1 是锁持有者，value2 是重入次数，1 时还减就删除。但 hash 不能用 setNX，要用 pexpire 来设置过期时间，就不是原子性的，此时用 lua 脚本</li>\n</ul>\n</li>\n<li>解锁：执行 delete 命令</li>\n<li>实现简单，相比数据库和分布式系统的实现，该方案最轻，性能最好。setnx 和 expire 分 2 步执行，非原子操作；若 setnx 执行成功，但 expire 执行失败，就可能出现死锁。delete 命令存在误删除非当前线程持有的锁的可能。不支持阻塞等待、不可重入</li>\n<li>或者用 lua 脚本实现。Lua 脚本能够保证原子性的主要原因还是 Redis 采用了单线程执行模型。也就是说，当 Redis 执行 Lua 脚本时，Redis 会把 Lua 脚本作为一个整体并把它当作一个任务加入到一个队列中，然后单线程按照队列的顺序依次执行这些任务，在执行过程中 Lua 脚本是不会被其他命令或请求打断，因此可以保证每个任务的执行都是原子性的。</li>\n</ul>\n</li>\n<li><em>基于 Zookeeper</em> 实现分布式锁（临时顺序节点的特性）\n<ul>\n<li>假设现在有一个客户端 A，需要加锁，那么就在 &quot;/Lock&quot; 路径下创建一个临时顺序节点。然后获取 &quot;/Lock&quot; 下的节点列表，判断自己的序号是否是最小的，如果是最小的序号，则加锁成功！</li>\n<li><img data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/15/17353229075ad04f~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"\" /></li>\n<li>现在又有另一个客户端，客户端 B 需要加锁，那么也是在 &quot;/Lock&quot; 路径下创建临时顺序节点。依然获取 &quot;/Lock&quot; 下的节点列表，判断自己的节点序号是否最小的。发现不是最小的，加锁失败，接着对自己的上一个节点进行监听。</li>\n<li><img data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/15/173532ccde8ed6b4~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"\" /></li>\n<li>怎么释放锁呢，其实就是把临时节点删除。假设客户端 A 释放锁，把节点 01 删除了。那就会触发节点 02 的监听事件，客户端就再次获取节点列表，然后判断自己是否是最小的序号，如果是最小序号则加锁。</li>\n<li><img data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/16/1735337578204cc5~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"\" /></li>\n<li>如果多个客户端其实也是一样，一上来就会创建一个临时节点，然后开始判断自己是否是最小的序号，如果不是就监听上一个节点，形成一种排队的机制。也就形成了锁的效果，保证了多台服务器只有一台执行。<strong>假设其中有一个客户端宕机了，根据临时节点的特点，ZooKeeper 会自动删除对应的临时节点</strong>，相当于自动释放了锁</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>接口的幂等性是怎么做的？（意思就是 post 请求带着：一个用户 id，一个优惠卷 id。发送多次请求，如何保证只有一个成功）</p>\n<ul>\n<li>状态判断法：redis 缓存订单消息，并且每次会检查</li>\n<li>业务判断发：表中增加唯一字段，同一用户，同一商品有个唯一标识</li>\n</ul>\n</li>\n<li>\n<p>单个数据库怎么分库分表</p>\n<ul>\n<li>垂直拆分： 根据业务的维度，将原本一个库中的表拆分多个表，每个库中表与原有的结构不同</li>\n<li>水平拆分： 根据分片算法，将一个库拆分成多个库，每个库依旧保留原有的结构</li>\n</ul>\n</li>\n<li>\n<p>分库分表存在什么问题</p>\n<ul>\n<li>联合查询困难：联合查询不仅困难，而且可以说是不可能，因为两个相关联的表可能会分布在不同的数据库，不同的服务器中</li>\n<li>需要支持事务：分库分表后，就需要支持分布式事务了。数据库本身为我们提供了事务管理功能，但是分库分表之后就不适用了。如果我们自己编程协调事务，代码方面就又开始了麻烦</li>\n<li>跨库 join 困难：分库分表后表之间的关联操作将受到限制，我们无法 join 位于不同分库的表，也无法 join 分表粒度不同的表， 结果原本一次查询能够完成的业务，可能需要多次查询才能完成。 我们可以使用全局表，所有库都拷贝一份</li>\n<li>结果合并麻烦：比如我们购买了商品，订单表可能进行了拆分等等，此时结果合并就比较困难。</li>\n</ul>\n</li>\n<li>\n<p>分库分表分的不均匀怎么办</p>\n<ul>\n<li>负载均衡</li>\n</ul>\n</li>\n<li>\n<p>主从复制会引入什么问题</p>\n<ul>\n<li>写操作拓展起来比较困难，因为要保证多个主库的数据一致性</li>\n<li>复制延时：意思是同步带来的时间消耗</li>\n<li>锁表率上升：读写分离，命中率少，锁表的概率提升</li>\n<li>表变大，缓存率下降：此时缓存率一旦下降，带来的就是时间上的消耗</li>\n<li>随着用户量的增加、访问量的增加、数据量的增加依然会带来大量的问题，那就要考虑换一种解决思路：分库分表</li>\n</ul>\n</li>\n<li>\n<p>聊一聊数据打散不同表的底层的表落到不同的库的策略（有点忘了具体问题）</p>\n</li>\n<li>\n<p><strong>分库分表的主键 id 怎么保证唯一 id？</strong>（答了数据库自增 ID 和分段式 ID 生成器，然后面试官开始深入）</p>\n<ul>\n<li>UUID 是一种通用唯一识别码，是<strong>全球唯一的</strong>，不会重复，所以可以作为唯一主键使用，而且本机生成不耗费资源，目的是用于分布式环境中唯一生成标志码，是由 32 个 16 进制数组成.</li>\n<li>Redis 生成 ID，主要利用 Redis 是单线程的，所以也可以用来生成唯一 ID。当使用的是 Redis 集群的时候，比如集群中有 5 台 Redis，初始化每台 Redis 的值为 1,2,3,4,5，设置步长为 5，并且确定一个不随机的负载均衡策略，能够保证有序，唯一</li>\n<li>每个 Id 前面加上机器号 ，如果有 3 个机器，初始化值分别设置为 1，2，3，然后步长设置为 3，每次新 ID 生成都是上一个 ID（同一个机器）+3。保证 ID 唯一性。</li>\n<li>雪花算法，ID 按照时间在单机上是递增的。但不能保证全局递增，但肯定不一样。</li>\n</ul>\n</li>\n<li>\n<p><strong>你用了 RocketMQ，为什么选择它，实现了怎样的优势？</strong></p>\n<ol>\n<li><strong>分布式架构</strong>：RocketMQ 是基于分布式架构设计的消息队列系统，支持横向扩展和集群部署，可以根据需要动态添加和删除节点，从而实现高可用性和高容错性。</li>\n<li><strong>消息顺序性</strong>：RocketMQ 支持严格的消息顺序性，即同一个消息队列中的消息会按照发送的顺序被消费。这对于某些业务场景（如订单处理、事务消息等）非常重要。</li>\n<li><strong>可靠性</strong>：RocketMQ 提供了消息持久化、消息复制、消息拉取确认等机制，保证消息的可靠传输和投递，可以应对网络故障、服务器故障等各种异常情况。</li>\n</ol>\n</li>\n</ul>\n<p>吞吐量和可用性很高，时效性稍低于 rabbitMQ，根据业务来看。<br />\n<img data-src=\"image-20240417153537124.png\" alt=\"\" /></p>\n<p>关注和点赞：<br />\n说说你的数据结构怎么设计的？我关注的人和关注我的人怎么设计的？<br />\nredis 里面有设置过期时间吗？<br />\nz 那种大 v，粉丝数量应该很多，这种热 key + 大 key 你是怎么处理的？分表知道吗？<br />\nrabbitmq 进行异步处理？那我假如关注一个人之后，马上要给他发消息怎么办（场景：互关才能发消息），你怎么保证这个即时性</p>\n<p>博客加载：（自己做了个串行加载改并行：thread pool+future）<br />\n线程池的参数怎么设计的，核心线程数 2n（n=cpu 核心数）？但是你多个 tomcat 请求共用一个线程池啊......tomcat 线程池都有几百个线程了，2n 肯定不行<br />\n future 类异步获取加载结果，如果等待时间很长怎么办？一直阻塞吗？</p>\n<p>登录：<br />\n简述你的登录逻辑<br />\n双重拦截器是什么<br />\n为什么要用 thread local，thread local 底层你懂吗？会出现什么问题？内存泄漏知道吗？怎么解决的<br />\n redis：<br />\n自定义布隆过滤器解决缓存穿透？布隆过滤器满了怎么办？布隆过滤器的数据怎么迁移？从一个小的变成一个更大的布隆过滤器可以吗？<br />\n延迟双删说一下，更新成功但是第二次删除失败了怎么办<br />\n为什么用 redisson？redisson 底层原理你懂吗？看门狗机制具体怎么实现的？redisson 如何解决主节点宕机问题（setnx 进入 master，但是宕机，slave 节点还没有收到写命令）<br />\nzookeeper 实现分布式锁知道吗？</p>\n<h1 id=\"自己的面\"><a class=\"anchor\" href=\"#自己的面\">#</a> 自己的面</h1>\n<p>记录写笔试 / 面试过程中发现有疏漏的知识点</p>\n<h2 id=\"字节\"><a class=\"anchor\" href=\"#字节\">#</a> 字节</h2>\n<h3 id=\"北京测开一面\"><a class=\"anchor\" href=\"#北京测开一面\">#</a> 北京测开一面</h3>\n<p>紧张，逻辑还好，记忆错乱，添加 python 添加没想起来说了个 push_back 。。。问了些基础的 python 语法，很浅...，问删除文件，只答了打开文件 open 流，但应该对应有 delete/remove 这种接口，但我也不知道接口这种算不算回答，整场都有这个问题，不知道有的内容说还是不说，然后就都沉默了，感觉不太好。</p>\n<ol>\n<li>自我介绍</li>\n<li>讲解项目背景和技术\n<ol>\n<li>这里背景没讲好是为什么用技术为之服务的，后面聊天提到测开从这里就开始了，要从背景需求进行分析。但其实就是说为了预防高并发、缓解压力等等，分库分表啥的就行，想太多了，以为要跟深，结果啥也没说。</li>\n<li>技术问到 redis 的，更新 / 保存 策略，把跟操作系统的先进先出，不用的先替换，轮询这些一起讲了。不记两个是不是一回事了... 后面说可以深入了解下底层策略这些</li>\n</ol>\n</li>\n<li>直接写题\n<ol>\n<li>查找薪资追高的，直接 select max (salary) from xxx</li>\n<li>找到部门薪资最高最低的，select max (salary), min () salary from xxx group by dept</li>\n<li>一个有序但不严格递增的数组去重，直接快慢指针\n<ol>\n<li>问有没有优化的空间，感觉 O (n) 没得再快了，或许可以讲讲别的解法？</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>场景题目：对于微信点赞这个功能有什么可以设计得测试\n<ol>\n<li>答：点赞、撤销等功能得实现，同步速度</li>\n<li>面试官补充：其实可以放看点看，包括后端得压力测试，设计分库分表，查询速度、多赞是否容得下，排序等问题（排序想到了，但感觉好像理所应当，比如 order 了就是好了。感觉更像是问一个需求有什么流程，所有流程都要测试的样子）</li>\n</ol>\n</li>\n<li>回到项目 redis 深问，穿了</li>\n<li>回访\n<ol>\n<li>测开学习哪些，还要强化什么，进去干什么：\n<ol>\n<li>一定的代码能力，懂得实现，然后相应的测试范围的判定</li>\n<li>加强在测试保障上的一个 sense（意义？），怎么做保障工作、测试只是一部分，还有自动化的建设，上线后稳定性。自动化基础、性能测试的基础、运行监控。</li>\n<li>了解需求，背景，测试设计本身，拿到一个需求，功能上有哪些，可能的漏洞有哪些，性能上的瓶颈，安全，兼容等等。</li>\n</ol>\n</li>\n<li>岗位干的工作：\n<ol>\n<li>6.1 中一起讲了已经</li>\n<li>然后解释了下实习生的话，测试用例的开发为主，自动化测试，防止后续出问题。</li>\n</ol>\n</li>\n<li>过来人的感受，关于测开、关于大厂、关于互联网\n<ol>\n<li>闲聊，好坏都有，不过走的话就要走到极致，然后发现不合适的话，换掉也可以。互联网最大的点就是持续学习，不存在传统行业稳定的壁垒。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"北京测开二面\"><a class=\"anchor\" href=\"#北京测开二面\">#</a> 北京测开二面</h3>\n<p>直接测开了解和看法，项目，从文本读取到数据处理写入，查询，问题</p>\n<ol>\n<li>直接测开了解和看法，聊了一段时间，测开干什么，主要任务（目前框架已经写好了，在专注于自动化的脚本功 k 能）</li>\n<li>项目，问的比较细，每个点都讲到了，解释了一些策略\n<ol>\n<li>还问了项目中的角色，保守的只是参与，别人负责，回头这一块可以完善一下</li>\n</ol>\n</li>\n<li>从文本读取到数据处理写入\n<ol>\n<li>有数据文件 file.txt</li>\n<li>读取数据</li>\n<li>处理格式</li>\n<li>写入 sql</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 打开数据库连接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conn <span class=\"token operator\">=</span> pymysql<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">3306</span><span class=\"token punctuation\">,</span> user<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> passwd<span class=\"token operator\">=</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span> db<span class=\"token operator\">=</span><span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用 cursor () 方法获取操作游标</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cursor <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#通过 open（）方法以只读的方式打开文件，编码格式为 UTF-8</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:/test/test1.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#通过 readlines（）方法读取文件的每一行赋值给 lines</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>lines <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#如果 lines 为真，执行循环的内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> lines<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">:</span>      <span class=\"token comment\">#lines 是一个列表，列表中的每隔元素就是 txt 文件中的一行数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>         <span class=\"token comment\">#这一步是为了验证是否能如期获取到列表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#strip（）去掉字符串头尾的符号，通过 \",\" 将每行数据拆分</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        a <span class=\"token operator\">=</span> line<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>         <span class=\"token comment\">#我的 txt 文件中每行三个元素，所以将三个元素分别赋值给变量 abc</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        b <span class=\"token operator\">=</span> line<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        c <span class=\"token operator\">=</span> line<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        sql <span class=\"token operator\">=</span> <span class=\"token string\">\"insert into student values(%s,%s,%s)\"</span>  <span class=\"token comment\">#数据库数据插入语句</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        param <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>                            <span class=\"token comment\">#param 参数是要输入的数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span>              <span class=\"token comment\">#cursor.execute (sql,param) 方法执行插入语句</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>conn<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">#提交</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                  <span class=\"token comment\">#关闭所有的连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>查询\n<ol>\n<li>查询数据量，写了个 select count (*)  from  db; 如果有记录人的字段 nid，select count (* )  from  db group by nid having nid=x;</li>\n</ol>\n</li>\n<li>会问\n<ol>\n<li>测开的知识学习，同一面</li>\n<li>互联网多年从外企到大厂的感受\n<ol>\n<li>为了钱，互联网肯定是丛林法则，要竞争，但也是匹配的，只要比同阶段的快、强一点，就会产生价值，保持这种更前的身位就可以不用太焦虑。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"腾讯\"><a class=\"anchor\" href=\"#腾讯\">#</a> 腾讯</h2>\n<h3 id=\"415-一面\"><a class=\"anchor\" href=\"#415-一面\">#</a> 4.15 一面</h3>\n<p>狗屎 kpi，就两道 easy，a 完直接说结束，不想要可以不捞</p>\n<h3 id=\"516-一面\"><a class=\"anchor\" href=\"#516-一面\">#</a> 5.16 一面</h3>\n<p>广告部门，数据工程 - 开发，捞，体感好多了，正常的。复盘整理了些资料：</p>\n<ul>\n<li>线程池多种实现\n<ul>\n<li>ThreadPoolExecutor\n<ul>\n<li>new  ThreadPoolExecutor / ScheduledThreadPoolExecutor（子类，扩展了延时任务和定时任务的功能）</li>\n<li>优化：\n<ul>\n<li><strong> <code>ThreadFactoryBuilder</code> </strong> 命名</li>\n<li>线程数设置：CPU 密集型任务 (N+1)、I/O 密集型任务 (2N)</li>\n<li>动态调整 <code>corePoolSize</code> ， <code>maximumPoolSize</code> ， <code>workQueue</code> 。前两个有 set 方法，后者像美团自定义了一个叫做  <code>ResizableCapacityLinkedBlockIngQueue</code> （capacity 字段的 final 去掉）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Executor\n<ul>\n<li><code>FixedThreadPool</code> ：固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。</li>\n<li><code>SingleThreadExecutor</code> ： 只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\n<ul>\n<li>上两个使用的是无界的  <code>LinkedBlockingQueue</code> ，任务队列最大长度为  <code>Integer.MAX_VALUE</code> , 可能堆积大量的请求，从而导致 OOM。</li>\n</ul>\n</li>\n<li><code>CachedThreadPool</code> ： 可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。\n<ul>\n<li>使用的是同步队列  <code>SynchronousQueue</code> , 允许创建的线程数量为  <code>Integer.MAX_VALUE</code>  ，如果任务数量过多且执行速度较慢，可能会创建大量的线程，从而导致 OOM。</li>\n</ul>\n</li>\n<li><code>ScheduledThreadPool</code> ：给定的延迟后运行任务或者定期执行任务的线程池。\n<ul>\n<li>无界的延迟阻塞队列 <code>DelayedWorkQueue</code> ，任务队列最大长度为  <code>Integer.MAX_VALUE</code> , 可能堆积大量的请求，从而导致 OOM。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWFwZHVtcC5jbi9hcnRpY2xlLzY0NjYzOQ==\">使用不当的学习</span></li>\n<li>线程池和  <code>ThreadLocal</code>  共用，可能会导致线程从 <code>ThreadLocal</code>  获取到的是旧值 / 脏数据。这是因为线程池会复用线程对象，与线程对象绑定的类的静态属性  <code>ThreadLocal</code>  变量也会被重用，这就导致一个线程可能获取到其他线程的 <code>ThreadLocal</code>  值。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>executor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 等待线程池关闭，最多等待 5 分钟</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>executor<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 如果等待超时，则打印日志</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程池未能在5分钟内完全关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>JVM 调优参数</p>\n<ul>\n<li>堆内存参数（初始堆、最大堆、新生代、老年代）</li>\n<li>垃圾回收器参数</li>\n<li>线程参数（垃圾回收得线程数、线程栈大小）</li>\n<li>元空间大小</li>\n</ul>\n</li>\n<li>\n<p>JVM 实现本地缓存的方法 / 框架</p>\n<ol>\n<li><strong>Guava Cache</strong>：Guava 是 Google 的一个开源 Java 库，其中包含了 Guava Cache 这个本地缓存组件。Guava Cache 提供了基于 LRU（最近最少使用）策略的缓存机制，同时还支持数据加载、统计、移除监听等功能。</li>\n<li><strong>Caffeine</strong>：Caffeine 是一个高性能、接近最优的本地缓存库，基于 Java 8 开发。Caffeine 提供了基于 W-TinyLFU（Window Tiny Least Frequently Used）策略的缓存淘汰算法，这种算法在命中率和性能上都优于传统的 LRU 策略。此外，Caffeine 还提供了灵活的缓存配置和监控功能。</li>\n<li><strong>EHCache</strong>：EHCache 是一个纯 Java 的、进程内的缓存框架，具有快速、精干和可扩展等特点。EHCache 支持多种缓存策略，包括 LRU、LFU、FIFO 等，同时还提供了分布式缓存解决方案。</li>\n<li><strong>JCache（JSR107）</strong>：JCache 是 Java 缓存 API 的标准规范（JSR107），它定义了缓存的基本操作、特性和行为。虽然 JCache 本身不是一个具体的缓存实现，但它为开发者提供了一种统一的方式来使用缓存，使得不同的缓存实现可以无缝集成到 Java 应用中。</li>\n<li><strong>JetCache</strong>：JetCache 是一个基于 Java 的缓存抽象库，它整合了 Guava Cache、Caffeine、Redis 等多种缓存实现，并为开发者提供了简洁易用的 API 和注解支持。JetCache 支持分布式缓存、缓存同步、缓存失效等多种功能，可以方便地集成到 Spring Boot 等 Java 框架中。</li>\n</ol>\n</li>\n<li>\n<p>redo log（innodb），bin log（主从复制）</p>\n<ul>\n<li>redo log 是循环写入的。但 InnoDB 通过 LSN、Checkpoint、双写缓冲和 Flush/Sync 等机制来确保 redo log 中的数据不会被过早地覆盖掉，从而保证了数据的完整性和持久性。</li>\n<li>bin log 是追加写入的，设置 max_binlog_size（配置文件 my.cnf 或 my.ini）管理单个 log 大小， <code>expire_logs_days</code>  参数来自动删除旧的 binlog 文件。还可以手动删除。</li>\n</ul>\n</li>\n<li>\n<p>抽象类和接口在实际使用中，应该怎么选择？</p>\n<ul>\n<li>抽象类：抽取共性、需要实现一种模板模式时、“is-a” 关系时</li>\n<li>接口：规范或契约，为了同名调用而不关注实现细节、多重继承时、“has-a” 关系时</li>\n<li>抽象类可以包含抽象方法和非抽象方法；接口只能包含抽象方法和常量</li>\n</ul>\n</li>\n<li>\n<p>事务隔离级别对应的解决方法</p>\n<ol>\n<li>READ UNCOMMITTED（未提交读）\n<ul>\n<li>行为：事务可以读取其他未提交事务的数据。这可能导致脏读、不可重复读和幻读。</li>\n</ul>\n</li>\n<li>READ COMMITTED（已提交读）\n<ul>\n<li>行为：只允许读取并发事务已经提交的数据。这解决了脏读问题，但仍然存在不可重复读和幻读。</li>\n<li>解决方法：\n<ul>\n<li>使用多版本并发控制（MVCC）来提高并发性能。MVCC 允许每个事务看到数据的一个一致的快照，而无需对正在访问的数据加锁。</li>\n<li>在某些情况下，可以通过优化查询和索引来减少不可重复读和幻读的影响。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>REPEATABLE READ（可重复读）**\n<ul>\n<li>行为：对同一字段的多次读取结果都是一致的。这是 MySQL 的默认隔离级别，并解决了脏读问题。但是，它仍然允许幻读。</li>\n<li>解决方法：\n<ul>\n<li>使用 MVCC 和行级锁来确保在事务执行期间数据的一致性。</li>\n<li>对于幻读问题，可以通过在查询中使用更具体的条件或使用乐观锁等技术来减少其影响。</li>\n<li><strong>间隙锁</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SERIALIZABLE（可串行化）\n<ul>\n<li>行为：最高的隔离级别，它通过强制事务串行执行来避免脏读、不可重复读和幻读。但是，这会导致最低的并发性能。</li>\n<li>解决方法：\n<ul>\n<li>尽量避免使用此级别，因为它会显著降低并发性能。</li>\n<li>如果确实需要确保数据的一致性和可串行性，可以考虑在应用程序层面使用分布式锁或其他同步机制来实现。</li>\n<li>在某些情况下，可以通过优化数据库设计和查询来减少对可串行化级别的需求。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>缓存击穿、穿透、雪崩</p>\n<ul>\n<li>击穿：热点的 key 失效了，导致大并发集中打在数据库上。热点的 key 可以设置永不过期的 key。使用互斥锁。如果缓存失效的情况，只有拿到锁才可以查询数据库，并且及时写回 redis</li>\n<li>穿透：key 不存在 Redis 中时，大量请求去数据库查询。把无效的 Key 存进 Redis 中，黑白名单；使用布隆过滤器</li>\n<li>雪崩：大规模的 key 失效。熔断机制。当流量到达一定的阈值时，就直接返回 “系统拥挤” 之类的提示，防止过多的请求打在数据库上；提高数据库的容灾能力，可以使用分库分表，读写分离的策略；为了防止 Redis 宕机导致缓存雪崩的问题，可以搭建 Redis 集群，提高 Redis 的容灾性；错位设置过期时间，保证一定的命中率；</li>\n</ul>\n</li>\n<li>\n<p>布隆过滤器</p>\n<ul>\n<li>布隆过滤器（Bloom Filter）是一种空间效率很高的随机化数据结构。由一个很长的二进制向量（即位数组）和一系列随机映射函数（哈希函数）组成。当一个元素被加入集合时，通过 K 个散列函数将这个元素映射成位数组中的 K 个点，并将这些点置为 1。检索时，我们检查这些点是否都是 1：如果任何一个点为 0，则被检元素一定不在集合中；如果所有点都是 1，则被检元素很可能在集合中（但也可能存在误判）</li>\n<li>会误算 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mi>k</mi><mi>n</mi></mrow><mi>m</mi></mfrac></mrow></msup><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(p = (1 - e^{-\\frac{kn}{m}})^k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.22902em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.97902em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8800285714285714em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span style=\"top:-3.2255000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> + 一般时候不删除。 (m) 是 bit 数组的长度， (n) 是已经添的元素数量，(k) 是哈希函数的个数</li>\n</ul>\n</li>\n<li>\n<p>什么时候服务降级（提示 spring cloud）</p>\n<ul>\n<li>Spring Cloud 主要通过断路器模式来实现服务降级，常用的框架有 Hystrix 和 Sentinel</li>\n<li>负载过高、资源不足、服务不可用、业务需求</li>\n</ul>\n</li>\n<li>\n<p>分布式一致性算法、共识算法（paxos，raft）</p>\n<ul>\n<li>解决：在分布式系统中，由于节点之间通过网络进行通信，可能存在通信延迟、节点故障等问题，这可能导致不同节点上的数据状态不一致。</li>\n</ul>\n<ol>\n<li><strong>Paxos 算法</strong>：\n<ul>\n<li><strong>背景</strong>：Paxos 算法是由莱斯利・兰伯特（Leslie Lamport）于 1990 年提出的一种基于消息传递且具有高度容错特性的一致性算法。它主要用于解决在分布式系统中如何就某个值达成一致的问题。</li>\n<li><strong>实现</strong>：Paxos 算法将角色分为提议者（proposers）、接受者（acceptors）和学习者（learners）。提议者提出提案，提案信息包括提案编号和提议的 value；接受者可以接受提案，若提案获得多数接受者的接受，则称该提案被批准；学习者只能 “学习” 被批准的提案。通过这种方式，Paxos 算法确保了在分布式系统中，即使存在网络延迟、消息丢失等问题，也能达成一致。</li>\n</ul>\n</li>\n<li><strong>Raft 算法</strong>：\n<ul>\n<li><strong>背景</strong>：Raft 算法是一种为了管理复制日志的一致性算法，它提供了一种在计算系统集群中分布状态机的通用方法，确保集群中的每个节点都同意一系列相同的状态转换。Raft 是 Paxos 算法的一种更易理解的实现。</li>\n<li><strong>实现</strong>：Raft 算法通过逻辑分离将共识问题分解为两个相对独立的子问题：领导者选举和日志复制。在领导者选举阶段，如果服务器在一段时间内没有收到领导者的通信，则服务器成为候选者，开始选举。一旦选举成功，领导者负责将日志复制到关注者，确保集群中的所有节点都保持数据一致。</li>\n</ul>\n</li>\n<li><strong>Zab 协议（ZooKeeper Atomic Broadcast Protocol）</strong>：\n<ul>\n<li><strong>背景</strong>：Zab 协议是 ZooKeeper 中用于实现分布式数据一致性的算法。它借鉴了 Paxos 的思想，包含原子广播协议和崩溃恢复协议两部分。</li>\n<li><strong>实现</strong>：Zab 协议的实现分为三个阶段：领导者选举阶段、数据恢复阶段和广播阶段。在领导者选举阶段，系统选举出一个领导者节点。在数据恢复阶段，领导者节点将数据同步给所有的跟随者节点。在广播阶段，领导者节点将客户端的请求转化为事务提议，并通过广播的方式发送给所有的跟随者节点，确保所有节点上的数据保持一致。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>分布式事务（两阶段提交）</p>\n<ul>\n<li><strong>两阶段提交（Two-Phase Commit，简称 2PC）</strong> 是一种原子提交协议，用于确保在分布式系统中，所有参与事务的节点都可以一致地决定是否提交或回滚分布式事务。该协议通过两个阶段和多个参与者（例如，资源管理器或数据库）之间的消息传递来协调事务。</li>\n</ul>\n<ol>\n<li><strong>准备阶段（Prepare Phase）</strong>：\n<ul>\n<li>事务协调器（Transaction Coordinator）向所有参与者（例如，数据库）发送 “准备提交” 的请求。</li>\n<li>参与者评估事务，如果本地操作成功，则锁定资源并准备提交事务，同时返回 “准备成功” 的消息给协调器；如果本地操作失败，则返回 “准备失败” 的消息。</li>\n</ul>\n</li>\n<li><strong>提交 / 中止阶段（Commit/Abort Phase）</strong>：\n<ul>\n<li>如果协调器从所有参与者那里都收到了 “准备成功” 的消息，它会向所有参与者发送 “提交” 命令。然后，参与者释放锁定的资源，提交本地事务，并返回 “提交成功” 的消息给协调器。</li>\n<li>如果任何一个参与者返回了 “准备失败” 的消息，或者协调器在等待响应时超时，协调器会向所有参与者发送 “中止” 命令。然后，参与者释放锁定的资源，回滚本地事务，并返回 “中止成功” 的消息给协调器。<br />\n两阶段提交协议的优点是它可以确保数据的一致性，但它也有一些缺点：</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>阻塞问题</strong>：在准备阶段，参与者会锁定资源等待协调器的指令，这可能导致阻塞。</li>\n<li><strong>单点故障</strong>：如果协调器发生故障，参与者可能会一直等待，导致系统无法继续。</li>\n<li><strong>性能问题</strong>：由于需要两阶段的消息传递和等待，两阶段提交协议可能会导致性能下降</li>\n</ul>\n</li>\n<li>\n<p>分布式数据库宕机了你怎么处理？</p>\n<ul>\n<li>预防\n<ul>\n<li>多副本、故障转移</li>\n<li>监控和报警</li>\n</ul>\n</li>\n<li>解决\n<ul>\n<li>重启服务</li>\n<li>摘除、排查</li>\n</ul>\n</li>\n<li>事后\n<ul>\n<li>日志记录，分析</li>\n<li>定位问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>如果分布式事务提交之后返回超时你怎么办？</p>\n<ul>\n<li>重试，但要做防重复处理的准备，例如更新前先查看是否有了已经，对应的再次返回确认信号。</li>\n<li>分布式事务协议\n<ul>\n<li>2PC：准备、处理</li>\n<li>3PC：准备、确认、处理</li>\n</ul>\n</li>\n<li>幂等设计</li>\n<li>监控、日志排查。\n<ul>\n<li>出现了死锁，一般伴随着资源的占用快速上升</li>\n<li>任务的积压，导致服务器响应变慢</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>分布式消息队列的使用场景</p>\n<ul>\n<li>异步、削峰、解耦</li>\n<li>事件驱动架构（订阅）</li>\n<li>延迟任务</li>\n</ul>\n</li>\n<li>\n<p>有了解过 doris、clickhouse 这些类型的数据库吗</p>\n<ul>\n<li>分析型数据库</li>\n</ul>\n</li>\n<li>\n<p>如果某天报表中一个商家的成交额突然下降很多，你会怎么处理</p>\n<ul>\n<li>数据确认：下降是否有趋势、规律、是否有误</li>\n<li>数据分析：时间、商品、户用行为</li>\n<li>市场调研：独有的？市场 / 竞争</li>\n<li>数据汇报：生成报表，沟通反馈</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"阿里云-2\"><a class=\"anchor\" href=\"#阿里云-2\">#</a> 阿里云</h2>\n<h3 id=\"47笔试\"><a class=\"anchor\" href=\"#47笔试\">#</a> 4.7 笔试</h3>\n<ul>\n<li>二叉排序树？就是左一定小于 root，右一定大于 root，每次从 root 开始查找</li>\n<li>图论的算法不会</li>\n<li>数据库会考 innodb</li>\n</ul>\n<h3 id=\"416一面\"><a class=\"anchor\" href=\"#416一面\">#</a> 4.16 一面</h3>\n<p>MaxCompute 的部门<br />\n算法：字符串从字符数组中匹配</p>\n<p>jar 包内部，怎么调用别的文件夹的 jar 包<br />\n线程池和自己维护有什么区别？<br />\nnjinx 本身的负荷怎么办？<br />\nrocketMQ 怎么实现的优势（怎么选择一个好的技术）</p>\n<p>推荐扎实的学习 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnpob25ndGlhbnhpYS9hcnRpY2xlL2RldGFpbHMvODA5OTM4Mzc/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDI=\">java 程序员之路及各阶段书籍推荐_java 阶段 书籍 - CSDN 博客</span><br />\n市面上的东西还是要回归底层的实现，这些掌握了，很多问题一眼懂。</p>\n<h2 id=\"淘天-2\"><a class=\"anchor\" href=\"#淘天-2\">#</a> 淘天</h2>\n<h3 id=\"421-笔试\"><a class=\"anchor\" href=\"#421-笔试\">#</a> 4.21 笔试</h3>\n<ul>\n<li>\n<p>要整理可能会用到的 java STL 容器极其方法</p>\n<ul>\n<li>像 HashMap&lt;Integer, List&lt;Integer&gt;&gt; 这种多元素的遍历</li>\n</ul>\n</li>\n<li>\n<p>拓扑排序</p>\n<ol>\n<li>从 DAG 图中选择一个 没有前驱（即入度为 0）的顶点并输出。</li>\n<li>从图中删除该顶点和所有以它为起点的有向边。</li>\n<li>重复 1 和 2 直到当前的 DAG 图为空或<strong>当前图中不存在无前驱的顶点为止</strong>。后一种情况说明有向图中必然存在环。</li>\n</ol>\n</li>\n<li>\n<p>本地 DNS 服务器特有的属性</p>\n</li>\n<li>\n<p>哈夫曼树</p>\n</li>\n<li>\n<p>/bin，/lib，/root，/etc</p>\n<ul>\n<li>/bin: 包含系统启动和运行所必须的二进制文件 (程序)</li>\n<li>/lib: 包含核心系统程序使用的共享库文件，这与 Windows 系统中的 DLL 类似</li>\n<li>/root: root 账户的主目录</li>\n<li>/etc: 包含了所有系统层面的配置文件，同时也包含了一系列 shell 脚本，系统的每次启动时，这些 shell 脚本都会打开每个系统服务。该目录中包含的内容都应该是可读的文本文件。1)/etc/crontab, 该文件定义了自动化任务运行的时间； 2)/etc/fstab, 存储设备以及相关挂载点的列表 ；3）/etc/passward，用户账号列表</li>\n<li>/usr：目录可能是 Linux 系统中最大的目录树。它包含普通用户使用的所有程序和相关文件</li>\n<li>/dev：包含设备节点的特殊目录。内核将它能识别的所有设备存放在这里目录里</li>\n<li>/home：通常的配置下，每个用户都会在 /home 目录中拥有一个属于自己的目录。普通用户只能在自己的主目录中创建文件。这一限制可以保护系统免遭错误的用户行为的破坏</li>\n</ul>\n</li>\n<li>\n<p>不依赖属于哪个设计模式？</p>\n</li>\n<li>\n<p>MySQL substring 和 substr_index</p>\n<ul>\n<li>SUBSTRING(string,position,length);</li>\n<li>SUBSTRING_INDEX (str,delim,count)，是一个通过特定标识符 &quot;delim&quot; 来截取子串的函数。</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-Mysql\">mysql&gt; SELECT SUBSTRING_INDEX('www.csdn.net','.',1) from web_info w;\n+---------------------------------------+\n| SUBSTRING_INDEX('www.csdn.net','.',1) |\n+---------------------------------------+\n| www                                   |\n+---------------------------------------+\n\nmysql&gt; SELECT SUBSTRING_INDEX(substring_index('www.csdn.net','.',2),'.',-1) from web_info w;\n+---------------------------------------------------------------+\n| SUBSTRING_INDEX(substring_index('www.csdn.net','.',2),'.',-1) |\n+---------------------------------------------------------------+\n| csdn                                                          |\n+---------------------------------------------------------------+\n</code></pre>\n<ul>\n<li>页式存储，物理地址、虚拟地址\n<ul>\n<li>逻辑地址 = 页号 + 页内地址</li>\n<li>物理地址 = 页帧号 + 页内地址</li>\n</ul>\n</li>\n<li>视频、网页、邮件、下载更适合 TCP 的\n<ul>\n<li>TCP：网页、邮件、下载</li>\n<li>UDP：音频和视频流，在线游戏，VoIP（语音通话）</li>\n</ul>\n</li>\n<li>List 属于 collection？\n<ul>\n<li>是的，Collection 集合，首先是一个接口 是 Java 中所有集合的总接口！！！</li>\n<li>底下又分为 List（ArrayList、LinkedList、Vector（线程安全的可变长数组，ArrayList 他爹））和 Set（HashSet、TreeSet）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"阿里国际\"><a class=\"anchor\" href=\"#阿里国际\">#</a> 阿里国际</h2>\n<h3 id=\"422-笔试\"><a class=\"anchor\" href=\"#422-笔试\">#</a> 4.22 笔试</h3>\n<ul>\n<li>linux 查看文件指定内容\n<ul>\n<li>grep -oE &quot;<span 5,+=\"\">a-z</span>&quot; xx.text</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token parameter variable\">-E</span> --extended-regexp <span class=\"token comment\"># 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-o</span> <span class=\"token comment\"># 只输出文件中匹配到的部分</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 匹配一个指定范围内的字符，如 '[Gg] rep' 匹配 Grep 和 grep。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x<span class=\"token punctuation\">&#123;</span>m,<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\"># 重复字符 x, 至少 m 次，如：'o &#123;5,&#125;' 匹配至少有 5 个 o 的行。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>所以当时答案应该是：grep <span class=\"token parameter variable\">-oE</span> <span class=\"token string\">\"[a-z]&#123;5,&#125;\"</span> xx.text</pre></td></tr></table></figure><ul>\n<li>RARP 还是 <em>Proxy ARP</em> ，不在同一局域网的路由转发\n<ul>\n<li>ARP 是将 IP 地址解析为以太网 MAC 地址（物理地址）的协议</li>\n<li>与 ARP 不同的是，RARP 是主机向 RARP 服务器获取自己的 IP 地址</li>\n<li>代理 ARP（Proxy-arp）的原理就是当出现跨网段的 ARP 请求时，路由器将自己的 MAC 返回给发送 ARP 广播请求发送者，实现 MAC 地址代理（善意的欺骗），最终使得主机能够通信\n<ol>\n<li>R1 和 R3 在相互通信时，R1 先发送了一个 ARP 广播数据包，请求 R3 的 mac 地址</li>\n<li>但是由于 R1 是 12.1.1.0 网段，而 R3 是 13.1.1.0 网段，R1 和 R3 之间是跨网段访问的，也就是说 R1 的 ARP 请求会被 R2 拦截到</li>\n<li>然后 R2 会封装自己的 mac 地址为目的地址发送一个 ARP 回应数据报给 R1（善意的欺骗），然后 R2 就会代替 R1 去访问 R3。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>kruskal 图的边的几种搜索方式\n<ul>\n<li>最小生成树 ——Prim 和 Kruskal 算法</li>\n<li>Prim 从某点出发，以此纳入当前权重最小的边</li>\n<li>Kruskal 从全局最小边逐渐构成，会生成环时则跳过</li>\n</ul>\n</li>\n<li>\n<h2 id=\"linux挂载\"><a class=\"anchor\" href=\"#linux挂载\">#</a> Linux 挂载</h2>\n</li>\n<li>流量控制和拥塞控制是 T 还是 U。 T√</li>\n</ul>\n<h3 id=\"429一面\"><a class=\"anchor\" href=\"#429一面\">#</a> 4.29 一面</h3>\n<ul>\n<li>项目问穿了</li>\n<li>要反问每一个技术使用的原因，为什么用这个？</li>\n<li>分库分表等架构是怎么设计的？</li>\n<li>多看面经，虽然这个估计要挂，但确实有收获</li>\n<li>所以哪怕同样的项目简介，其实核心在于面试表现。</li>\n</ul>\n<h2 id=\"一些笔面试存在的问题记录\"><a class=\"anchor\" href=\"#一些笔面试存在的问题记录\">#</a> 一些笔 / 面试存在的问题记录</h2>\n<ul>\n<li>\n<p>SQL 分组后的处理是组内处理还是组外处理？如排序，得重新理一下</p>\n<ul>\n<li>还有结合 join 使用那些</li>\n</ul>\n</li>\n<li>\n<p>曼彻斯特和归零编码</p>\n<ul>\n<li><img data-src=\"https://img-blog.csdnimg.cn/22181781686849beb54347d0f94215a4.png\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>会触发内存回收的语句，具体的 JVM 命令确实不熟</p>\n<ul>\n<li>jstat 命令可以查看堆内存各部分的使用量，以及加载类的数量.jstat [- 命令选项] [vmid] [间隔时间 / 毫秒] [查询次数]</li>\n<li><code>-class</code> ：显示类加载、卸载数量、总空间和装载耗时的统计信息。</li>\n<li><code>-compiler</code> ：显示即时编译的方法、耗时等信息。</li>\n<li><code>-gc</code> ：显示堆各个区域内存使用和垃圾回收的统计信息。</li>\n<li><code>-gccapacity</code> ：显示堆各个区域的容量及其对应的空间的统计信息。</li>\n<li><code>-gcutil</code> ：显示有关垃圾收集统计信息的摘要。</li>\n<li><code>-gccause</code> ：显示关于垃圾收集统计信息的摘要 (与 - gcutil 相同)，以及最近和当前垃圾回收的原因。</li>\n<li><code>-gcnew</code> ：显示新生代的垃圾回收统计信息。</li>\n<li><code>-gcnewcapacity</code> ：显示新生代的大小及其对应的空间的统计信息。</li>\n<li><code>-gcold</code> : 显示老年代和元空间的垃圾回收统计信息。</li>\n<li><code>-gcoldcapacity</code> ：显示老年代的大小统计信息。</li>\n<li><code>-gcmetacapacity</code> ：显示元空间的大小的统计信息。</li>\n<li><code>-printcompilation</code> ：显示即时编译方法的统计信息</li>\n<li>结果都是显示统计的，用于监控的，可能是 -gc ？</li>\n</ul>\n</li>\n<li>\n<p>排序算法，选择和直插的区别，归并就是多路归并吧</p>\n<ul>\n<li>选择排序的时间复杂度是定死的，就是 O (n^2)。就是要从无序区域找到极值然后放入</li>\n<li>插入排序的时间复杂度与数据的输入有关，当初始时给你的数据就是有序的，那么这种状态就是插入排序最好的情况，时间复杂度为 O (n)。从无序区的第一位插入有序区对应的位置，相对来说少了些不必要的</li>\n</ul>\n</li>\n<li>\n<p>SQL IF NULL 忘了里面参数的对应</p>\n<ul>\n<li>IFNULL(expression_1,expression_2);</li>\n<li>如果 <code>expression_1</code>  不为 <code>NULL</code> ，则 <code>IFNULL</code>  函数返回 <code>expression_1</code> ; 否则返回 <code>expression_2</code>  的结果</li>\n<li><code>IFNULL</code>  函数根据使用的上下文返回字符串或数字。如果要返回基于 <code>TRUE</code>  或 <code>FALSE</code>  条件的值，而不是 <code>NULL</code> ，则应使用 IF 函数</li>\n</ul>\n</li>\n<li>\n<p>消息队列拉取和推送的模式</p>\n<ul>\n<li><img data-src=\"https://img-blog.csdnimg.cn/20190104110203472.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZhdGVSdWxlcg==,size_16,color_FFFFFF,t_70\" alt=\"\" /></li>\n<li>Push 模式模式是服务器端根据用户需要，由目的、按时将用户感兴趣的信息主动发送到用户的客户端\n<ul>\n<li>优点:\n<ul>\n<li>对用户要求低，方便用户获取需要的信息</li>\n<li>及时性好，服务器端即使地向客户端推送更行的动态信息</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>不能确保发送成功。Push 模式采用广播方式，只有服务器端和客户端在同一个频道上，推模式才有效，用户才能接收到信息</li>\n<li>没有信息状态跟踪。Push 模式采用开环控制技术，一个信息推送后的状态，比如客户端是否接收等，无从得知</li>\n<li>针对性较差。推送的信息可能并不能满足客户端的个性化需求。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Pull 模式是客户端主动从服务器端获取信息\n<ul>\n<li>优点：\n<ul>\n<li>针对性强，能满足客户端的个性化需求</li>\n<li>信息传输量较小，网络中传输的知识客户端的请求和服务器端对该请求的响应</li>\n<li>服务器端的任务轻。服务器端只是被动接收查询，对客户端的查询请求做出响应</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>实时较差，针对于服务器端实时更新的信息，客户端难以获取实时信息</li>\n<li>对于客户端用户的要求较高，需要对服务器端具有一定的了解。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>组合违反了开闭原则？</p>\n<ul>\n<li>符合的</li>\n<li>组合是一种 has-a 的 关系。就是 A 类的对象是 B 类的成员变量，A 类中的所有功能，B 类都可以通过 A 类对象的调用来实现\n<ul>\n<li>组合是通过对现有的类进行拼装（组合）产生新的、更复杂的功能。因为在类之间，各自的内部细节是不可见的，所以这种方式的代码复用是黑盒式代码复用。（因为组合中一般都定义一个类型，所以在编译期根本不知道具体会调用哪个实现类的方法）</li>\n<li>组合，在写代码的时候可以采用面向接口编程。所以，类的组合关系一般在运行期确定</li>\n</ul>\n</li>\n<li>继承是一种 is-a 的 关系\n<ul>\n<li>继承结构中，父类的内部细节对于子类是可见的。所以通过继承的代码复用是一种白盒式代码复用</li>\n<li>如果父类的实现跟随版本而发生改变，那么子类的实现也将随之改变。这样就导致了子类行为的不可预知性</li>\n<li>继承，在写代码的时候就要指名具体继承哪个类，所以，在编译期就确定了关系。（从基类继承来的实现是无法在运行期动态改变的，因此降低了应用的灵活性）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>不属于 JUC 的 blockingQueue 实现的？<br />\nBlockingQueue 是⼀个带阻塞功能的队列，当⼊队列时，若队列已满，则阻塞调⽤者；当出队列时，若队列为空，则阻塞调用者。</p>\n<p>在 Concurrent 包中， BlockingQueue 是⼀个接⼝，有许多个不同的实现类，如图所示<br />\n<img data-src=\"https://img-blog.csdnimg.cn/12dfbec2fbdf420981998b6e1c6f3931.png#pic_center\" alt=\"\" /></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">E</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<ul>\n<li>该接口和 JDK 集合包中的 Queue 接口是兼容的，同时在其基础上增加了阻塞功能。在这里，⼊队提供了 add ()、offer ()、 put () 3 个方法，有什么区别呢？</li>\n<li>从上面的定义可以看到， add () 和 offer () 的返回值是布尔类型，而 put () ⽆返回值，还会抛出中断异常，所以 add () 和 offer () 是⽆阻塞的，也是 Queue 本身定义的接⼝，而 put () 是阻塞的。</li>\n<li>add () 和 offer () 的区别不大，当队列为满的时候，前者会抛出异常，后者则直接返回 false。</li>\n<li>出队列与之类似，提供了 remove ()、 poll ()、 take () 等方法， remove () 是非阻塞式的， take () 和 poll () 是阻塞式的。</li>\n</ul>\n</li>\n<li>\n<p>GBN 协议，属于滑动窗口协议，此外还有 SR</p>\n<ul>\n<li>滑动窗口协议：发送方和接收方各有一个缓存数组，每个数组有个两个扫描指针，开头和结尾，一起向后扫描，两者形成一个窗口，所以被称为窗口协议\n<ul>\n<li><mark>发送方</mark>存放着：已发送且成功确认包序号、已发送未确认包序号 ，未发送包序号</li>\n<li><mark>接收方</mark>存放着：已接受包序号、正在接收包序号、未接收包序号</li>\n</ul>\n</li>\n<li>GBN (回退 N 重传协议)：对于出错的第 X 位数据，会回传 ack：X-1，加入有 X+n 其实成功了，也会被重传，因为接收方的窗口一直卡在要接收第 X 位。</li>\n<li>SR (选择重传协议)：选择重传协议只重传真正丢失的分组</li>\n</ul>\n</li>\n<li>\n<p>继承的子类能否有父类同名元素，C++ 和 java 中</p>\n<ul>\n<li>都是能继承，但要么定义父类调用 get 之类的，或者子类里用 super。public 就看定义的是哪个<br />\n java-------- 私有 ------ 非私有<br />\n构造方法：不能 -------- 不能<br />\n成员变量：能 ------------- 能<br />\n成员方法：不能 ----------- 能（在虚方法表中的成员方法都能继承，在成员方法的继承中有解释）</li>\n</ul>\n</li>\n<li>\n<p>Truncate table</p>\n<ul>\n<li>只需要指定要清空数据的表名即可。该命令会立即删除表中的所有数据，使表回到初始状态，就像新建一张没有任何记录的空表一样。</li>\n<li>速度明显快于 <code>DELETE</code> ，直接丢弃数据，重置表计数器（覆写？），意味着这个操作不能用于基于日志的复制和恢复机制（如主从复制）； <code>DELETE</code>  语句则会逐行删除记录，并且如果启用了事务和 binlog，还会记录这些删除操作</li>\n<li><code>TRUNCATE TABLE</code>  是 DDL 操作（数据定义语言），执行后不能回滚，且会自动提交，即使是在事务中执行也是如此； <code>DELETE</code>  是 DML 操作（数据操纵语言），可以在事务中执行，并支持回滚</li>\n</ul>\n</li>\n<li>\n<p>shell 创建变量</p>\n<ul>\n<li>name=&quot;xx&quot;，要加引号，不能有空格，变量名不能以数字开头\n<ul>\n<li>在一些 Shell 中，你可以使用 <strong>declare</strong> 或 <strong>typeset</strong> 命令来声明整数变量</li>\n<li>如 <code>declare -i my_integer=42</code></li>\n<li>Shell 也支持数组： <code>my_array=(1 2 3 4 5)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>银行家算法</p>\n<ul>\n<li>当一个进程申请使用资源的时候，银行家算法通过先 <strong>试探</strong> 分配给该进程资源，然后通过安全性算法判断分配后的系统是否处于安全状态，若不安全则试探分配作废，让该进程继续等待。</li>\n<li><img data-src=\"https://img-blog.csdn.net/20180508204335770?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDE0Mjcx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\" /></li>\n<li>假设资源 P1 申请资源，银行家算法先试探的分配给它（当然先要看看当前资源池中的资源数量够不够），若申请的资源数量小于等于 Available，然后接着判断分配给 P1 后剩余的资源，能不能使进程队列的某个进程执行完毕，若没有进程可执行完毕，则系统处于不安全状态（即此时没有一个进程能够完成并释放资源，随时间推移，系统终将处于死锁状态）</li>\n<li>若有进程可执行完毕，则假设回收已分配给它的资源（剩余资源数量增加），把这个进程标记为可完成，并继续判断队列中的其它进程，若所有进程都可执行完毕，则系统处于安全状态，并根据可完成进程的分配顺序生成安全序列，如此就可避免系统存在潜在死锁的风险</li>\n</ul>\n</li>\n<li>\n<p>SQL &lt;&gt; 还是！= 是不等</p>\n<ul>\n<li>在 MySQL 中！= 和 &lt;&gt; 的功能一致，在 sql92 规范中建议是：!=，新的规范中建议为: &lt;&gt;</li>\n<li>而对于等：is 专门用来判断是否为 NULL，而 = 则是用来判断非 NULL 以外的所有数据类型使用。而 &lt;=&gt; 则是前两者合起来</li>\n</ul>\n</li>\n<li>\n<p>进程切换可以在任意时间还是 可以不在内核发生</p>\n<ul>\n<li>进程是由内核来管理和调度的，进程的切换<strong>只能发生在内核态</strong></li>\n<li>进程切换可以在任意阶段发生，但通常发生在以下几种情况下：\n<ol>\n<li>时间片用尽：在多任务操作系统中，通常会使用时间片轮转调度算法来分配 CPU 时间给不同的进程。当一个进程的时间片用尽时，操作系统会进行进程切换，将 CPU 分配给下一个进程。</li>\n<li>阻塞：当一个进程发出了某种需要等待的请求，比如等待 I/O 操作完成或者等待某个事件发生时，它会被阻塞。在这种情况下，操作系统可能会暂时挂起该进程，并将 CPU 分配给另一个可执行的进程。</li>\n<li>中断处理：当发生硬件中断或者软件中断时，CPU 会立即中断当前正在执行的进程，并转而执行中断处理程序。这也是进程切换的一种情况，因为中断处理程序可能会需要切换到其他进程的上下文来执行。</li>\n<li>优先级调度：某些操作系统支持动态调整进程的优先级，当一个高优先级的进程就绪时，操作系统可能会决定抢占当前正在执行的低优先级进程，并进行进程切换。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>跨数据源查询<br />\n跨数据源查询通常涉及在不同的数据存储系统（如关系型数据库、NoSQL 数据库、文件系统等）中执行查询操作，然后将它们的结果合并在一起。实现跨数据源查询的方法取决于你所使用的技术栈和数据存储系统，以下是一些常见的方法：</p>\n<ol>\n<li>手动查询和合并：\n<ul>\n<li>编写针对每个数据源的查询。</li>\n<li>在应用程序中执行这些查询。</li>\n<li>将各个数据源的查询结果合并，并进行必要的处理和整理。</li>\n</ul>\n</li>\n<li>数据库链接：\n<ul>\n<li>如果涉及的数据源都是关系型数据库，你可以使用数据库链接技术（如 MySQL 的 Federated 存储引擎或 PostgreSQL 的 Foreign Data Wrapper）来建立连接，然后在单个查询中执行跨数据库的操作。</li>\n</ul>\n</li>\n<li>ETL 工具：\n<ul>\n<li>使用 ETL（Extract, Transform, Load）工具，如 Apache NiFi、Talend、或 Pentaho，来从不同的数据源中提取数据，将其转换为统一的格式，然后加载到目标数据存储中。一旦数据在目标存储中，你可以执行单一的查询来检索跨数据源的信息。</li>\n</ul>\n</li>\n<li>中间件：\n<ul>\n<li>使用专门设计用于跨数据源查询的中间件或数据虚拟化工具，如 Apache Drill、Presto、或 Dremio。这些工具允许你在一个统一的接口上查询不同类型和来源的数据。</li>\n</ul>\n</li>\n<li>微服务架构：\n<ul>\n<li>如果你的系统采用了微服务架构，每个微服务可能会管理自己的数据存储。在这种情况下，你可以通过微服务之间的通信来实现跨数据源查询，然后在服务端将结果合并。<br />\n但只有用中间件 /api 才能使用 join（因为 JOIN 是针对单一数据库中的多个表进行关联查询的操作）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>SQL 事务约束模式</p>\n<ul>\n<li><code>BEGIN TRANSACTION</code> 、 <code>COMMIT</code>  和 <code>ROLLBACK</code> 、 <code>SET TRANSACTION ISOLATION LEVEL ...</code> ：用于设置当前会话的事务隔离级别。常见的隔离级别包括  <code>READ UNCOMMITTED</code> 、 <code>READ COMMITTED</code> 、 <code>REPEATABLE READ</code>  和  <code>SERIALIZABLE</code> 。</li>\n</ul>\n</li>\n<li>\n<p>ThreadLocal.set 会增加开销？</p>\n<ul>\n<li>使用  <code>ThreadLocal.set</code>  会增加一定的内存开销，但这并不是因为在调用  <code>ThreadLocal.set</code>  时才分配了内存空间。实际上， <code>ThreadLocal</code>  实例本身在创建时就会分配内存空间，用于存储线程本地的变量值。调用  <code>ThreadLocal.set</code>  时，会在当前线程的  <code>ThreadLocalMap</code>  中存储相应的值，而这个  <code>ThreadLocalMap</code>  实例也是预先分配好的。</li>\n<li>因此，使用  <code>ThreadLocal</code>  时，内存开销主要体现在以下几个方面：\n<ol>\n<li><strong>ThreadLocal 实例本身的内存开销</strong>：每个  <code>ThreadLocal</code>  实例都会占用一定的内存空间，用于存储线程本地的变量值。</li>\n<li><strong>ThreadLocalMap 的内存开销</strong>：每个线程都会持有一个  <code>ThreadLocalMap</code>  实例，用于存储该线程中所有使用  <code>ThreadLocal</code>  的变量值。这个  <code>ThreadLocalMap</code>  实例在线程创建时就会分配，并随着线程的生命周期而存在。</li>\n<li><strong>存储的值的内存开销</strong>： <code>ThreadLocalMap</code>  中存储的值本身所占用的内存空间。</li>\n</ol>\n</li>\n<li>虽然  <code>ThreadLocal</code>  存储的变量是线程本地的，但是对于每个使用  <code>ThreadLocal</code>  的线程，都会有额外的开销，因此在考虑内存开销时需要注意。特别是在高并发的情况下，如果不及时清理  <code>ThreadLocal</code>  对象，可能会导致内存泄漏问题。因此，在使用  <code>ThreadLocal</code>  时，应该注意适时清理不再需要的  <code>ThreadLocal</code>  对象，避免不必要的内存占用。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "JAVA"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/20/spring%E5%A4%8D%E4%B9%A0/MyBatis%20Plus/",
            "url": "https://zyakmd.github.io/2024/03/20/spring%E5%A4%8D%E4%B9%A0/MyBatis%20Plus/",
            "title": "MyBatis Plus",
            "date_published": "2024-03-20T11:41:49.000Z",
            "content_html": "<div class=\"note info no-icon\">\n<p>学习目标：</p>\n<ul>\n<li>基于 MyBatisPlus 完成标准 Dao 的增删改查功能</li>\n<li>掌握 MyBatisPlus 中的分页及条件查询构建</li>\n<li>掌握主键 ID 的生成策略</li>\n<li>了解 MyBatisPlus 的代码生成器</li>\n</ul>\n</div>\n<h1 id=\"mybatisplus入门案例与简介\"><a class=\"anchor\" href=\"#mybatisplus入门案例与简介\">#</a> MyBatisPlus 入门案例与简介</h1>\n<p>其他的笔记都是先介绍概念，然后再写入门案例。而对于 MyBatisPlus 的学习，顺序做了调整，主要的原因 MyBatisPlus 主要是对 MyBatis 的简化，所有先体会下它简化在哪，然后再学习它是什么，以及它帮我们都做哪些事</p>\n<h2 id=\"入门案例\"><a class=\"anchor\" href=\"#入门案例\">#</a> 入门案例</h2>\n<ul>\n<li>\n<p>MybatisPlus (简称 MP) 是基于 MyBatis 框架基础上开发的增强型工具，旨在简化开发、提供效率。</p>\n</li>\n<li>\n<p>开发方式</p>\n<ul>\n<li>基于 MyBatis 使用 MyBatisPlus</li>\n<li>基于 Spring 使用 MyBatisPlus</li>\n<li><mark>基于 SpringBoot 使用 MyBatisPlus</mark></li>\n</ul>\n</li>\n</ul>\n<p>上一篇文章复习了 SpringBoot，它能快速构建 Spring 开发环境用以整合其他技术，使用起来是非常简单，对于 MP 的学习，也基于 SpringBoot 来构建学习</p>\n<p>学习之前，简单过下 SpringBoot 整合 Mybatis 的开发过程:</p>\n<ul>\n<li>创建 SpringBoot 工程</li>\n<li>勾选配置使用的技术，能够实现自动添加起步依赖包</li>\n<li>设置 dataSource 相关属性 (JDBC 参数)</li>\n<li>定义数据层接口映射配置</li>\n</ul>\n<p>可以参考着上面的这个实现步骤把 SpringBoot 整合 MyBatisPlus 来快速实现下，具体的实现步骤为:</p>\n<blockquote>\n<p>步骤 1: 创建数据库及表</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> mybatisplus_db <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">use</span> mybatisplus_db<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">user</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    id <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    password  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    age <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    tel <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'18866668888'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jerry'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'jerry'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'16688886666'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jock'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span><span class=\"token number\">41</span><span class=\"token punctuation\">,</span><span class=\"token string\">'18812345678'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'传智播客'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'itcast'</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4006184000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 创建 SpringBoot 工程</p>\n</blockquote>\n<p>只需要勾选 MySQL，不用勾选 MyBatis 了</p>\n<blockquote>\n<p>步骤 3:pom.xml 补全依赖</p>\n</blockquote>\n<p>导入坐标</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><div class=\"note info no-icon\">\n<ul>\n<li>druid 数据源可以加也可以不加，SpringBoot 有内置的数据源，可以配置成使用 Druid 数据源</li>\n<li>从 MP 的依赖关系可以看出，通过依赖传递已经将 MyBatis 与 MyBatis 整合 Spring 的 jar 包导入，我们不需要额外在添加 MyBatis 的相关 jar 包</li>\n</ul>\n</div>\n<blockquote>\n<p>步骤 4: 添加 MP 的相关配置信息</p>\n</blockquote>\n<p>resources 默认生成的是 properties 配置文件，可以将其替换成 yml 文件，并在文件中配置数据库连接的相关信息：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>title:application.yml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/mybatisplus_db<span class=\"token punctuation\">?</span>serverTimezone=UTC </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">## mybatis 的日志信息  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl</pre></td></tr></table></figure><blockquote>\n<p>步骤 5: 根据数据库表创建实体类</p>\n</blockquote>\n<p>注意 id 是 Long 类型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//setter...getter...toString 方法略</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 7: 创建 Dao 接口</p>\n</blockquote>\n<p>重点在这个 <code>@BaseMapper</code>  注解，直接不用写增删改查和相应的 SQL 了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 8: 编写引导类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//@MapperScan(\"com.itheima.dao\")</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus01QuickstartApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mybatisplus01QuickstartApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info no-icon\">\n<p>Dao 接口要想被容器扫描到，有两种解决方案:</p>\n<ul>\n<li>方案一：在 Dao 接口上添加 <code>@Mapper</code>  注解，并且确保 Dao 处在引导类所在包或其子包中\n<ul>\n<li>该方案的缺点是需要在每一 Dao 接口中添加注解</li>\n</ul>\n</li>\n<li>方案二：在引导类上添加 <code>@MapperScan</code>  注解，其属性为所要扫描的 Dao 所在包\n<ul>\n<li>该方案的好处是只需要写一次，则指定包下的所有 Dao 接口都能被扫描到， <code>@Mapper</code>  就可以不写。</li>\n</ul>\n</li>\n</ul>\n</div>\n<blockquote>\n<p>步骤 9: 编写测试类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MpDemoApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info no-icon\">\n<p>userDao 注入的时候下面有红线提示的原因是什么？</p>\n<ul>\n<li>UserDao 是一个接口，不能实例化对象</li>\n<li>只有在服务器启动 IOC 容器初始化后，由框架创建 DAO 接口的代理对象来注入</li>\n<li>现在服务器并未启动，所以代理对象也未创建，IDEA 查找不到对应的对象注入，所以提示报红</li>\n<li>一旦服务启动，就能注入其代理对象，所以该错误提示不影响正常运行。</li>\n</ul>\n</div>\n<p>查看运行输出:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>‘Tom’, <span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>‘tom’, <span class=\"token assign-left variable\">age</span><span class=\"token operator\">=</span><span class=\"token number\">3</span>, <span class=\"token assign-left variable\">tel</span><span class=\"token operator\">=</span>‘18866668888’<span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>User<span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">=</span><span class=\"token number\">2</span>, <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>‘Jerry’, <span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>‘jerry’, <span class=\"token assign-left variable\">age</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>, <span class=\"token assign-left variable\">tel</span><span class=\"token operator\">=</span>‘16688886666’<span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>User<span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">=</span><span class=\"token number\">3</span>, <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>‘Jock’, <span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>‘123456’, <span class=\"token assign-left variable\">age</span><span class=\"token operator\">=</span><span class=\"token number\">41</span>, <span class=\"token assign-left variable\">tel</span><span class=\"token operator\">=</span>‘18812345678’<span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>User<span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">=</span><span class=\"token number\">4</span>, <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>‘略略略’, <span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>‘nigger’, <span class=\"token assign-left variable\">age</span><span class=\"token operator\">=</span><span class=\"token number\">15</span>, <span class=\"token assign-left variable\">tel</span><span class=\"token operator\">=</span>‘4006184000’<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>跟之前整合 MyBatis 相比，你会发现我们不需要在 DAO 接口中编写方法和 SQL 语句了，只需要继承 <code>BaseMapper</code>  接口即可</p>\n<h2 id=\"mybatisplus简介\"><a class=\"anchor\" href=\"#mybatisplus简介\">#</a> MybatisPlus 简介</h2>\n<p>MyBatisPlus（简称 MP）是基于 MyBatis 框架基础上开发的增强型工具，旨在<mark>简化开发、提高效率</mark></p>\n<p>通过刚才的案例，直接明了的体会了简化开发和提高效率这两个方面的优点。<br />\nMyBatisPlus 的官网为: <code>https://mp.baomidou.com/</code> ，是苞米豆拼音，因为域名被抢注了，但是粉丝也捐赠了一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9teWJhdGlzLnBsdXMv\">https://mybatis.plus</span> 域名<br />\n但现在访问 <code>https://mybatis.plus</code>  会发现已经访问不到了</p>\n<p>MP 旨在成为 MyBatis 的最好搭档，而不是替换 MyBatis，所以可以理解为 MP 是 MyBatis 的一套增强工具，它是在 MyBatis 的基础上进行开发的，我们虽然使用 MP 但是底层依然是 MyBatis 的东西，也就是说我们也可以在 MP 中写 MyBatis 的内容。</p>\n<p>对于 MP 的学习，大家可以参考着官方文档来进行学习，里面都有详细的代码案例。</p>\n<div class=\"note info no-icon\">\n<p>MP 的特性:</p>\n<ul>\n<li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>\n<li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li>\n<li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>\n<li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>\n<li>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>\n<li>内置性能分析插件：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>\n<li>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>\n</ul>\n</div>\n<p>SpringBoot 集成 MyBatisPlus 非常的简单，只需要导入 <code>MyBatisPlus</code>  的坐标，然后令 dao 类继承 <code>BaseMapper</code> ，写上泛型，类上方加 <code>@Mapper</code>  注解</p>\n<div class=\"note warning no-icon\">\n<ul>\n<li>甚至没有 sql 语句写表名，为什么能自动识别？\n<ul>\n<li>通过名字，默认情况是在同名的表中查找对应的模型类</li>\n</ul>\n</li>\n<li>要是表明和模型类的名不一样呢？\n<ul>\n<li>在模型类的上方加上 <code>@TableName</code>  注解\n<ul>\n<li>例如数据表叫 <code>tb_user</code>  但数据类叫 <code>User</code> ，那么就在 User 类上加 <code>@TableName(&quot;tb_user&quot;)</code>  注解</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<h1 id=\"标准数据层开发\"><a class=\"anchor\" href=\"#标准数据层开发\">#</a> 标准数据层开发</h1>\n<p>在这一节中我们重点学习的是数据层标准的 CRUD (增删改查) 的实现与分页功能。代码比较多，我们一个个来学习。</p>\n<h2 id=\"标准crud使用\"><a class=\"anchor\" href=\"#标准crud使用\">#</a> 标准 CRUD 使用</h2>\n<p>对于标准的 CRUD 功能都有哪些以及 MP 都提供了哪些方法可以使用呢？</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>自定义接口</th>\n<th>MP 接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>新增</td>\n<td>boolean save(T t)</td>\n<td>int insert(T t)</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>boolean delete(int id)</td>\n<td>int deleteById(Serializable id)</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>boolean update(T t)</td>\n<td>int updateById(T t)</td>\n</tr>\n<tr>\n<td>根据 id 查询</td>\n<td>T getById(int id)</td>\n<td>T selectById(Serializable id)</td>\n</tr>\n<tr>\n<td>查询全部</td>\n<td>List&lt;T&gt; getAll()</td>\n<td>List&lt;T&gt; selectList()</td>\n</tr>\n<tr>\n<td>分页查询</td>\n<td>PageInfo&lt;T&gt; getAll(int page,int size)</td>\n<td>IPage&lt;T&gt; selectPage(IPage&lt;T&gt; page)</td>\n</tr>\n<tr>\n<td>按条件查询</td>\n<td>List&lt;T&gt; getAll(Condition condition)</td>\n<td>IPage&lt;T&gt; selectPage(Wrapper&lt;T&gt;queryWrapper)</td>\n</tr>\n</tbody>\n</table>\n<p>逐个分析</p>\n<h3 id=\"新增\"><a class=\"anchor\" href=\"#新增\">#</a> 新增</h3>\n<p>在进行新增之前，我们可以分析下新增的方法:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> insert <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>T: 泛型，新增用来保存新增数据</li>\n<li>int: 返回值，新增成功后返回 1，没有新增成功返回的是 0</li>\n</ul>\n<p>在测试类中进行新增操作:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus01QuickstartApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZY\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setTel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9527\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行测试后，数据库表中就会添加一条数据。</p>\n<pre><code>1472395123725796781 ZY haha 24 9527\n</code></pre>\n<p>但是数据中的主键 ID，有点长，那这个主键 ID 是如何来的？我们更想要的是主键自增，应该是 5 才对，这个是我们后面要学习的主键 ID 生成策略。也就是说默认非自增</p>\n<h3 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h3>\n<p>在进行删除之前，我们可以分析下删除的方法:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> deleteById <span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> id<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>参数类型为什么是一个序列化类？\n<ul>\n<li>通过查看 String 的源码，你会发现 String 实现了 Serializable 接口，而且 Number 类也实现了 Serializable 接口，String 和 Number 是 Serializable 的子类</li>\n<li>Number 类又是 Float，Double，Long 等类的父类</li>\n<li>那现在能作为主键的数据类型，都已经是 Serializable 类型的子类了</li>\n<li>MP 使用 Serializable 类型当做参数类型，就好比我们用 Object 类型来接收所有类型一样</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>int: 返回值类型，数据删除成功返回 1，未删除数据返回 0。</li>\n</ul>\n<p>在测试类中进行新增操作:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus01QuickstartApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1472395123725796781L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"修改\"><a class=\"anchor\" href=\"#修改\">#</a> 修改</h3>\n<p>在进行修改之前，我们可以分析下修改的方法:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>T: 泛型，需要修改的数据内容，注意因为是根据 ID 进行修改，所以传入的对象中需要有 ID 属性值</li>\n<li>int: 返回值，修改成功后返回 1，未修改数据返回 0</li>\n</ul>\n<p>在测试类中进行新增操作:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus01QuickstartApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>修改的时候，只修改实体对象中有值的字段，未指定的字段保持原样</p>\n</blockquote>\n<h3 id=\"根据id查询\"><a class=\"anchor\" href=\"#根据id查询\">#</a> 根据 ID 查询</h3>\n<p>在进行根据 ID 查询之前，我们可以分析下根据 ID 查询的方法:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">T</span> selectById <span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> id<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>Serializable：参数类型，主键 ID 的值</li>\n<li>T: 根据 ID 查询只会返回一条数据</li>\n</ul>\n<p>在测试类中进行新增操作:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus01QuickstartApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">2L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">=</span><span class=\"token number\">2</span>, <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>‘Jerry’, <span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>‘jerry’, <span class=\"token assign-left variable\">age</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>, <span class=\"token assign-left variable\">tel</span><span class=\"token operator\">=</span>‘16688886666’<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"查询所有\"><a class=\"anchor\" href=\"#查询所有\">#</a> 查询所有</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>Wrapper：用来构建条件查询的条件，目前我们没有可直接传为 Null</li>\n<li>List&lt;T&gt;: 因为查询的是所有，所以返回的数据是一个集合</li>\n</ul>\n<p>在测试类中进行新增操作:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus01QuickstartApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用的方法都是来自于 DAO 接口继承的 <code>BaseMapper</code>  类中。里面的方法有很多，慢慢学习</p>\n<h2 id=\"lombok\"><a class=\"anchor\" href=\"#lombok\">#</a> Lombok</h2>\n<p>代码写到这，我们会发现 DAO 接口类的编写现在变成最简单的了，里面什么都不用写。反过来看看模型类的编写都需要哪些内容:</p>\n<ul>\n<li>私有属性</li>\n<li>setter...getter... 方法</li>\n<li>toString 方法</li>\n<li>构造函数</li>\n</ul>\n<p>虽然这些内容不难，同时也都是通过 IDEA 工具生成的，但是过程还是必须得走一遍，那么对于模型类的编写有没有什么优化方法？</p>\n<ul>\n<li>Lombok</li>\n</ul>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3>\n<ul>\n<li>Lombok，一个 Java 类库，提供了一组注解，简化 POJO 实体类开发。</li>\n</ul>\n<h3 id=\"使用步骤\"><a class=\"anchor\" href=\"#使用步骤\">#</a> 使用步骤</h3>\n<blockquote>\n<p>步骤 1: 添加 lombok 依赖</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!--&lt;version>1.18.12&lt;/version>--></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>版本可以不用写，因为 SpringBoot 中已经管理了 lombok 的版本。</p>\n<blockquote>\n<p>步骤 2: 模型类上添加注解</p>\n</blockquote>\n<p>Lombok 常见的注解有:</p>\n<ul>\n<li>@Data: 是个组合注解，包含以下的注解的功能\n<ul>\n<li>@Setter: 为模型类的属性提供 setter 方法</li>\n<li>@Getter: 为模型类的属性提供 getter 方法</li>\n<li>@ToString: 为模型类的属性提供 toString 方法</li>\n<li>@EqualsAndHashCode: 为模型类的属性提供 equals 和 hashcode 方法</li>\n</ul>\n</li>\n<li>@NoArgsConstructor: 提供一个无参构造函数</li>\n<li>@AllArgsConstructor: 提供一个包含所有参数的构造函数</li>\n</ul>\n<p>Lombok 的注解还有很多，这三个是比较常用的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info no-icon\">\n<ul>\n<li>Lombok 只是简化模型类的编写，我们之前的方法也能用，比如有人会问：我如果只想要有 name 和 password 的构造函数，该如何编写？</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这种方式是被允许的</p>\n</div>\n<h2 id=\"分页功能\"><a class=\"anchor\" href=\"#分页功能\">#</a> 分页功能</h2>\n<p>基础的增删改查就已经学习完了，刚才我们在分析基础开发的时候，有一个分页功能还没有实现，在 MP 中如何实现分页功能，就是咱们接下来要学习的内容。</p>\n<p>分页查询使用的方法是:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>IPage：用来构建分页查询条件</li>\n<li>Wrapper：用来构建条件查询的条件，目前我们没有可直接传为 Null</li>\n<li>IPage：返回值，见后面详解</li>\n</ul>\n<p>IPage 是一个接口，我们需要找到它的实现类来构建它，具体的实现类，可以进入到 IPage 类中按 ctrl+h, 会找到其有一个实现类为 <code>Page</code> 。</p>\n<blockquote>\n<p>步骤 1: 调用方法传入参数获取返回值</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus01QuickstartApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 分页查询</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//1 创建 IPage 分页对象，设置分页参数，1 为当前页码，3 为每页显示的记录数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> page<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//2 执行分页查询</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectPage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//3 获取分页结果</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前页码值：\"</span><span class=\"token operator\">+</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"每页显示数：\"</span><span class=\"token operator\">+</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一共多少页：\"</span><span class=\"token operator\">+</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一共多少条数据：\"</span><span class=\"token operator\">+</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据：\"</span><span class=\"token operator\">+</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 设置分页拦截器</p>\n</blockquote>\n<p>这个拦截器 MP 已经为我们提供好了，我们只需要将其配置成 Spring 管理的 bean 对象即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisPlusConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">mybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//1 创建 MybatisPlusInterceptor 拦截器对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">MybatisPlusInterceptor</span> mpInterceptor<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//2 添加分页拦截器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        mpInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> mpInterceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 运行测试程序</p>\n</blockquote>\n<pre><code>当前页码1  \n本页条数3  \n总页数2  \n总条数4\n[User&#123;id=1, name=Tom, password=tom, age=3, tel=18866668888&#125;, \nUser&#123;id=2, name=Jerry, password=jerry, age=4, tel=16688886666&#125;,\nUser&#123;id=3, name=Jock, password=123456, age=41, tel=18812345678&#125;, \nUser&#123;id=4, name=略略略, password=nigger, age=15, tel=4006184000&#125;]\n\n</code></pre>\n<p>如果想查看 MP 执行的 SQL 语句，可以修改 application.yml 配置文件，</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl <span class=\"token comment\">#打印 SQL 日志到控制台</span></pre></td></tr></table></figure><p>打开日志后，就可以在控制台打印出对应的 SQL 语句，开启日志功能性能就会受到影响，调试完后记得关闭</p>\n<h1 id=\"dql编程控制\"><a class=\"anchor\" href=\"#dql编程控制\">#</a> DQL 编程控制</h1>\n<p>这块结合另一篇笔记 <a href=\"/2024/03/13/MySQL/\" title=\"MySQL\">MySQL</a> 及相关文档看</p>\n<p>增删改查四个操作中，查询是非常重要的也是非常复杂的操作，这块需要我们重点学习下，这节我们主要学习的内容有:</p>\n<ul>\n<li>条件查询方式</li>\n<li>查询投影</li>\n<li>查询条件设定</li>\n<li>字段映射与表名映射</li>\n</ul>\n<h2 id=\"条件查询\"><a class=\"anchor\" href=\"#条件查询\">#</a> 条件查询</h2>\n<h3 id=\"条件查询的类\"><a class=\"anchor\" href=\"#条件查询的类\">#</a> 条件查询的类</h3>\n<ul>\n<li>MyBatisPlus 将书写复杂的 SQL 查询条件进行了封装，使用编程的形式完成查询条件的组合。</li>\n</ul>\n<ul>\n<li>之前在写 CRUD 时，都看到了一个 Wrapper 类，我们当初都是赋一个 null 值，但其实这个类就是用来查询的</li>\n</ul>\n<h3 id=\"环境构建\"><a class=\"anchor\" href=\"#环境构建\">#</a> 环境构建</h3>\n<p>在构建条件查询之前，我们先来准备下环境</p>\n<ul>\n<li>\n<p>创建一个 SpringBoot 项目</p>\n</li>\n<li>\n<p>pom.xml 中添加对应的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>title:pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.5.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatisplus_02_dql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 UserDao 接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写模型类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写引导类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mybatisplus02DqlApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写配置文件</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># dataSource</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/mybatisplus_db<span class=\"token punctuation\">?</span>serverTimezone=UTC</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># mp 日志</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl</pre></td></tr></table></figure></li>\n<li>\n<p>编写测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"减少控制台输出\"><a class=\"anchor\" href=\"#减少控制台输出\">#</a> 减少控制台输出</h3>\n<ul>\n<li>\n<p>测试的时候，控制台打印的日志比较多，速度有点慢而且不利于查看运行结果，所以接下来我们把这个日志处理下:</p>\n<ul>\n<li>取消初始化 spring 日志打印，resources 目录下添加 logback.xml，名称固定，内容如下:</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>logback.xml 的配置内容，不是我们学习的重点，如果有兴趣可以自行百度查询。</p>\n</blockquote>\n<ul>\n<li>\n<p>取消 MybatisPlus 启动 banner 图标<br />\n application.yml 添加如下内容:</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mybatis-plus 日志控制台输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">global-config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">banner</span><span class=\"token punctuation\">:</span> off <span class=\"token comment\"># 关闭 mybatisplus 启动图标</span></pre></td></tr></table></figure></li>\n<li>\n<p>取消 SpringBoot 的 log 打印<br />\n application.yml 添加如下内容:</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">main</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token key atrule\">banner-mode</span><span class=\"token punctuation\">:</span> off <span class=\"token comment\"># 关闭 SpringBoot 启动图标 (banner)</span></pre></td></tr></table></figure></li>\n</ul>\n<p>解决控制台打印日志过多的相关操作可以不用去做，一般会被用来方便查看程序运行的结果</p>\n<h3 id=\"构建条件查询\"><a class=\"anchor\" href=\"#构建条件查询\">#</a> 构建条件查询</h3>\n<p>Wrapper 是一个接口 —— 条件构造器，有很多实现类，说明有多种构建查询条件对象的方式</p>\n<h4 id=\"querywrapper\"><a class=\"anchor\" href=\"#querywrapper\">#</a> QueryWrapper</h4>\n<p>queryWrapper 是 mybatis plus 中实现查询的对象封装操作类，<strong>可以封装 sql 对象，包括 where 条件，order by 排序，select 哪些字段等等</strong>，他的层级关系如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/2cf399969b6f4c3ca335f29292171faa.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MzgzOTc1,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<ul>\n<li>Wrapper：条件构造抽象类，最顶端父类；</li>\n<li>AbstractWrapper：用于查询条件封装，生成 sql 的 where 条件；</li>\n<li>AbstractLambdaWrapper：Lambda 语法使用 Wrapper 统一处理解析 lambda 获取 column。</li>\n<li>LambdaQueryWrapper：用于 lambda 语法使用的查询 Wrapper；</li>\n<li>LambdaUpdateWrapper:Lambda 更新封装 Wrapper;</li>\n<li>QueryWrapper:Entity 对象封装操作类，不是用 lambda；</li>\n<li>UpdateWrapper:Update 条件封装，用于 Entity 对象更新操作。</li>\n</ul>\n<blockquote>\n<p>应用：if 查询为例</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span> qw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        qw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>qw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>lt: 小于 (&lt;) , 最终的 sql 语句为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>tel <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&lt;</span> ?<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<p>Mapper 主要是增删查改四种，Service 还有 page，count 等。完整的 CRUD 接口见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvNDljYzgxLyNzZXJ2aWNlLWNydWQtJUU2JThFJUE1JUU1JThGJUEz\">官方文档</span> 或者看<a href=\"#%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6\">查询条件</a>章节</p>\n<p>第一种方式介绍完后，有个小问题就是在写条件的时候，容易出错，比如 age 写错，就会导致查询不成功</p>\n<h4 id=\"结合lambda\"><a class=\"anchor\" href=\"#结合lambda\">#</a> 结合 lambda</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> qw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        qw<span class=\"token punctuation\">.</span><span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 添加条件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>qw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>User::getAget, 为 lambda 表达式中的，类名：：方法名（如 get/set 属性名），最终的 sql 语句为:</li>\n</ul>\n<ul>\n<li>同时 QueryWrapper 要指定 pojo 类</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>tel <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&lt;</span> ?<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>** 注意:** 构建 LambdaQueryWrapper 的时候泛型不能省。</p>\n<p>此时我们再次编写条件的时候，就不会存在写错名称的情况，但是 qw 后面多了一层 lambda () 调用</p>\n<ol start=\"3\">\n<li>接着来看第三种:<mark>LambdaQueryWrapper</mark></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>直接使用 <code>LambdaQueryWrapper</code>  就解决了上一种方式所存在的问题，实际中也这种多</p>\n<h4 id=\"多条件构建\"><a class=\"anchor\" href=\"#多条件构建\">#</a> 多条件构建</h4>\n<p>学完了三种构建查询对象的方式，每一种都有自己的特点，所以用哪一种都行，刚才都是一个条件，那如果有多个条件该如何构建呢？</p>\n<blockquote>\n<p>需求：查询数据库表中，年龄在 10 岁到 30 岁之间的用户信息</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>gt：大于 (&gt;), 最终的 SQL 语句为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>tel <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&lt;</span> ? <span class=\"token operator\">AND</span> age <span class=\"token operator\">></span> ?<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>构建多条件的时候，可以支持链式编程</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lqw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>需求：查询数据库表中，年龄小于 10 或年龄大于 30 的数据</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>or () 就相当于我们 sql 语句中的 <code>or</code>  关键字，不加默认是 <code>and</code> ，最终的 sql 语句为:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>tel <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&lt;</span> ? <span class=\"token operator\">OR</span> age <span class=\"token operator\">></span> ?<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"null判定\"><a class=\"anchor\" href=\"#null判定\">#</a> null 判定</h4>\n<ul>\n<li>我们在做条件查询的时候，一般会有很多条件可以供用户进行选择查询。</li>\n<li>这些条件用户可以选择使用也可以选择不使用，比如我要查询价格在 8000 以上的手机</li>\n</ul>\n<ul>\n<li>之前我们是通过动态 SQL 来实现的</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectByPageAndCondition<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>brandResultMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    select *  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    from tb_brand  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>where</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>brand.brandName != null and brand.brandName != '' <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            and  brand_name like #&#123;brand.brandName&#125;  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>brand.companyName != null and brand.companyName != '' <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            and  company_name like #&#123;brand.companyName&#125;  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>brand.status != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            and  status = #&#123;brand.status&#125;  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>where</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    limit #&#123;begin&#125; , #&#123;size&#125;  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>****</pre></td></tr></table></figure><ul>\n<li>后台在做价格查询的时候，一般会让 price &gt; 值 1 and price &lt; 值 2</li>\n<li>因为前端没有输入值 2，所以如果不处理的话，就会出现 price&gt;8000 and price &lt; null 问题</li>\n<li>这个时候查询的结果就会出问题，具体该如何解决？\n<ul>\n<li>增添查询处理类</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>需求：查询数据库表中，根据输入年龄范围来查询符合条件的记录</p>\n<ul>\n<li>用户在输入值的时候，<br />\n​ - 如果只输入第一个框，说明要查询大于该年龄的用户\n<ul>\n<li>如果只输入第二个框，说明要查询小于该年龄的用户<br />\n​ - 如果两个框都输入了，说明要查询年龄在两个范围之间的用户</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>问题一：后台如果想接收前端的两个数据，该如何接收？<br />\n 我们可以使用两个简单数据类型，也可以使用一个模型类，但是 User 类中目前只有一个 age 属性，如:</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用一个 age 属性，如何去接收页面上的两个值呢？这个时候我们有两个解决方案</p>\n<ul>\n<li>方案一：添加属性 age2, 这种做法可以但是会影响到原模型类的属性内容</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>方案二：新建一个模型类，让其继承 User 类，并在其中添加 age2 属性，UserQuery 在拥有 User 属性后同时添加了 age2 属性。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserQuery</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>环境准备好后，我们来实现下刚才的需求：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 模拟页面传递过来的查询数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">UserQuery</span> uq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        uq<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        uq<span class=\"token punctuation\">.</span><span class=\"token function\">setAge2</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> uq<span class=\"token punctuation\">.</span><span class=\"token function\">getAge2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            lqw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> uq<span class=\"token punctuation\">.</span><span class=\"token function\">getAge2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> uq<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            lqw<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> uq<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的写法可以完成条件为非空的判断，但是问题很明显，如果条件多的话，每个条件都需要判断，代码量就比较大，来看 MP 给我们提供的简化方式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 还有重载的方法，当 condition 为 true 时，添加条件，为 false 时，不添加条件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Children</span> <span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> condition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span> column<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addCondition</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SqlKeyword</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LT</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最终为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 模拟页面传递过来的查询数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">UserQuery</span> uq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        uq<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        uq<span class=\"token punctuation\">.</span><span class=\"token function\">setAge2</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token operator\">!=</span>uq<span class=\"token punctuation\">.</span><span class=\"token function\">getAge2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> uq<span class=\"token punctuation\">.</span><span class=\"token function\">getAge2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token operator\">!=</span>uq<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> uq<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"查询投影\"><a class=\"anchor\" href=\"#查询投影\">#</a> 查询投影</h2>\n<h3 id=\"查询指定字段\"><a class=\"anchor\" href=\"#查询指定字段\">#</a> 查询指定字段</h3>\n<p>目前我们在查询数据的时候，什么都没有做默认就是查询表中所有字段的内容，我们所说的查询投影即不查询所有字段，只查询出指定内容的数据。 <code>select *</code> &gt; <code>select xx</code> <br />\n 具体如何来实现？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>select (...) 方法用来设置查询的字段列，可以设置多个，最终的 sql 语句为:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果使用的不是 lambda，就需要手动指定字段</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>最终的 sql 语句为：SELECT id,name,age,tel FROM user</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"聚合查询\"><a class=\"anchor\" href=\"#聚合查询\">#</a> 聚合查询</h3>\n<blockquote>\n<p>需求：聚合函数查询，完成 count、max、min、avg、sum 的使用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//lqw.select(\"count(*) as count\");</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//SELECT count(*) as count FROM user</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//lqw.select(\"max(age) as maxAge\");</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//SELECT max(age) as maxAge FROM user</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//lqw.select(\"min(age) as minAge\");</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//SELECT min(age) as minAge FROM user</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//lqw.select(\"sum(age) as sumAge\");</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//SELECT sum(age) as sumAge FROM user</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"avg(age) as avgAge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//SELECT avg(age) as avgAge FROM user</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectMaps</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了在做结果封装的时候能够更简单，我们将上面的聚合函数都起了个名称，方面后期来获取这些数据</p>\n<h3 id=\"分组查询\"><a class=\"anchor\" href=\"#分组查询\">#</a> 分组查询</h3>\n<blockquote>\n<p>需求：分组查询，完成 group by 的查询使用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count(*) as count,tel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectMaps</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>groupBy 为分组，最终的 sql 语句为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> count<span class=\"token punctuation\">,</span>tel <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> tel</pre></td></tr></table></figure></li>\n</ul>\n<div class=\"note info no-icon\">\n<ul>\n<li>聚合与分组查询，无法使用 lambda 表达式来完成</li>\n<li>MP 只是对 MyBatis 的增强，如果 MP 实现不了，我们可以直接在 DAO 接口中使用 MyBatis 的方式实现</li>\n</ul>\n</div>\n<h2 id=\"查询条件\"><a class=\"anchor\" href=\"#查询条件\">#</a> 查询条件</h2>\n<p>前面我们只使用了 lt () 和 gt (), 除了这两个方法外，MP 还封装了很多条件对应的方法，这一节把 MP 提供的查询条件方法进行学习下</p>\n<p>MP 的查询条件有很多:</p>\n<ul>\n<li>范围匹配（&gt; 、 = 、between）</li>\n<li>模糊匹配（like）</li>\n<li>空判定（null）</li>\n<li>包含性匹配（in）</li>\n<li>分组（group）</li>\n<li>排序（order）</li>\n<li>……</li>\n</ul>\n<h3 id=\"等值查询\"><a class=\"anchor\" href=\"#等值查询\">#</a> 等值查询 =</h3>\n<blockquote>\n<p>需求：根据用户名和密码查询用户信息</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jerry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">User</span> loginUser <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>loginUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>eq ()： 相当于  <code>=</code> , 对应的 sql 语句为<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>tel <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> ? <span class=\"token operator\">AND</span> password <span class=\"token operator\">=</span> ?<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>selectList：查询结果为多个或者单个</li>\n<li>selectOne：查询结果为单个</li>\n</ul>\n<h3 id=\"范围查询between\"><a class=\"anchor\" href=\"#范围查询between\">#</a> 范围查询 between</h3>\n<blockquote>\n<p>需求：对年龄进行范围查询，使用 lt ()、le ()、gt ()、ge ()、between () 进行范围查询</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//SELECT id,name,password,age,tel FROM user WHERE (age BETWEEN ? AND ?)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>gt (): 大于 (&gt;)</li>\n<li>ge (): 大于等于 (&gt;=)</li>\n<li>lt (): 小于 (&lt;)</li>\n<li>le (): 小于等于 (&lt;=)</li>\n<li>between():between ? and ?</li>\n</ul>\n<h3 id=\"模糊查询like\"><a class=\"anchor\" href=\"#模糊查询like\">#</a> 模糊查询 like</h3>\n<blockquote>\n<p>需求：查询表中 name 属性的值以 <code>J</code>  开头的用户信息，使用 like 进行模糊查询</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">likeLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"J\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//SELECT id,name,password,age,tel FROM user WHERE (name LIKE ?)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>like (): 前后加百分号，如 % J%</li>\n<li>likeLeft (): 前面加百分号，如 % J</li>\n<li>likeRight (): 后面加百分号，如 J%</li>\n</ul>\n<h3 id=\"排序查询orderby\"><a class=\"anchor\" href=\"#排序查询orderby\">#</a> 排序查询 orderBy</h3>\n<blockquote>\n<p>需求：查询所有数据，然后按照 id 降序</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lwq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         * condition ：条件，返回boolean，</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         \t\t当condition为true，进行排序，如果为false，则不排序</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         * isAsc:是否为升序，true为升序，false为降序</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         * columns：需要操作的列</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        lwq<span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lw</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>除了上面演示的这种实现方式，还有很多其他的排序方法可以被调用：</p>\n<ul>\n<li>orderBy 排序\n<ul>\n<li>condition: 条件，true 则添加排序，false 则不添加排序</li>\n<li>isAsc: 是否为升序，true 升序，false 降序</li>\n<li>columns: 排序字段，可以有多个</li>\n</ul>\n</li>\n<li>orderByAsc/Desc (单个 column): 按照指定字段进行升序 / 降序</li>\n<li>orderByAsc/Desc (多个 column): 按照多个字段进行升序 / 降序</li>\n<li>orderByAsc/Desc\n<ul>\n<li>condition: 条件，true 添加排序，false 不添加排序</li>\n<li>多个 columns：按照多个字段进行排序</li>\n</ul>\n</li>\n</ul>\n<p>除了上面介绍的这几种查询条件构建方法以外还会有很多其他的方法，比如 isNull,isNotNull,in,notIn 等等方法可供选择，具体参考官方文档的条件构造器： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMTBjODA0LyNhYnN0cmFjdHdyYXBwZXI=\">https://baomidou.com/pages/10c804/#abstractwrapper</span></p>\n<h2 id=\"映射匹配兼容性\"><a class=\"anchor\" href=\"#映射匹配兼容性\">#</a> 映射匹配兼容性</h2>\n<p>在上面的案例中，我们做查询的时候，数据表中的字段名与模型类中的属性名一致，查询的时候没有问题，那么问题就来了</p>\n<blockquote>\n<p>问题 1: 表字段与编码属性设计不同步</p>\n</blockquote>\n<ul>\n<li>当表的列名和模型类的属性名发生不一致，就会导致数据封装不到模型对象，这个时候就需要其中一方做出修改，那如果前提是两边都不能改又该如何解决？</li>\n<li>MP 给我们提供了一个注解 <code>@TableField</code> , 使用该注解可以实现模型类属性名和表的列名之间的映射关系</li>\n<li>例如表中密码字段为 <code>pwd</code> ，而模型类属性名为 <code>password</code> ，那我们就可以用 <code>@TableField</code>  注解来实现他们之间的映射关系</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tb_user\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>问题 2: 编码中添加了数据库中未定义的属性</p>\n</blockquote>\n<p>当模型类中多了一个数据库表不存在的字段，就会导致生成的 sql 语句中在 select 的时候查询了数据库不存在的字段，程序运行就会报错，错误信息为:</p>\n<p><code>Unknown column '多出来的字段名称' in 'field list'</code></p>\n<p>具体的解决方案用到的还是 <code>@TableField</code>  注解，它有一个属性叫 <code>exist</code> ，设置该字段是否在数据库表中存在，如果设置为 false 则不存在，生成 sql 语句查询的时候，就不会再查询该字段了。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tb_user\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> online<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>问题 3：采用默认查询开放了更多的字段查看权限</p>\n</blockquote>\n<ul>\n<li>查询表中所有的列的数据，就可能把一些敏感数据查询到返回给前端，这个时候我们就需要限制哪些字段默认不要进行查询。解决方案是 <code>@TableField</code>  注解的一个属性叫 <code>select</code> ，该属性设置默认是否需要查询该字段的值，true (默认值) 表示默认查询该字段，false 表示默认不查询该字段。</li>\n<li>例如像密码这种的敏感字段，不应该查询出来作为 JSON 返回给前端，不安全</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tb_user\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">,</span>select <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> online<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>@TableField</code></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@TableField</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>属性注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>模型类属性定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置当前属性对应的数据库表中的字段关系</td>\n</tr>\n<tr>\n<td>相关属性</td>\n<td>value (默认)：设置数据库表字段名称 &lt; br/&gt;exist: 设置属性在数据库表字段中是否存在，默认为 true，此属性不能与 value 合并使用 &lt; br/&gt;select: 设置属性是否参与查询，此属性与 select () 映射配置不冲突</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>问题 4: 表名与编码开发设计不同步</p>\n</blockquote>\n<p>该问题主要是表的名称和模型类的名称不一致，导致查询失败，这个时候通常会报如下错误信息:<br />\n <code>Table 'databaseName.tableNaem' doesn't exist</code> <br />\n 解决方案是使用 MP 提供的另外一个注解 <code>@TableName</code>  来设置表与模型类之间的对应关系。<br />\n <code>@TableName</code></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@TableName</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>类注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>模型类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置当前类对应于数据库表关系</td>\n</tr>\n<tr>\n<td>相关属性</td>\n<td>value (默认)：设置数据库表名称</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"dml编程控制\"><a class=\"anchor\" href=\"#dml编程控制\">#</a> DML 编程控制</h1>\n<p>查询相关的操作我们已经介绍完了，紧接着我们需要对另外三个，增删改进行内容的讲解。挨个来说明下，首先是新增 (insert) 中的内容。</p>\n<h2 id=\"id生成策略控制\"><a class=\"anchor\" href=\"#id生成策略控制\">#</a> id 生成策略控制</h2>\n<p>前面我们在新增的时候留了一个问题，就是新增成功后，主键 ID 是一个很长串的内容，我们更想要的是按照数据库表字段进行自增长，在解决这个问题之前，我们先来分析下 ID 该如何选择:</p>\n<ul>\n<li>不同的表应用不同的 id 生成策略\n<ul>\n<li>日志：自增（1,2,3,4，……）</li>\n<li>购物订单：特殊规则（FQ23948AK3843）</li>\n<li>外卖单：关联地区日期等信息（10 04 20200314 34 91）</li>\n<li>关系表：可省略 id</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<p>不同的业务采用的 ID 生成方式应该是不一样的，那么在 MP 中都提供了哪些主键生成策略，以及我们该如何进行选择？</p>\n<p>在这里我们又需要用到 MP 的一个注解叫 <code>@TableId</code></p>\n<p><code>@TableId</code></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@TableId</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>属性注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>模型类中用于表示主键的属性定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置当前类中主键属性的生成策略</td>\n</tr>\n<tr>\n<td>相关属性</td>\n<td>value (默认)：设置数据库表主键名称 &lt; br/&gt;type: 设置主键属性的生成策略，值查照 IdType 的枚举值</td>\n</tr>\n</tbody>\n</table>\n<p>在构建条件查询之前，我们先来准备下环境</p>\n<ul>\n<li>\n<p>创建一个 SpringBoot 项目</p>\n</li>\n<li>\n<p>pom.xml 中添加对应的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>title:pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.5.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatisplus_03_dml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 UserDao 接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写模型类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbl_user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">,</span>select<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> online<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写引导类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mybatisplus03DqlApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写配置文件</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># dataSource</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/mybatisplus_db<span class=\"token punctuation\">?</span>serverTimezone=UTC</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># mp 日志</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl</pre></td></tr></table></figure></li>\n<li>\n<p>编写测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus02DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黑马程序员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setTel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4006184000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1401856123925713409L</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jock666\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setVersion</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"auto策略\"><a class=\"anchor\" href=\"#auto策略\">#</a> AUTO 策略</h3>\n<blockquote>\n<p>步骤 1: 设置生成策略为 AUTO</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbl_user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">AUTO</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">,</span>select<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> online<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 删除测试数据并修改自增值</p>\n</blockquote>\n<ul>\n<li>删除 id 过长的数据</li>\n<li>因为之前生成主键 ID 的值比较长，会把 MySQL 的自动增长的值变的很大，所以需要将其调整为目前最新的 id 值。<br />\n<img data-src=\"image-20240321172305009.png\" alt=\"\" /></li>\n</ul>\n<blockquote>\n<p>步骤 3: 运行新增方法</p>\n</blockquote>\n<p>会发现，新增成功，并且主键 id 也是从 5 开始</p>\n<div class=\"note danger no-icon\">\n<p>AUTO` 的作用是使用数据库 ID 自增，在使用该策略的时候一定要确保对应的数据库表设置了 ID 主键自增，否则无效。</p>\n</div>\n<p>进入源码查看下 ID 的生成策略有哪些？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">IdType</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">AUTO</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">NONE</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">INPUT</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">ASSIGN_ID</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">ASSIGN_UUID</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@deprecated</span> */</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Deprecated</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">ID_WORKER</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@deprecated</span> */</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Deprecated</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">ID_WORKER_STR</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@deprecated</span> */</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Deprecated</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">UUID</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从源码中可以看到，除了 AUTO 这个策略以外，还有如下几种生成策略:</p>\n<ul>\n<li>NONE: 不设置 id 生成策略</li>\n<li>INPUT: 用户手工输入 id</li>\n<li>ASSIGN_ID: 雪花算法生成 id (可兼容数值型与字符串型)</li>\n<li>ASSIGN_UUID: 以 UUID 生成算法作为 id 生成策略</li>\n<li>其他的几个策略均已过时，都将被 ASSIGN_ID 和 ASSIGN_UUID 代替掉。</li>\n</ul>\n<div class=\"note info no-icon\">\n<p>拓展：分布式 ID 是什么？</p>\n<ul>\n<li>当数据量足够大的时候，一台数据库服务器存储不下，这个时候就需要多台数据库服务器进行存储</li>\n<li>比如订单表就有可能被存储在不同的服务器上</li>\n<li>如果用数据库表的自增主键，因为在两台服务器上所以会出现冲突</li>\n<li>这个时候就需要一个全局唯一 ID, 这个 ID 就是分布式 ID。</li>\n</ul>\n</div>\n<h3 id=\"input策略\"><a class=\"anchor\" href=\"#input策略\">#</a> INPUT 策略</h3>\n<blockquote>\n<p>步骤 1: 设置生成策略为 INPUT</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbl_user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">,</span>select<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> online<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label warning\">注意</span> 这种 ID 生成策略，需要将表的自增策略删除掉</p>\n<blockquote>\n<p>步骤 2: 添加数据手动设置 ID</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 设置主键 ID 的值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 运行</p>\n</blockquote>\n<h3 id=\"assign_id策略\"><a class=\"anchor\" href=\"#assign_id策略\">#</a> ASSIGN_ID 策略</h3>\n<blockquote>\n<p>步骤 1: 设置生成策略为 ASSIGN_ID</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbl_user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASSIGN_ID</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">,</span>select<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> online<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 添加数据不设置 ID</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label warning\">注意</span> 这种生成策略，不需要手动设置 ID，如果手动设置 ID，则会使用自己设置的值。</p>\n<blockquote>\n<p>步骤 3: 运行</p>\n</blockquote>\n<p>查看结果，生成的 ID 就是一个 Long 类型的数据，生成 ID 时，使用的是雪花算法 (SnowFlake，是 Twitter 官方给出的算法实现，用 Scala 写的），其生成的结果是一个 64bit 大小整数<br />\n<img data-src=\"https://pic.imgdb.cn/item/632af17116f2c2beb119ec90.jpg\" alt=\"\" /></p>\n<ol>\n<li>1bit, 不用，因为二进制中最高位是符号位，1 表示负数，0 表示正数。生成的 id 一般都是用整数，所以最高位固定为 0。</li>\n<li>41bit - 时间戳，用来记录时间戳，毫秒级</li>\n<li>10bit - 工作机器 id，用来记录工作机器 id, 其中高位 5bit 是数据中心 ID 其取值范围 0-31，低位 5bit 是工作节点 ID 其取值范围 0-31，两个组合起来最多可以容纳 1024 个节点</li>\n<li>序列号占用 12bit，每个节点每毫秒 0 开始不断累加，最多可以累加到 4095，一共可以产生 4096 个 ID</li>\n</ol>\n<h3 id=\"assign_uuid策略\"><a class=\"anchor\" href=\"#assign_uuid策略\">#</a> ASSIGN_UUID 策略</h3>\n<blockquote>\n<p>步骤 1: 设置生成策略为 ASSIGN_UUID</p>\n</blockquote>\n<p>使用 uuid 需要注意的是，主键的类型不能是 Long，而应该改成 String 类型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbl_user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASSIGN_UUID</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">,</span>select<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> online<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 修改表的主键类型</p>\n</blockquote>\n<p>对应 Mysql 主键类型设置为 varchar，长度要大于 32，因为 UUID 生成的主键为 32 位，如果长度小的话就会导致插入失败。</p>\n<blockquote>\n<p>步骤 3: 添加数据不设置 ID</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 运行</p>\n</blockquote>\n<div class=\"note info no-icon\">\n<p>UUID (通用唯一标识码)，它保证对在同一时空中的所有机器都是唯一的<br />\n优点:</p>\n<ul>\n<li>UUID 性能非常高：本地生成，没有网络消耗，如果只考虑唯一性 UUID 是好的<br />\n缺点:</li>\n<li>入数据库的性能较差</li>\n<li>无序</li>\n<li>无法预测他的生成顺序，不能生成递增有序的数字。首先分布式 id 一般都会作为主键，UUID 太长，占用存储空间比较大，如果是海量数据库，就需要考虑存储量的问题</li>\n<li>UUID 往往是使用字符串存储，查询的效率比较低。传输数据量大，且不可读</li>\n<li>索引，B+ 树索引的分裂</li>\n<li>既然分布式 id 是主键，主键是包含索引的，然后 mysql 的索引是通过 b+ 树来实现的，，因为 UUID 数据是无序的，每一次新的 UUID 数据的插入，为了查询的优化，都会对索引 &quot; 底层的 B + 树进行修改，这一点不好。插入完全无序，不但会导致一些中间节点产生分裂，也会白白创造出很多不饱和的节点，这样大大降低了数据库插入的性能。</li>\n</ul>\n</div>\n<h3 id=\"id生成策略对比\"><a class=\"anchor\" href=\"#id生成策略对比\">#</a> ID 生成策略对比</h3>\n<p>介绍了这些主键 ID 的生成策略，我们以后该用哪个呢？</p>\n<ul>\n<li>NONE: 不设置 id 生成策略，MP 不自动生成，约等于 INPUT, 所以这两种方式都需要用户手动设置，但是手动设置第一个问题是容易出现相同的 ID 造成主键冲突，为了保证主键不冲突就需要做很多判定，实现起来比较复杂</li>\n<li>AUTO：数据库 ID 自增，这种策略适合在数据库服务器只有 1 台的情况下使用，不可作为分布式 ID 使用</li>\n<li>ASSIGN_UUID：可以在分布式的情况下使用，而且能够保证唯一，但是生成的主键是 32 位的字符串，长度过长占用空间而且还不能排序，查询性能也慢</li>\n<li>ASSIGN_ID：可以在分布式的情况下使用，生成的是 Long 类型的数字，可以排序性能也高，但是生成的策略和服务器时间有关，如果修改了系统时间就有可能导致出现重复主键</li>\n<li>综上所述，每一种主键策略都有自己的优缺点，根据自己项目业务的实际情况来选择使用才是最明智的选择。</li>\n</ul>\n<h3 id=\"简化配置\"><a class=\"anchor\" href=\"#简化配置\">#</a> 简化配置</h3>\n<p>前面我们已经完成了表关系映射、数据库主键策略的设置，接下来对于这两个内容的使用，我们再讲下他们的简化配置:</p>\n<h4 id=\"模型类主键策略设置\"><a class=\"anchor\" href=\"#模型类主键策略设置\">#</a> 模型类主键策略设置</h4>\n<p>对于主键 ID 的策略已经介绍完，但是如果要在项目中的每一个模型类上都需要使用相同的生成策略，比如你有 Book 表，User 表，Student 表，Score 表等好多个表，如果你每一个表的主键生成策略都是 ASSIGN_ID，那我们就可以用 yml 配置文件来简化开发，不用在每一个表的 id 上都加上 <code>@TableId(type = IdType.ASSIGN_ID)</code></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">global-config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">db-config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token key atrule\">id-type</span><span class=\"token punctuation\">:</span> assign_id</pre></td></tr></table></figure><p>配置完成后，每个模型类的主键 ID 策略都将成为 assign_id.</p>\n<h4 id=\"数据库表与模型类的映射关系\"><a class=\"anchor\" href=\"#数据库表与模型类的映射关系\">#</a> 数据库表与模型类的映射关系</h4>\n<p>MP 会默认将模型类的类名名首字母小写作为表名使用，假如数据库表的名称都以 <code>tbl_</code> 开头，那么我们就需要将所有的模型类上添加 <code>@TableName(&quot;tb_TABLENAME&quot;)</code> ，这样做很繁琐，有没有更简单的方式呢？</p>\n<p>简化方式为在配置文件中配置如下内容:</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">global-config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">db-config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token key atrule\">table-prefix</span><span class=\"token punctuation\">:</span> tbl_</pre></td></tr></table></figure><p>设置表的前缀内容，这样 MP 就会拿  <code>tbl_</code> 加上模型类的首字母小写，就刚好组装成数据库的表名。</p>\n<h2 id=\"多记录操作\"><a class=\"anchor\" href=\"#多记录操作\">#</a> 多记录操作</h2>\n<p>应用场景：<br />\n之前添加了很多商品到购物车，过了几天发现这些东西又不想要了，该怎么办呢？</p>\n<p>一个个删除的话还是比较慢和费事的，所以一般会给用户一个批量操作，也就是前面有一个复选框，用户一次可以勾选多个也可以进行全选，然后删一次就可以将购物车清空，这个就需要用到 <code>批量删除</code> 的操作了</p>\n<p>具体该如何实现多条删除，我们找找对应的 API 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">deleteBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COLLECTION</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">></span></span> idList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>删除（根据 ID 批量删除）, 参数是一个集合，可以存放多个 id 值。</p>\n<blockquote>\n<p>需求：根据传入的 id 集合将数据库表中的数据删除掉。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 删除指定多条数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1402551342481838081L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1402553134049501186L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1402553619611430913L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">deleteBatchIds</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行成功后，数据库表中的数据就会按照指定的 id 进行删除。</p>\n<p>除了按照 id 集合进行批量删除，也可以按照 id 集合进行批量查询，还是先来看下 API</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COLLECTION</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">></span></span> idList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>方法名称翻译为：查询（根据 ID 批量查询），参数是一个集合，可以存放多个 id 值。</p>\n<blockquote>\n<p>需求：根据传入的 ID 集合查询用户信息</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetByIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 查询指定多条数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectBatchIds</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"逻辑删除\"><a class=\"anchor\" href=\"#逻辑删除\">#</a> 逻辑删除</h3>\n<p>接下来要讲解是删除中比较重要的一个操作，逻辑删除，先来分析下问题:</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/632b01a716f2c2beb12b5ef9.jpg\" alt=\"\" /></p>\n<ul>\n<li>\n<p>这是一个员工和其所签的合同表，关系是一个员工可以签多个合同，是一个一 (员工) 对多 (合同) 的表</p>\n</li>\n<li>\n<p>员工 ID 为 1 的张业绩，总共签了三个合同，如果此时他离职了，我们需要将员工表中的数据进行删除，会执行 delete 操作</p>\n</li>\n<li>\n<p>如果表在设计的时候有主外键关系，那么同时也得将合同表中的前三条数据也删除掉<br />\n<img data-src=\"https://pic.imgdb.cn/item/632b024516f2c2beb12c1dec.jpg\" alt=\"\" /></p>\n</li>\n<li>\n<p>后期要统计所签合同的总金额，就会发现对不上，原因是已经将员工 1 签的合同信息删除掉了</p>\n</li>\n<li>\n<p>如果只删除员工不删除合同表数据，那么合同的员工编号对应的员工信息不存在，那么就会出现垃圾数据，就会出现无主合同，根本不知道有张业绩这个人的存在</p>\n</li>\n<li>\n<p>所以经过分析，我们不应该将表中的数据删除掉，而是需要进行保留，但是又得把离职的人和在职的人进行区分，这样就解决了上述问题，如:<br />\n<img data-src=\"https://pic.imgdb.cn/item/632b025316f2c2beb12c2d45.jpg\" alt=\"\" /></p>\n</li>\n<li>\n<p>区分的方式，就是在员工表中添加一列数据 <code>deleted</code> ，如果为 0 说明在职员工，如果离职则将其改完 1，（0 和 1 所代表的含义是可以自定义的）</p>\n</li>\n</ul>\n<p>所以对于删除操作业务问题来说有:</p>\n<ul>\n<li>物理删除：业务数据从数据库中丢弃，执行的是 delete 操作</li>\n<li>逻辑删除：为数据设置是否可用状态字段，删除时设置状态字段为不可用状态，数据保留在数据库中，执行的是 update 操作</li>\n</ul>\n<p>MP 中逻辑删除具体该如何实现？</p>\n<blockquote>\n<p>步骤 1: 修改数据库表添加 <code>deleted</code>  列</p>\n</blockquote>\n<p>字段名可以任意，内容也可以自定义，比如 <code>0</code>  代表正常， <code>1</code>  代表删除，可以在添加列的同时设置其默认值为 <code>0</code>  正常。</p>\n<blockquote>\n<p>步骤 2: 实体类添加属性</p>\n</blockquote>\n<ul>\n<li>) 添加与数据库表的列对应的一个属性名，名称可以任意，如果和数据表列名对不上，可以使用 @TableField 进行关系映射，如果一致，则会自动对应。</li>\n<li>标识新增的字段为逻辑删除字段，使用 <code>@TableLogic</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//@TableName (\"tbl_user\") 可以不写是因为配置了全局配置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASSIGN_UUID</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">,</span>select<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> online<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableLogic</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span>delval<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//value 为正常数据的值，delval 为删除数据的值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> deleted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 运行删除方法</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       userDao<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从测试结果来看，逻辑删除最后走的是 update 操作，执行的是 <code>UPDATE tb_user SET deleted=1 WHERE id=? AND deleted=0</code> ，会将指定的字段修改成删除状态对应的值。</p>\n<p>逻辑删除，对查询有没有影响呢？</p>\n<ul>\n<li>\n<p>执行查询操作</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testFind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<pre><code class=\"language-SQL\">SELECT id,name,password,age,tel,deleted FROM tb_user WHERE deleted=0  \n</code></pre>\n<p>可想而知，MP 的逻辑删除会将所有的查询都添加一个未被删除的条件，也就是已经被删除的数据是不应该被查询出来的。</p>\n<ul>\n<li>\n<p>如果还是想把已经删除的数据都查询出来该如何实现呢？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 查询所有数据包含已经被删除的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果每个表都要有逻辑删除，那么就需要在每个模型类的属性上添加 <code>@TableLogic</code>  注解，如何优化？</p>\n<p>在配置文件中添加全局配置，如下:</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">global-config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">db-config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\"># 逻辑删除字段名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">logic-delete-field</span><span class=\"token punctuation\">:</span> deleted</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\"># 逻辑删除字面值：未删除为 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">logic-not-delete-value</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\"># 逻辑删除字面值：删除为 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">logic-delete-value</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr></table></figure></li>\n</ul>\n<p>介绍完逻辑删除，逻辑删除的本质为:</p>\n<p><strong>逻辑删除的本质其实是修改操作。如果加了逻辑删除字段，查询数据时也会自动带上逻辑删除字段。</strong></p>\n<p>执行的 SQL 语句为:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> tbl_user <span class=\"token keyword\">SET</span> deleted<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> ? <span class=\"token operator\">AND</span> deleted<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr></table></figure><p>@TableLogic</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@TableLogic</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>属性注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>模型类中用于表示删除字段的属性定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>标识该字段为进行逻辑删除的字段</td>\n</tr>\n<tr>\n<td>相关属性</td>\n<td>value：逻辑未删除值 &lt;br/&gt;delval: 逻辑删除值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"乐观锁\"><a class=\"anchor\" href=\"#乐观锁\">#</a> 乐观锁</h2>\n<h3 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h3>\n<p>在讲解乐观锁之前，我们还是先来分析下问题:</p>\n<p>业务并发现象带来的问题：秒杀</p>\n<ul>\n<li>假如有 100 个商品或者票在出售，为了能保证每个商品或者票只能被一个人购买，如何保证不会出现超买或者重复卖</li>\n<li>对于这一类问题，其实有很多的解决方案可以使用</li>\n<li>第一个最先想到的就是锁，锁在一台服务器中是可以解决的，但是如果在多台服务器下锁就没有办法控制，比如 12306 有两台服务器在进行卖票，在两台服务器上都添加锁的话，那也有可能会导致在同一时刻有两个线程在进行卖票，还是会出现并发问题</li>\n<li>我们接下来介绍的这种方式是针对于小型企业的解决方案，因为数据库本身的性能就是个瓶颈，如果对其并发量超过 2000 以上的就需要考虑其他的解决方案了。</li>\n</ul>\n<p>简单来说，乐观锁主要解决的问题是当要更新一条记录的时候，希望这条记录没有被别人更新。</p>\n<h4 id=\"实现思路\"><a class=\"anchor\" href=\"#实现思路\">#</a> 实现思路</h4>\n<p>乐观锁的实现方式:</p>\n<div class=\"note info no-icon\">\n<ul>\n<li>数据库表中添加 <code>version</code>  字段，比如默认值给个 1</li>\n<li>第一个线程要修改数据之前，取出记录时，获取当前的 version=1</li>\n<li>第二个线程要修改数据之前，取出记录时，获取当前的 version=1</li>\n<li>第一个线程执行更新时\n<ul>\n<li>set version = newVersion where version = oldVersion\n<ul>\n<li>newVersion = version + 1</li>\n<li>oldVersion = version</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二个线程执行更新时\n<ul>\n<li>set version = newVersion where version = oldVersion\n<ul>\n<li>newVersion = version + 1</li>\n<li>oldVersion = version</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>假如这两个线程都来更新数据，第一个和第二个线程都可能先执行\n<ul>\n<li>假如第一个线程先执行更新，会将 version 改为 2\n<ul>\n<li>那么第二个线程再更新的时候，set version = 2 where version = 1，此时数据库表的 version 已经是 2 了，所以第二个线程修改失败</li>\n</ul>\n</li>\n<li>假如第二个线程先执行更新，会将 version 改为 2\n<ul>\n<li>那么第一个线程再更新的时候，set version = 2 where version = 1，此时数据库表的 version 已经是 2 了，所以第一个线程修改失败</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p>上面所说的步骤具体该如何实现呢？</p>\n<h4 id=\"实现步骤\"><a class=\"anchor\" href=\"#实现步骤\">#</a> 实现步骤</h4>\n<p>分析完步骤后，具体的实现步骤如下:</p>\n<blockquote>\n<p>步骤 1: 数据库表添加列</p>\n</blockquote>\n<p>列名可以任意，比如使用 <code>version</code> , 给列设置默认值为 <code>1</code></p>\n<blockquote>\n<p>步骤 2: 在模型类中添加对应的属性</p>\n</blockquote>\n<p>根据添加的字段列名，在模型类中添加对应的属性值，加上注解 <code>@Version</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//@TableName (\"tbl_user\") 可以不写是因为配置了全局配置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASSIGN_UUID</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">,</span>select<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> online<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> deleted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Version</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> version<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 添加乐观锁的拦截器</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MpConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">mpInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//1. 定义 Mp 拦截器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">MybatisPlusInterceptor</span> mpInterceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//2. 添加乐观锁拦截器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        mpInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimisticLockerInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> mpInterceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 执行更新操作</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jock666\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>你会发现，这次修改并没有更新 version 字段，原因是没有携带 version 数据。</p>\n<p>添加 version 数据</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jock666\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setVersion</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>你会发现，我们传递的是 1，MP 会将 1 进行加 1，然后，更新回到数据库表中。</p>\n<p>所以要想实现乐观锁，首先第一步应该是拿到表中的 version，然后拿 version 当条件在将 version 加 1 更新回到数据库表中，所以我们在查询的时候，需要对其进行查询</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//1. 先通过要修改的数据 id 将当前数据查询出来</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//2. 将要修改的属性逐一设置进去</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jock888\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>大概分析完乐观锁的实现步骤以后，我们来模拟一种加锁的情况，看看能不能实现多个人修改同一个数据的时候，只能有一个人修改成功。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus03DqlApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token comment\">//1. 先通过要修改的数据 id 将当前数据查询出来</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//version=3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">User</span> user2 <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//version=3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        user2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jock aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">//version=>4</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jock bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">//verion=3? 条件还成立吗？</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行程序，分析结果：</p>\n<p><img data-src=\"image-20240321195009664.png\" alt=\"\" /></p>\n<p>乐观锁就已经实现完成了，如果对于上面的这些步骤记不住咋办呢？</p>\n<p>参考官方文档乐观锁插件说明来实现: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMGQ5M2MwLyNvcHRpbWlzdGljbG9ja2VyaW5uZXJpbnRlcmNlcHRvcg==\">https://baomidou.com/pages/0d93c0/#optimisticlockerinnerinterceptor</span></p>\n<h1 id=\"快速开发\"><a class=\"anchor\" href=\"#快速开发\">#</a> 快速开发</h1>\n<p>mybatis-plus-generator 3.5.1 及其以上版本用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvNzc5YTZlLyMlRTUlQkYlQUIlRTklODAlOUYlRTUlODUlQTUlRTklOTclQTg=\">新版本生成器</span>，以下的用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvZDM1N2FmLyMlRTQlQkQlQkYlRTclOTQlQTglRTYlOTUlOTklRTclQTglOEI=\">老的</span></p>\n<h2 id=\"代码生成器原理分析\"><a class=\"anchor\" href=\"#代码生成器原理分析\">#</a> 代码生成器原理分析</h2>\n<p>常见的类都可以进行抽取，只要他们有公共部分即可。来看下模型类的模板：</p>\n<p><img data-src=\"image-20240321195513354.png\" alt=\"\" /></p>\n<ul>\n<li>① 可以根据数据库表的表名来填充</li>\n<li>② 可以根据用户的配置来生成 ID 生成策略</li>\n<li>③到⑨可以根据数据库表字段名称来填充</li>\n</ul>\n<p>通过观察之前写的代码，会发现其中有很多重复的内容，于是 MP 抽取了这些重复的地方，做成了一个模板供我们使用<br />\n要想完成代码自动生成，我们需要有以下内容:</p>\n<ul>\n<li>模板: MyBatisPlus 提供，可以自己提供，但是麻烦，不建议</li>\n<li>数据库相关配置：读取数据库获取表和字段信息</li>\n<li>开发者自定义配置：手工配置，比如 ID 生成策略</li>\n</ul>\n<h2 id=\"代码生成器实现\"><a class=\"anchor\" href=\"#代码生成器实现\">#</a> 代码生成器实现</h2>\n<blockquote>\n<p>步骤 1: 创建一个 Maven 项目</p>\n</blockquote>\n<blockquote>\n<p>步骤 2: 导入对应的 jar 包</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>title:pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.5.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatisplus_04_generator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">&lt;!--spring webmvc--></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">&lt;!--mybatisplus--></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">&lt;!--druid--></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">&lt;!--mysql--></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">&lt;!--test--></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">&lt;!--lombok--></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 代码生成器 --></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-generator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">&lt;!--velocity 模板引擎 --></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.velocity<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>velocity-engine-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 编写引导类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus04GeneratorApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mybatisplus04GeneratorApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 创建代码生成类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CodeGenerator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//1. 获取代码生成器的对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AutoGenerator</span> autoGenerator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutoGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 设置数据库相关配置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">DataSourceConfig</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        autoGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 设置全局配置  </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">GlobalConfig</span> globalConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        globalConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputDir</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.dir\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"/项目名/src/main/java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 设置代码生成位置  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        globalConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 设置生成完毕后是否打开生成代码所在的目录  </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        globalConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZY\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 设置作者  </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        globalConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setFileOverride</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 设置是否覆盖原始生成的文件  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        globalConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%sDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 设置数据层接口名，% s 为占位符，指代模块名称  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        globalConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setIdType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASSIGN_ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 设置 Id 生成策略  </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        autoGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">setGlobalConfig</span><span class=\"token punctuation\">(</span>globalConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 设置包名相关配置</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">PackageConfig</span> packageInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PackageConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        packageInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 设置生成的包名，与代码所在位置不冲突，二者叠加组成完整路径</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        packageInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setEntity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"domain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 设置实体类包名</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        packageInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setMapper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 设置数据层包名</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        autoGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">setPackageInfo</span><span class=\"token punctuation\">(</span>packageInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 策略设置</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">StrategyConfig</span> strategyConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StrategyConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        strategyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setInclude</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbl_user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置当前参与生成的表名，参数为可变参数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        strategyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setTablePrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbl_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置数据库表的前缀名称，模块名 = 数据库表名 - 前缀名  例如： User = tbl_user - tbl_</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        strategyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setRestControllerStyle</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 设置是否启用 Rest 风格</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        strategyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setVersionFieldName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置乐观锁字段名</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        strategyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setLogicDeleteFieldName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deleted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置逻辑删除字段名</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        strategyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setEntityLombokModel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置是否启用 lombok</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        autoGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">setStrategy</span><span class=\"token punctuation\">(</span>strategyConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">//2. 执行生成操作</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        autoGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于代码生成器中的代码内容，我们可以直接从官方文档中获取代码进行修改， <code>https://baomidou.com/pages/981406/</code></p>\n<blockquote>\n<p>步骤 5: 运行程序</p>\n</blockquote>\n<p>最终效果就是运行成功后，会在当前项目中生成很多代码，代码包含 <code>controller</code> , <code>service</code> ， <code>mapper</code>  和 <code>entity</code>  等，基于连接的数据库所包含的对象</p>\n<p>至此代码生成器就已经完成工作，我们能快速根据数据库表来创建对应的类，简化我们的代码开发。</p>\n<h2 id=\"mp中service的crud\"><a class=\"anchor\" href=\"#mp中service的crud\">#</a> MP 中 Service 的 CRUD</h2>\n<p>回顾我们之前业务层代码的编写，编写接口和对应的实现类:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接口和实现类有了以后，需要在接口和实现类中声明方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>MP 看到上面的代码以后就说这些方法也是比较固定和通用的，那我来帮你抽取下，所以 MP 提供了一个 Service 接口和实现类，分别是: <code>IService</code>  和 <code>ServiceImpl</code> , 后者是对前者的一个具体实现。</p>\n<p>以后我们自己写的 Service 就可以进行如下修改:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改以后的好处是，MP 已经帮我们把业务层的一些基础的增删改查都已经实现了，可以直接进行使用。</p>\n<p>编写测试类进行测试:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mybatisplus04GeneratorApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">IUserService</span> userService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testFindAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>更多详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvNDljYzgxLw==\">官方文档</span></p>\n",
            "tags": [
                "spring复习",
                "JAVA"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/19/spring%E5%A4%8D%E4%B9%A0/SpringBoot/",
            "url": "https://zyakmd.github.io/2024/03/19/spring%E5%A4%8D%E4%B9%A0/SpringBoot/",
            "title": "SpringBoot",
            "date_published": "2024-03-19T13:11:59.000Z",
            "content_html": "<div class=\"note info no-icon\">\n<p>学习目标：</p>\n<ul>\n<li>掌握基于 SpringBoot 框架的程序开发步骤</li>\n<li>熟练使用 SpringBoot 配置信息修改服务器配置</li>\n<li>基于 SpringBoot 的完成 SSM 整合项目开发</li>\n</ul>\n</div>\n<h1 id=\"springboot简介\"><a class=\"anchor\" href=\"#springboot简介\">#</a> SpringBoot 简介</h1>\n<p><code>SpringBoot</code>  是由  <code>Pivotal</code>  团队提供的全新框架，其设计目的是用来<mark>简化</mark>  <code>Spring</code>  应用的<mark>初始搭建</mark>以及<mark>开发过程</mark>。</p>\n<p>使用了  <code>Spring</code>  框架后已经简化了我们的开发。而  <code>SpringBoot</code>  又是对  <code>Spring</code>  开发进行简化的，可想而知  <code>SpringBoot</code>  使用的简单及广泛性。既然  <code>SpringBoot</code>  是用来简化  <code>Spring</code>  开发的，那我们就先回顾一下，以  <code>SpringMVC</code>  开发为例：</p>\n<ol>\n<li><strong>创建工程，并在  <code>pom.xml</code>  配置文件中配置所依赖的坐标</strong></li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>title:pom.xml fold</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.46<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>编写  <code>web3.0</code>  的配置类</strong><br />\n作为  <code>web</code>  程序， <code>web3.0</code>  的配置类不能缺少，而这个配置类还是比较麻烦的，代码如下</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">CharacterEncodingFilter</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>filter<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>编写  <code>SpringMVC</code>  的配置类</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.blog.controller\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t做到这只是将工程的架子搭起来。要想被外界访问，最起码还需要提供一个  <code>Controller</code>  类，在该类中提供一个方法。</p>\n<ol start=\"4\">\n<li><strong>编写  <code>Controller</code>  类</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从上面的  <code>SpringMVC</code>  程序开发可以看到，前三步都是在搭建环境，而且这三步基本都是固定的。 <code>SpringBoot</code>  就是对这三步进行简化了。接下来我们通过一个入门案例来体现  <code>SpingBoot</code>  简化  <code>Spring</code>  开发。</p>\n<h1 id=\"springboot入门案例\"><a class=\"anchor\" href=\"#springboot入门案例\">#</a> SpringBoot 入门案例</h1>\n<h2 id=\"开发步骤\"><a class=\"anchor\" href=\"#开发步骤\">#</a> 开发步骤</h2>\n<p><code>SpringBoot</code>  开发起来特别简单，分为如下几步：</p>\n<ul>\n<li>创建新模块，选择 Spring 初始化，并配置模块相关基础信息</li>\n<li>选择当前模块需要使用的技术集</li>\n<li>开发控制器类</li>\n<li>运行自动生成的 Application 类</li>\n</ul>\n<h3 id=\"创建新模块\"><a class=\"anchor\" href=\"#创建新模块\">#</a> 创建新模块</h3>\n<ul>\n<li>在 IDEA 下创建一个新模块，选择 Spring Initializr，用来创建 SpringBoot 工程<br />\n以前我们选择的是  <code>Maven</code>  ，今天选择  <code>Spring Initializr</code>  来快速构建  <code>SpringBoot</code>  工程。而在  <code>Module SDK</code>  这一项选择我们安装的  <code>JDK</code>  版本。</li>\n</ul>\n<ul>\n<li>对  <code>SpringBoot</code>  工程进行相关的设置<br />\n我们使用这种方式构建的  <code>SpringBoot</code>  工程其实也是  <code>Maven</code>  工程，而该方式只是一种快速构建的方式而已。\n<blockquote>\n<p>注意：打包方式这里需要设置为  <code>Jar</code> <br />\n<img data-src=\"image-20240319212935639.png\" alt=\"\" /></p>\n</blockquote>\n</li>\n<li>选中  <code>Web</code> ，然后勾选  <code>Spring Web</code> <br />\n 最后点击创建，就大功告成了，经过以上步骤后就创建了如下结构的模块，它会帮我们自动生成一个  <code>Application</code>  类，而该类一会再启动服务器时会用到<br />\n<img data-src=\"image-20240319213127267.png\" alt=\"\" /></li>\n</ul>\n<p><img data-src=\"image-20240319213526207.png\" alt=\"\" /></p>\n<p>跑的时候又遇到了 JDK 版本问题，但 xml 有改配置，应该是 <code>Spring Boot的版本和Java版本不兼容</code> 的问题，查了一下 <code>Spring Boot 3.0.4支持的最低Java 版本为JDK 17</code> ，应选择更低的版本即可<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxMzMwNzk4L2FydGljbGUvZGV0YWlscy8xMjk2ODYwNzM=\">参考</span></p>\n<div class=\"note info no-icon\">\n<p>注意：</p>\n<ol>\n<li>在创建好的工程中不需要创建配置类</li>\n<li>创建好的项目会自动生成其他的一些文件，而这些文件目前对我们来说没有任何作用，所以可以将这些文件删除。</li>\n<li>可以删除的目录和文件如下：\n<ul>\n<li><code>.mvn</code></li>\n<li><code>.gitignore</code></li>\n<li><code>HELP.md</code></li>\n<li><code>mvnw</code></li>\n<li><code>mvnw.cmd</code></li>\n</ul>\n</li>\n</ol>\n</div>\n<h3 id=\"创建-controller\"><a class=\"anchor\" href=\"#创建-controller\">#</a> 创建  <code>Controller</code></h3>\n<p>在   <code>com.zy.controller</code>  包下创建  <code>BookController</code>  ，代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id ==> \"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello , spring boot!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"启动服务器\"><a class=\"anchor\" href=\"#启动服务器\">#</a> 启动服务器</h3>\n<p>运行  <code>SpringBoot</code>  工程不需要使用本地的  <code>Tomcat</code>  和 插件，只运行项目  <code>com.zy</code>  包下的  <code>Application</code>  类，我们就可以在控制台看出如下信息<br />\n<img data-src=\"image-20240319220137783.png\" alt=\"\" /></p>\n<h3 id=\"进行测试\"><a class=\"anchor\" href=\"#进行测试\">#</a> 进行测试</h3>\n<p>依旧是使用 PostMan 来测试，发送 GET 请求访问 <code>localhost:8080/books/123</code> <br />\n 可以看到响应回来的结果 <code>hello,spring boot!</code> <br />\n 同时控制台也输出了 <code>get id ==&gt; 123</code> <br />\n<img data-src=\"image-20240319220215874.png\" alt=\"\" /><br />\n<img data-src=\"image-20240319220229353.png\" alt=\"\" /></p>\n<hr />\n<p>通过上面的入门案例我们可以看到使用  <code>SpringBoot</code>  进行开发，使整个开发变得很简单，那它是如何做到的呢？</p>\n<p>要研究这个问题，我们需要看看  <code>Application</code>  类和  <code>pom.xml</code>  都书写了什么。先看看  <code>Applicaion</code>  类，该类内容如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个类中的东西很简单，就在类上添加了一个  <code>@SpringBootApplication</code>  注解，而在主方法中就一行代码。我们在启动服务器时就是执行的该类中的主方法。</p>\n<p>再看看  <code>pom.xml</code>  配置文件中的内容</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>fold</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springboot01<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>springboot01<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>springboot01<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">&lt;!-- 指定了一个父工程，父工程中的东西在该工程中可以继承过来使用 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.5.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">&lt;!--JDK 的版本 --></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.reporting.outputEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.reporting.outputEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring-boot.version</span><span class=\"token punctuation\">></span></span>2.6.13<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring-boot.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t    <span class=\"token comment\">&lt;!-- 该依赖就是我们在创建 SpringBoot 工程勾选的那个 Spring Web 产生的 --></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">&lt;!-- 这个是单元测试的依赖，我们现在没有进行单元测试，所以这个依赖现在可以没有 --></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring-boot.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-compiler-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.8.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>target</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>target</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>encoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>encoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring-boot.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mainClass</span><span class=\"token punctuation\">></span></span>com.zy.Springboot01Application<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mainClass</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>skip</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>skip</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>repackage<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">></span></span>repackage<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 这个插件是在打包时需要的，而这里暂时还没有用到 --></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>我们代码之所以能简化，就是因为指定的父工程和  <code>Spring Web</code>  依赖实现的。具体的我们后面在聊。</p>\n<h2 id=\"对比\"><a class=\"anchor\" href=\"#对比\">#</a> 对比</h2>\n<p>做完  <code>SpringBoot</code>  的入门案例后，接下来对比一下  <code>Spring</code>  程序和  <code>SpringBoot</code>  程序</p>\n<table>\n<thead>\n<tr>\n<th>类 / 配置文件</th>\n<th>Spring</th>\n<th>SpringBoot</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pom 文件中的坐标</td>\n<td>手工添加</td>\n<td>勾选添加</td>\n</tr>\n<tr>\n<td>web3.e 配置类</td>\n<td>手工制作</td>\n<td>无</td>\n</tr>\n<tr>\n<td>Spring/SpringMVC 配置类</td>\n<td>手工制作</td>\n<td>无</td>\n</tr>\n<tr>\n<td>控制器</td>\n<td>手工制作</td>\n<td>手工制作</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p><strong>坐标</strong><br />\n <code>Spring</code>  程序中的坐标需要自己编写，而且坐标非常多<br />\n <code>SpringBoot</code>  程序中的坐标是我们在创建工程时进行勾选自动生成的</p>\n</li>\n<li>\n<p><strong>web3.0 配置类</strong><br />\n <code>Spring</code>  程序需要自己编写这个配置类。这个配置类大家之前编写过，肯定感觉很复杂<br />\n <code>SpringBoot</code>  程序不需要我们自己书写</p>\n</li>\n<li>\n<p><strong>配置类</strong><br />\n <code>Spring/SpringMVC</code>  程序的配置类需要自己书写。而  <code>SpringBoot</code>   程序则不需要书写。</p>\n</li>\n</ul>\n<blockquote>\n<p><mark>注意：基于 Idea 的  <code>Spring Initializr</code>  快速构建  <code>SpringBoot</code>  工程时需要联网。</mark></p>\n</blockquote>\n<h2 id=\"官网构建工程\"><a class=\"anchor\" href=\"#官网构建工程\">#</a> 官网构建工程</h2>\n<p>在入门案例中之所以能快速构建  <code>SpringBoot</code>  工程，是因为  <code>Idea</code>  使用了官网提供了快速构建  <code>SpringBoot</code>  工程的组件实现的。<br />\n首先进入 SpringBoot 官网 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWJvb3Q=\">https://spring.io/projects/spring-boot</span> ，拉到页面最下方，会有一个 <code>Quickstart your project</code> <br />\n 然后点击 <code>Spring Initializr</code>  超链接，就会跳转到如下页面，构建工程的步骤与我们在 IDEA 中几乎没什么区别<br />\n<img data-src=\"https://pic.imgdb.cn/item/6321cd9e16f2c2beb1fde5a3.jpg\" alt=\"\" /></p>\n<p>点击 <code>GENERATE</code> ，就可以生成工程并下载到本地了，打开下载好的压缩包，可以看到工程的内容与 IDEA 生成的一模一样。<br />\n通过上面官网的操作，我们知道  <code>Idea</code>  中快速构建  <code>SpringBoot</code>  工程其实就是使用的官网的快速构建组件，那以后即使没有  <code>Idea</code>  也可以使用官网的方式构建  <code>SpringBoot</code>  工程。</p>\n<h2 id=\"springboot工程快速启动\"><a class=\"anchor\" href=\"#springboot工程快速启动\">#</a> SpringBoot 工程快速启动</h2>\n<h3 id=\"问题导入\"><a class=\"anchor\" href=\"#问题导入\">#</a> 问题导入</h3>\n<p>以后我们和前端开发人员协同开发，而前端开发人员需要测试前端程序就需要后端开启服务器，这就受制于后端开发人员。为了摆脱这个受制，前端开发人员尝试着在自己电脑上安装  <code>Tomcat</code>  和  <code>Idea</code>  ，在自己电脑上启动后端程序，这显然不现实</p>\n<p>我们后端可以将  <code>SpringBoot</code>  工程打成  <code>jar</code>  包，该  <code>jar</code>  包运行不依赖于  <code>Tomcat</code>  和  <code>Idea</code>  这些工具也可以正常运行，只是这个  <code>jar</code>  包在运行过程中连接和我们自己程序相同的  <code>Mysql</code>  数据库即可。这样就可以解决这个问题</p>\n<h3 id=\"打包\"><a class=\"anchor\" href=\"#打包\">#</a> 打包</h3>\n<p>由于我们在构建  <code>SpringBoot</code>  工程时已经在  <code>pom.xml</code>  中配置了如下插件</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>所以我们只需要使用  <code>Maven</code>  的  <code>package</code>  指令打包就会在  <code>target</code>  目录下生成对应的  <code>Jar</code>  包。</p>\n<blockquote>\n<p>注意：该插件必须配置，不然打好的  <code>jar</code>  包也是有问题的</p>\n</blockquote>\n<h3 id=\"启动\"><a class=\"anchor\" href=\"#启动\">#</a> 启动</h3>\n<p>进入  <code>jar</code>  包所在位置 (/target)，在  <code>命令提示符</code>  中输入如下命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> <span class=\"token operator\">&lt;</span>artifactId<span class=\"token operator\">></span>-<span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span>.jar</pre></td></tr></table></figure><p>执行上述命令就可以看到  <code>SpringBoot</code>  运行的日志信息</p>\n<p>遇到 <code>springboot01-0.0.1-SNAPSHOT.jar中没有主清单属性</code> 的问题，因为之前 springboot 设置的默认源挂了魔法也没连上，换了阿里云的，阿里云配置中有以下配置，其中 <code>skip</code>  默认为 <code>true</code>  会导致虽然指定了 main 类但是打包的时候默认跳过了，改为 <code>false</code>  解决</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mainClass</span><span class=\"token punctuation\">></span></span>com.zy.Springboot01Application<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mainClass</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>skip</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>skip</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"image-20240320104542027.png\" alt=\"\" /><br />\n此时无论浏览器还是使用 PostMan 发送 GET 请求访问 <code>localhost:8080/books/123</code> ，也可以正常输出 <code>get id ==&gt; 123</code></p>\n<h1 id=\"springboot概述\"><a class=\"anchor\" href=\"#springboot概述\">#</a> SpringBoot 概述</h1>\n<p><code>SpringBoot</code>  是由 Pivotal 团队提供的全新框架，其设计目的是用来<mark>简化</mark> Spring 应用的<mark>初始搭建</mark>以及<mark>开发过程</mark>。</p>\n<p>大家已经感受了  <code>SpringBoot</code>  程序，回过头看看  <code>SpringBoot</code>  主要作用是什么，就是简化  <code>Spring</code>  的搭建过程和开发过程。</p>\n<p>原始  <code>Spring</code>  环境搭建和开发存在以下问题：</p>\n<ul>\n<li>配置繁琐</li>\n<li>依赖设置繁琐</li>\n</ul>\n<p><code>SpringBoot</code>  程序优点恰巧就是针对  <code>Spring</code>  的缺点</p>\n<ul>\n<li>自动配置。这个是用来解决  <code>Spring</code>  程序配置繁琐的问题</li>\n<li>起步依赖。这个是用来解决  <code>Spring</code>  程序依赖设置繁琐的问题</li>\n<li>辅助功能（内置服务器，...）。我们在启动  <code>SpringBoot</code>  程序时既没有使用本地的  <code>tomcat</code>  也没有使用  <code>tomcat</code>  插件，而是使用  <code>SpringBoot</code>  内置的服务器。</li>\n</ul>\n<p>接下来我们来说一下  <code>SpringBoot</code>  的起步依赖</p>\n<h2 id=\"起步依赖\"><a class=\"anchor\" href=\"#起步依赖\">#</a> 起步依赖</h2>\n<p>我们使用  <code>Spring Initializr</code>   方式创建的  <code>Maven</code>  工程的的  <code>pom.xml</code>  配置文件中自动生成了很多包含  <code>starter</code>  的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.7.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这些依赖就是<mark>启动依赖</mark>，接下来我们探究一下他是如何实现的。</p>\n<h3 id=\"探索父工程\"><a class=\"anchor\" href=\"#探索父工程\">#</a> 探索父工程</h3>\n<p>从上面的文件中可以看到指定了一个父工程 (阿里云的配置本身没有，自己加的，匹配下对应的版本)，我们进入到父工程，发现父工程中又指定了一个父工程，如下图所示</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.7.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>再进入到该父工程中，在该工程中我们可以看到配置内容结构如下图所示<br />\n<img data-src=\"image-20240320110819215.png\" alt=\"\" /></p>\n<p>上图中的  <code>properties</code>  标签中定义了各个技术软件依赖的版本，避免了我们在使用不同软件技术时考虑版本的兼容问题。在  <code>properties</code>  中我们找  <code>servlet</code>   和  <code>mysql</code>  的版本如下</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-api.version</span><span class=\"token punctuation\">></span></span>4.0.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-api.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mysql.version</span><span class=\"token punctuation\">></span></span>8.0.30<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mysql.version</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>dependencyManagement</code>  标签是进行依赖版本锁定，但是并没有导入对应的依赖；如果我们工程需要那个依赖只需要引入依赖的  <code>groupid</code>  和  <code>artifactId</code>  不需要定义  <code>version</code> 。</p>\n<p>而  <code>build</code>  标签中也对插件的版本进行了锁定，如下</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pluginManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.codehaus.mojo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>build-helper-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;build-helper-maven-plugin.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.flywaydb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>flyway-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;flyway.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>pl.project13.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>git-commit-id-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;git-commit-id-plugin.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.johnzon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>johnzon-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;johnzon.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>....</pre></td></tr></table></figure><p>看完了父工程中  <code>pom.xml</code>  的配置后不难理解我们工程的的依赖为什么都没有配置  <code>version</code> 。</p>\n<h3 id=\"探索依赖\"><a class=\"anchor\" href=\"#探索依赖\">#</a> 探索依赖</h3>\n<p>在我们创建的工程中的  <code>pom.xml</code>  中配置了如下依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>进入到该依赖，查看  <code>pom.xml</code>  的依赖会发现它引入了如下的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.6.13<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.23<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.23<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>里面的引入了  <code>spring-web</code>  和  <code>spring-webmvc</code>  的依赖，这就是为什么我们的工程中没有依赖这两个包还能正常使用  <code>springMVC</code>  中的注解的原因。</p>\n<p>而依赖  <code>spring-boot-starter-tomcat</code>  ，从名字基本能确认内部依赖了  <code>tomcat</code> ，所以我们的工程才能正常启动。</p>\n<p><mark>结论：以后需要使用技术，只需要引入该技术对应的起步依赖即可</mark></p>\n<h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<p><strong>starter</strong></p>\n<ul>\n<li><code>SpringBoot</code>  中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</li>\n<li></li>\n</ul>\n<p><strong>parent</strong></p>\n<ul>\n<li>所有  <code>SpringBoot</code>  项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</li>\n</ul>\n<p><strong>实际开发</strong></p>\n<ul>\n<li>\n<p>使用任意坐标时，仅书写 GAV 中的 G 和 A，V 由 SpringBoot 提供</p>\n<ul>\n<li>G：groupid</li>\n<li>A：artifactId</li>\n<li>V：version</li>\n</ul>\n</li>\n<li>\n<p>如发生坐标错误，再指定 version（要小心版本冲突）</p>\n</li>\n</ul>\n<h2 id=\"程序启动\"><a class=\"anchor\" href=\"#程序启动\">#</a> 程序启动</h2>\n<p>创建的每一个  <code>SpringBoot</code>  程序时都包含一个类似于下面的类，我们将这个类称作引导类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Springboot01Application</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Springboot01Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info no-icon\">\n<ul>\n<li><code>SpringBoot</code>  在创建项目时，采用 jar 的打包方式</li>\n<li><code>SpringBoot</code>  的引导类是项目的入口，运行  <code>main</code>  方法就可以启动项目<br />\n因为我们在  <code>pom.xml</code>  中配置了  <code>spring-boot-starter-web</code>  依赖，而该依赖通过前面的学习知道它依赖  <code>tomcat</code>  ，所以运行  <code>main</code>  方法就可以使用  <code>tomcat</code>  启动咱们的工程。</li>\n</ul>\n</div>\n<h2 id=\"切换web服务器\"><a class=\"anchor\" href=\"#切换web服务器\">#</a> 切换 web 服务器</h2>\n<p>现在我们启动工程使用的是  <code>tomcat</code>  服务器，那能不能不使用  <code>tomcat</code>  而使用  <code>jetty</code>  服务器， <code>jetty</code>  在我们  <code>maven</code>  高级时讲  <code>maven</code>  私服使用的服务器。而要切换  <code>web</code>  服务器就需要将默认的  <code>tomcat</code>  服务器给排除掉，怎么排除呢？使用  <code>exclusion</code>  标签</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>现在我们运行引导类可以吗？运行一下试试<br />\n程序直接停止了，为什么呢？那是因为排除了  <code>tomcat</code>  服务器，程序中就没有服务器了。所以此时不光要排除  <code>tomcat</code>  服务器，还要引入  <code>jetty</code>  服务器。在  <code>pom.xml</code>  中因为  <code>jetty</code>  的起步依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-jetty<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>接下来再次运行引导类，在日志信息中就可以看到使用的是  <code>jetty</code>  服务器</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2024</span>-03-20 <span class=\"token number\">11</span>:19:13.647  INFO <span class=\"token number\">2596</span> --- <span class=\"token punctuation\">[</span>           main<span class=\"token punctuation\">]</span> o.s.b.w.e.j.JettyServletWebServerFactory <span class=\"token builtin class-name\">:</span> Server initialized with port: <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2024</span>-03-20 <span class=\"token number\">11</span>:19:13.651  INFO <span class=\"token number\">2596</span> --- <span class=\"token punctuation\">[</span>           main<span class=\"token punctuation\">]</span> org.eclipse.jetty.server.Server          <span class=\"token builtin class-name\">:</span> jetty-9.4.49.v20220914<span class=\"token punctuation\">;</span> built: <span class=\"token number\">2022</span>-09-14T01:07:36.601Z<span class=\"token punctuation\">;</span> git: 4231a3b2e4cb8548a412a789936d640a97b1aa0a<span class=\"token punctuation\">;</span> jvm <span class=\"token number\">16.0</span>.2+7-67</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2024</span>-03-20 <span class=\"token number\">11</span>:19:13.670  INFO <span class=\"token number\">2596</span> --- <span class=\"token punctuation\">[</span>           main<span class=\"token punctuation\">]</span> o.e.j.s.h.ContextHandler.application     <span class=\"token builtin class-name\">:</span> Initializing Spring embedded WebApplicationContext</pre></td></tr></table></figure><p><strong>小结：</strong></p>\n<p>通过切换服务器，我们不难发现在使用  <code>SpringBoot</code>  换技术时只需要导入该技术的起步依赖即可</p>\n<h1 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h1>\n<h2 id=\"配置文件格式\"><a class=\"anchor\" href=\"#配置文件格式\">#</a> 配置文件格式</h2>\n<p>我们现在启动服务器默认的端口号是  <code>8080</code> ，访问路径可以书写为</p>\n<figure class=\"highlight url\"><figcaption data-lang=\"url\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token scheme\">http<span class=\"token scheme-delimiter\">:</span></span><span class=\"token authority\"><span class=\"token authority-delimiter\">//</span><span class=\"token host\">localhost</span><span class=\"token port-segment\"><span class=\"token port-delimiter\">:</span><span class=\"token port\">8080</span></span></span><span class=\"token path\"><span class=\"token path-separator\">/</span>books<span class=\"token path-separator\">/</span>1</span></pre></td></tr></table></figure><p>在线上环境我们还是希望将端口号改为  <code>80</code> ，这样在访问的时候就可以不写端口号了，如下</p>\n<pre><code>http://localhost/books/1\n</code></pre>\n<p>而  <code>SpringBoot</code>  程序如何修改呢？ <code>SpringBoot</code>  提供了多种属性配置方式</p>\n<ul>\n<li><code>application.properties</code><pre><code>server.port=80\n</code></pre>\n</li>\n<li><code>application.yml</code><figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">81</span></pre></td></tr></table></figure></li>\n<li><code>application.yaml</code><figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">82</span></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p><mark>注意： <code>SpringBoot</code>  程序的配置文件名必须是  <code>application</code>  ，只是后缀名不同而已。</mark></p>\n</blockquote>\n<h3 id=\"不同配置文件演示\"><a class=\"anchor\" href=\"#不同配置文件演示\">#</a> 不同配置文件演示</h3>\n<ul>\n<li><strong>application.properties 配置文件</strong></li>\n</ul>\n<p>现在需要进行配置，配合文件必须放在  <code>resources</code>  目录下，而该目录下有一个名为  <code>application.properties</code>  的配置文件，我们就可以在该配置文件中修改端口号，在该配置文件中书写  <code>port</code>  ， <code>Idea</code>  就会提示，修改 port 为 80：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 应用服务 WEB 访问端口  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">80</span></pre></td></tr></table></figure><p>启动服务，会在控制台打印出日志信息，从日志信息中可以看到绑定的端口号已经修改了</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>o.s.b.web.embedded.jetty.JettyWebServer  <span class=\"token builtin class-name\">:</span> Jetty started on port<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token number\">80</span> <span class=\"token punctuation\">(</span>http/1.1<span class=\"token punctuation\">)</span> with context path <span class=\"token string\">'/'</span></pre></td></tr></table></figure><p>并且通过 <code>http://localhost/books/123</code>  访问即可</p>\n<ul>\n<li><strong>application.yml 配置文件</strong></li>\n</ul>\n<p>删除  <code>application.properties</code>  配置文件中的内容。在  <code>resources</code>  下创建一个名为  <code>application.yml</code>  的配置文件，在该文件中书写端口号的配置项，格式如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">81</span></pre></td></tr></table></figure><blockquote>\n<p>注意： yml 在 <code>:</code>  后，数据前一定要加空格</p>\n</blockquote>\n<p>而在  <code>yml</code>  配置文件中也是有提示功能的，我们也可以在该文件中书写  <code>port</code>  ，然后  <code>idea</code>  就会提示并书写成上面的格式</p>\n<p>启动服务，可以在控制台看到绑定的端口号是  <code>81</code></p>\n<ul>\n<li><strong>application.yaml 配置文件</strong></li>\n</ul>\n<p>删除  <code>application.yml</code>  配置文件和  <code>application.properties</code>  配置文件内容，然后在  <code>resources</code>  下创建名为  <code>application.yaml</code>  的配置文件，<em>配置内容和后缀名为  <code>yml</code>  的配置文件中的内容相同，只是使用了不同的后缀名而已</em></p>\n<p><code>application.yaml</code>  配置文件内容如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">83</span></pre></td></tr></table></figure><p>启动服务，在控制台可以看到绑定的端口号</p>\n<h3 id=\"三种配合文件的优先级\"><a class=\"anchor\" href=\"#三种配合文件的优先级\">#</a> 三种配合文件的优先级</h3>\n<p>在三种配合文件中分别配置不同的端口号，启动服务查看绑定的端口号。用这种方式就可以看到哪个配置文件的优先级更高一些</p>\n<p><code>application.properties</code>  文件内容如下：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">80</span></pre></td></tr></table></figure><p><code>application.yml</code>  文件内容如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">81</span></pre></td></tr></table></figure><p><code>application.yaml</code>  文件内容如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">82</span></pre></td></tr></table></figure><p>启动服务，在控制台可以看到使用的端口号是  <code>80</code> 。说明  <code>application.properties</code>  的优先级最高</p>\n<p>注释掉  <code>application.properties</code>  配置文件内容。再次启动服务，在控制台可以看到使用的端口号是  <code>81</code> ，说明  <code>application.yml</code>  配置文件为第二优先级。</p>\n<p>从上述的验证结果可以确定三种配置文件的优先级是：</p>\n<p><mark> <code>application.properties</code>   &gt;   <code>application.yml</code>    &gt;   <code>application.yaml</code> </mark></p>\n<blockquote>\n<ul>\n<li>\n<p><code>SpringBoot</code>  核心配置文件名为  <code>application</code></p>\n</li>\n<li>\n<p><code>SpringBoot</code>  内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键 + 关键字修改属性<br />\n例如要设置日志的级别时，可以在配置文件中书写  <code>logging</code> ，就会提示出来。配置内容如下</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">level</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> info</pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<h2 id=\"yaml格式\"><a class=\"anchor\" href=\"#yaml格式\">#</a> yaml 格式</h2>\n<p>上面讲了三种不同类型的配置文件，而  <code>properties</code>  类型的配合文件之前我们学习过，接下来我们重点学习  <code>yaml</code>  类型的配置文件。</p>\n<p><strong>YAML（YAML Ain't Markup Language），一种数据序列化格式</strong> 这种格式的配置文件在近些年已经占有主导地位，那么这种配置文件和前期使用的配置文件是有一些优势的，我们先看之前使用的配置文件。</p>\n<p>最开始我们使用的是  <code>xml</code>  ，格式如下：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>enterprise</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>itcast<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>age</span><span class=\"token punctuation\">></span></span>16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>age</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tel</span><span class=\"token punctuation\">></span></span>4006184000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tel</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>enterprise</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>而  <code>properties</code>  类型的配置文件如下</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">enterprise.name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">itcast</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">enterprise.age</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">16</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">enterprise.tel</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">4006184000</span></pre></td></tr></table></figure><p><code>yaml</code>  类型的配置文件内容如下</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">enterprise</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> itcast</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token key atrule\">tel</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4006184000</span></pre></td></tr></table></figure><p><strong>优点：</strong></p>\n<ul>\n<li>容易阅读<br />\n <code>yaml</code>  类型的配置文件比  <code>xml</code>  类型的配置文件更容易阅读，结构更加清晰</li>\n<li>容易与脚本语言交互</li>\n<li>以数据为核心，重数据轻格式<br />\n <code>yaml</code>  更注重数据，而  <code>xml</code>  更注重格式</li>\n</ul>\n<p><strong>YAML 文件扩展名：</strong></p>\n<ul>\n<li><code>.yml</code>  (主流)</li>\n<li><code>.yaml</code></li>\n</ul>\n<p>上面两种后缀名都可以，以后使用更多的还是  <code>yml</code>  的。</p>\n<h3 id=\"语法规则\"><a class=\"anchor\" href=\"#语法规则\">#</a> 语法规则</h3>\n<ul>\n<li>大小写敏感</li>\n<li>属性层级关系使用多行描述，每行结尾使用冒号结束</li>\n<li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用 Tab 键）<br />\n空格的个数并不重要，只要保证同层级的左侧对齐即可。</li>\n<li>属性值前面添加空格（属性名与属性值之间使用冒号 + 空格作为分隔）</li>\n<li># 表示注释</li>\n</ul>\n<p><mark>核心规则：数据前面要加空格与冒号隔开</mark></p>\n<p>数组数据在数据书写位置的下方使用减号 - 作为数据开始符号，每行书写一个数据，减号与数据间空格分隔，例如</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">enterprise</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> itcast</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">tel</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4006184000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">subject</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">-</span> Java</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">-</span> 前端</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">-</span> 大数据</pre></td></tr></table></figure><h3 id=\"yaml配置文件数据读取\"><a class=\"anchor\" href=\"#yaml配置文件数据读取\">#</a> yaml 配置文件数据读取</h3>\n<h4 id=\"环境准备\"><a class=\"anchor\" href=\"#环境准备\">#</a> 环境准备</h4>\n<p>新创建一个 SpringBoot`</p>\n<p>在  <code>com.zy.controller</code>  包写创建名为  <code>BookController</code>  的控制器，内容如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id ==> \"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello , spring boot!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>com.zy.domain</code>  包下创建一个名为  <code>Enterprise</code>  的实体类等会用来封装数据，内容如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enterprise</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//setter and getter</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//toString</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>resources</code>  下创建一个名为  <code>application.yml</code>  的配置文件，里面配置了不同的数据，内容如下</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">lesson</span><span class=\"token punctuation\">:</span> SpringBoot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">enterprise</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> itcast</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">tel</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4006184000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">subject</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">-</span> Java</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">-</span> 前端</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">-</span> 大数据</pre></td></tr></table></figure><h4 id=\"读取配置数据\"><a class=\"anchor\" href=\"#读取配置数据\">#</a> 读取配置数据</h4>\n<h5 id=\"使用-value注解\"><a class=\"anchor\" href=\"#使用-value注解\">#</a> 使用 @Value 注解</h5>\n<p>使用  <code>@Value(&quot;表达式&quot;)</code>  注解可以从配合文件中读取数据，注解中用于读取属性名引用方式是： <code>$&#123;一级属性名.二级属性名……&#125;</code></p>\n<p>我们可以在  <code>BookController</code>  中使用  <code>@Value</code>   注解读取配合文件数据，如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;lesson&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lesson<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;enterprise.subject[0]&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> subject_00<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lesson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>subject_00<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello , spring boot!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"environment对象\"><a class=\"anchor\" href=\"#environment对象\">#</a> Environment 对象</h5>\n<p>上面方式读取到的数据特别零散， <code>SpringBoot</code>  还可以使用  <code>@Autowired</code>  注解注入  <code>Environment</code>  对象的方式读取数据。这种方式  <code>SpringBoot</code>  会将配置文件中所有的数据封装到  <code>Environment</code>  对象中，如果需要使用哪个数据只需要通过调用  <code>Environment</code>  对象的  <code>getProperty(String name)</code>  方法获取。具体代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Environment</span> env<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lesson\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enterprise.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enterprise.subject[0]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello , spring boot!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>这种方式，框架内容大量数据，而在开发中我们很少使用</p>\n</blockquote>\n<h5 id=\"自定义对象\"><a class=\"anchor\" href=\"#自定义对象\">#</a> 自定义对象</h5>\n<p><code>SpringBoot</code>  还提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：</p>\n<ul>\n<li>将实体类  <code>bean</code>  的创建交给  <code>Spring</code>  管理。<br />\n在类上添加  <code>@Component</code>  注解</li>\n<li>使用  <code>@ConfigurationProperties</code>  注解表示加载配置文件<br />\n在该注解中也可以使用  <code>prefix</code>  属性指定只加载指定前缀的数据</li>\n<li>在  <code>BookController</code>  中进行注入</li>\n</ul>\n<p><strong>具体代码如下：</strong></p>\n<p><code>Enterprise</code>  实体类内容如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"enterprise\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enterprise</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getTel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tel <span class=\"token operator\">=</span> tel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> subject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Enterprise&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token string\">\", tel='\"</span> <span class=\"token operator\">+</span> tel <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token string\">\", subject=\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>BookController</code>  内容如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Enterprise</span> enterprise<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>enterprise<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>enterprise<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>enterprise<span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>enterprise<span class=\"token punctuation\">.</span><span class=\"token function\">getTel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>enterprise<span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello , spring boot!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用第三种方式，在实体类上有 <code>Spring Boot Configuration Annotation Processor not configured</code>  警告提示，在  <code>pom.xml</code>  中添加如下依赖即可</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-configuration-processor<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"多环境配置\"><a class=\"anchor\" href=\"#多环境配置\">#</a> 多环境配置</h3>\n<p>以后在工作中，对于开发环境、测试环境、生产环境的配置肯定都不相同，比如我们开发阶段会在自己的电脑上安装  <code>mysql</code>  ，连接自己电脑上的  <code>mysql</code>  即可，但是项目开发完毕后要上线就需要该配置，将环境的配置改为线上环境的。<br />\n<img data-src=\"image-20240320114444584.png\" alt=\"\" /></p>\n<p>来回的修改配置会很麻烦，而  <code>SpringBoot</code>  给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。不同类型的配置文件多环境开发的配置都不相同，接下来对不同类型的配置文件进行说明</p>\n<h4 id=\"yaml文件\"><a class=\"anchor\" href=\"#yaml文件\">#</a> yaml 文件</h4>\n<p>在  <code>application.yml</code>  中使用  <code>---</code>  来分割不同的配置，内容如下</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#开发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> dev <span class=\"token comment\">#给开发环境起的名字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#生产</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> pro <span class=\"token comment\">#给生产环境起的名字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">81</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#测试</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> test <span class=\"token comment\">#给测试环境起的名字</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">82</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><p>上面配置中  <code>spring.profiles</code>  是用来给不同的配置起名字的。而如何告知  <code>SpringBoot</code>  使用哪段配置呢？可以使用如下配置来启用都一段配置</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#设置启用的环境</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> dev  <span class=\"token comment\">#表示使用的是开发环境的配置</span></pre></td></tr></table></figure><p>综上所述， <code>application.yml</code>  配置文件内容如下</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#设置启用的环境</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> dev</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#开发</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> dev</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#生产</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> pro</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">81</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#测试</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> test</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">82</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><div class=\"note warning no-icon\">\n<p>在上面配置中给不同配置起名字的  <code>spring.profiles</code>  配置项已经过时。最新用来起名字的配置项是</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#开发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">activate</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">on-profile</span><span class=\"token punctuation\">:</span> dev</pre></td></tr></table></figure></div>\n<h4 id=\"properties文件\"><a class=\"anchor\" href=\"#properties文件\">#</a> properties 文件</h4>\n<p><code>properties</code>  类型的配置文件配置多环境需要定义不同的配置文件</p>\n<ul>\n<li><code>application-dev.properties</code>  是开发环境的配置文件。我们在该文件中配置端口号为  <code>80</code></li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">80</span></pre></td></tr></table></figure><ul>\n<li><code>application-test.properties</code>  是测试环境的配置文件。我们在该文件中配置端口号为  <code>81</code></li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">81</span></pre></td></tr></table></figure><ul>\n<li><code>application-pro.properties</code>  是生产环境的配置文件。我们在该文件中配置端口号为  <code>82</code></li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">82</span></pre></td></tr></table></figure><p><code>SpringBoot</code>  只会默认加载名为  <code>application.properties</code>  的配置文件，所以需要在  <code>application.properties</code>  配置文件中设置启用哪个配置文件，配置如下:</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">spring.profiles.active</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">pro</span></pre></td></tr></table></figure><h4 id=\"命令行启动参数设置\"><a class=\"anchor\" href=\"#命令行启动参数设置\">#</a> 命令行启动参数设置</h4>\n<p>使用  <code>SpringBoot</code>  开发的程序以后都是打成  <code>jar</code>  包，通过  <code>java -jar xxx.jar</code>  的方式启动服务的。那么就存在一个问题，如何切换环境呢？因为配置文件打到的 jar 包中了。</p>\n<p>我们知道  <code>jar</code>  包其实就是一个压缩包，可以解压缩，然后修改配置，最后再打成 jar 包就可以了。这种方式显然有点麻烦，而  <code>SpringBoot</code>  提供了在运行  <code>jar</code>  时设置开启指定的环境的方式，如下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> –jar xxx.jar –-spring.profiles.active<span class=\"token operator\">=</span>test</pre></td></tr></table></figure><p>那么这种方式能不能临时修改端口号呢？也是可以的，可以通过如下方式</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> –jar xxx.jar –-server.port<span class=\"token operator\">=</span><span class=\"token number\">88</span></pre></td></tr></table></figure><p>当然也可以同时设置多个配置，比如即指定启用哪个环境配置，又临时指定端口，如下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> –jar springboot.jar –-server.port<span class=\"token operator\">=</span><span class=\"token number\">88</span> –-spring.profiles.active<span class=\"token operator\">=</span>test</pre></td></tr></table></figure><p>命令行设置的端口号优先级高（也就是使用的是命令行设置的端口号），配置的优先级其实  <code>SpringBoot</code>  官网已经进行了说明，参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvc3ByaW5nLWJvb3QtZmVhdHVyZXMuaHRtbCNib290LWZlYXR1cmVzLWV4dGVybmFsLWNvbmZpZw==\">官方说明</span></p>\n<p>如果使用了多种方式配合同一个配置项，优先级高的生效。</p>\n<h3 id=\"配置文件分类\"><a class=\"anchor\" href=\"#配置文件分类\">#</a> 配置文件分类</h3>\n<p>有这样的场景，我们开发完毕后需要测试人员进行测试，由于测试环境和开发环境的很多配置都不相同，所以测试人员在运行我们的工程时需要临时修改很多配置，如下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> –jar springboot.jar –-spring.profiles.active<span class=\"token operator\">=</span>test <span class=\"token parameter variable\">--server.port</span><span class=\"token operator\">=</span><span class=\"token number\">85</span> --server.servlet.context-path<span class=\"token operator\">=</span>/zy --server.tomcat.connection-timeout<span class=\"token operator\">=</span>-1 …… …… …… …… ……</pre></td></tr></table></figure><p>针对这种情况， <code>SpringBoot</code>  定义了配置文件不同的放置的位置；而放在不同位置的优先级时不同的。</p>\n<p><code>SpringBoot</code>  中 4 级配置文件放置位置：</p>\n<ul>\n<li>1 级：classpath：application.yml</li>\n<li>2 级：classpath：config/application.yml</li>\n<li>3 级：file ：application.yml</li>\n<li>4 级：file ：config/application.yml</li>\n</ul>\n<blockquote>\n<p>级别越高优先级越高</p>\n</blockquote>\n<h4 id=\"分级验证\"><a class=\"anchor\" href=\"#分级验证\">#</a> 分级验证</h4>\n<ul>\n<li>验证 1 级和 2 级的优先级<br />\n 1 级就是 resource 目录下的 <code>application.yml</code> ，2 级是在 resource 目录下新建一个 config 文件，在其中新建 <code>application.yml</code> <br />\n 分别设置为</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> 80/81</pre></td></tr></table></figure><p>运行启动引导类，可以在控制台看到 <code>Tomcat initialized with port(s): 81 (http)</code></p>\n<p>通过这个结果可以得出<mark>类路径下的  <code>config</code>  下的配置文件优先于类路径下的配置文件。</mark></p>\n<ul>\n<li>验证 2 级和 4 级的优先级<br />\n先将工程打成一个 jar 包，进入到 jar 包的目录下，创建 <code>application.yml</code>  配置文件，而在该配合文件中将端口号设置为  <code>82</code> <br />\n 在  <code>jar</code>  包所在位置创建  <code>config</code>  文件夹，在该文件夹下创建  <code>application.yml</code>  配置文件，而在该配合文件中将端口号设置为  <code>83</code>\n<ul>\n<li>在  <code>jar</code>  包所在位置创建  <code>config</code>  文件夹，在该文件夹下创建  <code>application.yml</code>  配置文件，而在该配合文件中将端口号设置为  <code>82</code></li>\n<li>在命令行使用以下命令运行程序</li>\n</ul>\n</li>\n</ul>\n<p>运行后日志信息 <code>Tomcat initialized with port(s): 83 (http)</code> ，通过这个结果可以得出 file： config 下的配置文件优先于类路径下的配置文件。</p>\n<blockquote>\n<p>SpringBoot 2.5.0 版本存在一个 bug，我们在使用这个版本时，需要在  <code>jar</code>  所在位置的  <code>config</code>  目录下创建一个任意名称的文件夹</p>\n</blockquote>\n<h1 id=\"springboot整合junit\"><a class=\"anchor\" href=\"#springboot整合junit\">#</a> SpringBoot 整合 junit</h1>\n<p>回顾  <code>Spring</code>  整合  <code>junit</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        bookService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用  <code>@RunWith</code>  注解指定运行器，使用  <code>@ContextConfiguration</code>  注解来指定配置类或者配置文件。而  <code>SpringBoot</code>  整合  <code>junit</code>  特别简单，分为以下三步完成</p>\n<ul>\n<li>在测试类上添加  <code>SpringBootTest</code>  注解</li>\n<li>使用  <code>@Autowired</code>  注入要测试的资源</li>\n<li>定义测试方法进行测试</li>\n</ul>\n<h2 id=\"环境准备-2\"><a class=\"anchor\" href=\"#环境准备-2\">#</a> 环境准备</h2>\n<ul>\n<li>创建一个新的  <code>SpringBoot</code>  工程</li>\n</ul>\n<p>在  <code>com.zy.service</code>  包下创建  <code>BookService</code>  接口，内容如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>com.zy.service.impl</code>  包写创建一个  <code>BookServiceImpl</code>  类，使其实现  <code>BookService</code>  接口，内容如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service is running ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"编写测试类\"><a class=\"anchor\" href=\"#编写测试类\">#</a> 编写测试类</h2>\n<p>在  <code>test/java</code>  下创建  <code>com.zy</code>  包，在该包下创建测试类，将  <code>BookService</code>  注入到该测试类中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Springboot07TestApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        bookService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行 save，控制台输出 <code>book service is running …</code></p>\n<blockquote>\n<p>注意：这里的引导类所在包必须是测试类所在包及其子包。</p>\n<p>例如：</p>\n<ul>\n<li>引导类所在包是  <code>com.zy</code></li>\n<li>测试类所在包是  <code>com.zy</code></li>\n</ul>\n<p>如果不满足这个要求的话，就需要在使用  <code>@SpringBootTest</code>  注解时，使用  <code>classes</code>  属性指定引导类的字节码对象。如  <code>@SpringBootTest(classes = xxApplication.class)</code></p>\n</blockquote>\n<h1 id=\"springboot整合mybatis\"><a class=\"anchor\" href=\"#springboot整合mybatis\">#</a> SpringBoot 整合 mybatis</h1>\n<h2 id=\"回顾spring整合mybatis\"><a class=\"anchor\" href=\"#回顾spring整合mybatis\">#</a> 回顾 Spring 整合 Mybatis</h2>\n<p><code>Spring</code>  整合  <code>Mybatis</code>  需要定义很多配置类</p>\n<ul>\n<li><code>SpringConfig</code>  配置类\n<ul>\n<li><code>@Import</code>  导入  <code>JdbcConfig</code>  和 <code>MybatisConfig</code>  配置类</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.zy\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc.properties\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">JdbcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyBatisConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>JdbcConfig</code>  配置类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.driver&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driver<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.url&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.username&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.password&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>MybatisConfig</code>  配置类\n<ul>\n<li>定义  <code>SqlSessionFactoryBean</code></li>\n<li>定义映射配置</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisConfig</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义 bean，SqlSessionFactoryBean，用于产生 SqlSessionFactory 对象  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactoryBean</span> <span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactoryBean</span> sqlSessionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 设置模型类的别名扫描  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setTypeAliasesPackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.zy.domain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 设置数据源  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> sqlSessionFactory<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 定义 bean，返回 MapperScannerConfigurer 对象  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MapperScannerConfigurer</span> <span class=\"token function\">mapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">MapperScannerConfigurer</span> msc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        msc<span class=\"token punctuation\">.</span><span class=\"token function\">setBasePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.zy.dao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> msc<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"使用springboot\"><a class=\"anchor\" href=\"#使用springboot\">#</a> 使用 SpringBoot</h2>\n<ul>\n<li>创建一个新的模块 module<br />\n 注意选择技术集的时候，要勾选 <code>MyBatis Framework</code>  和 <code>MySQL Driver</code> （MyBatis、MySQL）</li>\n<li>在  <code>com.zy.domain</code>  包下定义实体类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>fold</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> type<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> description<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> description<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Book&#123;\"</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token string\">\"id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token string\">\", type='\"</span> <span class=\"token operator\">+</span> type <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token string\">\", description='\"</span> <span class=\"token operator\">+</span> description <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>在  <code>com.zy.dao</code>  包下定义  <code>BookDao</code>  接口</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_book where id = #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>定义测试类<br />\n在  <code>test/java</code>  下定义包  <code>com.zy</code>  ，在该包下测试类，内容如下</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Springboot08MybatisApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">testGetById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"编写配置\"><a class=\"anchor\" href=\"#编写配置\">#</a> 编写配置</h3>\n<p>代码中还没有指定连接哪儿个数据库，用户名是什么，密码是什么。所以这部分需要在  <code>SpringBoot</code>  的配置文件中进行配合。</p>\n<p>在  <code>application.yml</code>  配置文件中配置如下内容，password 根据自己的数据库密码来</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.jdbc.Driver</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr></table></figure><h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>运行测试方法，我们会看到如下错误信息， <code>No qualifying bean of type 'com.blog.dao.BookDao'</code> ，没有类型为 “com.blog.dao.BookDao” 的限定 bean</p>\n<p>原因是  <code>Mybatis</code>  会扫描接口并创建接口的代码对象交给  <code>Spring</code>  管理，但是 <code>MyBatisConfig</code>  中并没有告诉  <code>Mybatis</code>  哪个是  <code>dao</code>  接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">MapperScannerConfigurer</span> <span class=\"token function\">mapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">MapperScannerConfigurer</span> msc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tmsc<span class=\"token punctuation\">.</span><span class=\"token function\">setBasePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.zy.dao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> msc<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而我们要解决这个问题需要在 <code>BookDao</code>  接口上使用  <code>@Mapper</code>  ， <code>BookDao</code>  接口改进为</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_book where id = #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>SpringBoot</code>  版本低于 2.4.3 (不含)，Mysql 驱动版本大于 8.0 时，需要在 url 连接串中配置时区  <code>jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</code> ，或在 MySQL 数据库端配置时区解决此问题</p>\n</blockquote>\n<h3 id=\"使用druid数据源\"><a class=\"anchor\" href=\"#使用druid数据源\">#</a> 使用 Druid 数据源</h3>\n<p>现在我们并没有指定数据源， <code>SpringBoot</code>  有默认的数据源，我们也可以指定使用  <code>Druid</code>  数据源，按照以下步骤实现</p>\n<ul>\n<li>\n<p>导入  <code>Druid</code>  依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在  <code>application.yml</code>  配置文件配置<br />\n可以通过  <code>spring.datasource.type</code>  来配置使用什么数据源。配置文件内容可以改进为</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db<span class=\"token punctuation\">?</span>serverTimezone=UTC</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource</pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"整合案例\"><a class=\"anchor\" href=\"#整合案例\">#</a> 整合案例</h1>\n<p><code>SpringBoot</code>  到这就已经学习完毕，接下来我们将学习  <code>SSM</code>  时做的三大框架整合的案例用  <code>SpringBoot</code>  来实现一下。我们完成这个案例基本是将之前做的拷贝过来，修改成  <code>SpringBoot</code>  的即可</p>\n<h2 id=\"创建工程\"><a class=\"anchor\" href=\"#创建工程\">#</a> 创建工程</h2>\n<p>创建  <code>SpringBoot</code>  工程，在创建工程时需要勾选  <code>web</code> 、 <code>mysql</code> 、 <code>mybatis</code> <br />\n 由于我们工程中使用到了  <code>Druid</code>  ，所以需要导入  <code>Druid</code>  的坐标</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"代码拷贝\"><a class=\"anchor\" href=\"#代码拷贝\">#</a> 代码拷贝</h2>\n<p>将  <code>springmvc_11_page</code>  工程中的  <code>java</code>  代码及测试代码连同包拷贝到当前工程</p>\n<p>需要修改的内容如下：</p>\n<ul>\n<li><code>Springmvc_11_page</code>  中  <code>config</code>  包下的是配置类，而  <code>SpringBoot</code>  工程不需要这些配置类，所以这些可以直接删除</li>\n<li><code>dao</code>  包下的接口上在拷贝到当前工程中需要在接口中添加  <code>@Mapper</code>  注解</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into tbl_book values (null, #&#123;type&#125;, #&#123;name&#125;, #&#123;description&#125;)\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update tbl_book set type=#&#123;type&#125;, `name`=#&#123;name&#125;, `description`=#&#123;description&#125; where id=#&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from tbl_book where id=#&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_book where id=#&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_book\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>BookServiceTest</code>  测试需要改成  <code>SpringBoot</code>  整合  <code>junit</code>  的</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceTest</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book <span class=\"token operator\">:</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"配置文件-2\"><a class=\"anchor\" href=\"#配置文件-2\">#</a> 配置文件</h2>\n<p>在  <code>application.yml</code>  配置文件中需要配置如下内容</p>\n<ul>\n<li>服务的端口号 80</li>\n<li>连接数据库的信息 (jdbc 四要素：driver、url、username、password)</li>\n<li>数据源</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db <span class=\"token comment\">#?servierTimezone=UTC</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource</pre></td></tr></table></figure><h2 id=\"静态资源\"><a class=\"anchor\" href=\"#静态资源\">#</a> 静态资源</h2>\n<p>在  <code>SpringBoot</code>  程序中是没有  <code>webapp</code>  目录的，那么在  <code>SpringBoot</code>  程序中静态资源需要放在什么位置呢？<br />\n静态资源需要放在  <code>resources</code>  下的  <code>static</code>  下，多配置一个初始页面自动跳转</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">location</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\"/pages/books.html\"</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>至此，将之前的 ssm 整合，改为 springboot 的工作，就完成了</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<h2 id=\"流程分析\"><a class=\"anchor\" href=\"#流程分析\">#</a> 流程分析</h2>\n<ol>\n<li>创建工程\n<ul>\n<li>创建一个 SpringBoot 工程</li>\n<li>需要勾选 <code>Spring Web</code> ， <code>MyBatis Framework</code>  和 <code>MySQL Driver</code></li>\n</ul>\n</li>\n<li>SpringBoot 整合\n<ul>\n<li>整合 MyBatis\n<ul>\n<li>添加 Druid 数据源依赖</li>\n<li>编写数据库配置文件在 <code>application.yml</code>  中，配置数据库连接四要素</li>\n<li>对于 Dao 层的包扫描，使用 <code>@Mapper</code>  注解</li>\n</ul>\n</li>\n<li>整合 Junit\n<ul>\n<li>使用 <code>@SpringBootTest</code>  注解</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>功能模块\n<ul>\n<li>创建数据库和表</li>\n<li>在 <code>domain</code>  包根据数据表来创建对应的 pojo 模型类</li>\n<li>在 <code>Dao</code>  层 / 包完成数据库的增删改</li>\n<li>在 <code>Service</code>  层 / 包（Service 接口 + 实现类）</li>\n<li>编写 <code>Controller</code>  层 / 包\n<ul>\n<li>接收请求  <code>@RequestMapping</code> 、 <code>@GetMapping</code> 、 <code>@PostMapping</code> 、 <code>@PutMapping</code> 、 <code>@DeleteMapping</code>  配合 <code>@PathVariable</code>  将方法参数名称和 url 中变量名绑定，同名 () 内可省略，别忘了 <code>@RestController</code> （是  <code>@Controller</code>  和  <code>@ResponseBody</code>  两个注解的结合体。）才会处理请求</li>\n<li>接收数据 简单类型、POJO 类型、嵌套 POJO 类型、数组类型、JSON 数据类型\n<ul>\n<li><code>@RequestParam</code></li>\n<li><code>@PathVariable</code></li>\n<li><code>@RequestBody</code></li>\n</ul>\n</li>\n<li>转发业务层\n<ul>\n<li>使用 <code>@Autowired</code>  自动装配</li>\n</ul>\n</li>\n<li>响应结果\n<ul>\n<li><code>@ResponseBody</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h2>\n<p>过一遍，页面和内容依然用之前的 booklist</p>\n<h3 id=\"创建springboot项目和结构目录\"><a class=\"anchor\" href=\"#创建springboot项目和结构目录\">#</a> 创建 springboot 项目和结构目录</h3>\n<p>idea 的 <code>Spring Initializr</code>  创建，勾选 <code>Spring Web</code> ， <code>MyBatis Framework</code>  和 <code>MySQL Driver</code> <br />\n 创建对应结构包</p>\n<ul>\n<li><code>com.zy.controller</code>  编写 Controller 类</li>\n<li><code>com.zy.dao</code>  存放的是 Dao 层的接口，注意要使用 <code>@Mapper</code>  注解</li>\n<li><code>com.zy.service</code>  存放的是 Service 层接口，</li>\n<li><code>com.zy.service.impl</code>  存放的是 Service 的实现类</li>\n<li><code>com.zy.domain</code>  存放的是 pojo 类</li>\n<li><code>resources/static</code>  存放静态资源 HTML，CSS，JS 等</li>\n<li><code>test/java</code>  存放测试类</li>\n</ul>\n<h3 id=\"编写配置-2\"><a class=\"anchor\" href=\"#编写配置-2\">#</a> 编写配置</h3>\n<p>导入 Druid 的坐标，springboot 有自带的数据源，要加的话要带上 &lt;version&gt;，不然会去自带的找，但并没有，就会报错</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>替换原本的 properties，yaml 更好看和写，配置文件中编写数据库连接四要素。jdbc 链接有问题的话可能是要加 <code>?serverTimezone=UTC</code></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/springboot_work</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr></table></figure><h3 id=\"数据准备\"><a class=\"anchor\" href=\"#数据准备\">#</a> 数据准备</h3>\n<p>别忘了开启 mysql 服务，还是推荐 DG 进行可视化，敲 sql 也方便</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> springboot_work <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">use</span> springboot_work<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tbl_book  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    id          <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">type</span>        <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span>      <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    description <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tbl_book<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>type<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>description<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Spring实战 第五版'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Spring入门经典教程，深入理解Spring原理技术内幕'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Spring 5核心原理与30个类手写实践'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'十年沉淀之作，手写Spring精华思想'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Spring 5设计模式'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'深入Spring源码刨析Spring源码中蕴含的10大设计模式'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Spring MVC+Mybatis开发从入门到项目实战'</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">'全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'轻量级Java Web企业应用实战'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'源码级刨析Spring框架，适合已掌握Java基础的读者'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Java核心技术 卷Ⅰ 基础知识(原书第11版)'</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string\">'Core Java第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'深入理解Java虚拟机'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5个纬度全面刨析JVM,大厂面试知识点全覆盖'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Java编程思想(第4版)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Java学习必读经典，殿堂级著作！赢得了全球程序员的广泛赞誉'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'零基础学Java(全彩版)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'市场营销'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'直播就这么做:主播高效沟通实战指南'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李子柒、李佳奇、薇娅成长为网红的秘密都在书中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'市场营销'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'直播销讲实战一本通'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'和秋叶一起学系列网络营销书籍'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'市场营销'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'直播带货:淘宝、天猫直播从新手到高手'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image-20240320164520367.png\" alt=\"\" /></p>\n<h3 id=\"实现数据类\"><a class=\"anchor\" href=\"#实现数据类\">#</a> 实现数据类</h3>\n<p>写好四个数据表的属性后，tost idea 自动补齐 toString 重写方法，Alt＋Insert 可以生成构造器 / Getter/Setter 等</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:Book fold</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>domain</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> type<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> description<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> description<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Book&#123;\"</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token string\">\"id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token string\">\", type='\"</span> <span class=\"token operator\">+</span> type <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token string\">\", description='\"</span> <span class=\"token operator\">+</span> description <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"实现dao层\"><a class=\"anchor\" href=\"#实现dao层\">#</a> 实现 Dao 层</h3>\n<p>Dao 是数据访问层，Dao 的作用是封装对数据库的访问：增删改查，不涉及业务逻辑，只是达到按某个条件获得指定数据的要求。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_book where id=#&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from tbl_book where id=#&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_book\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"实现service层\"><a class=\"anchor\" href=\"#实现service层\">#</a> 实现 service 层</h3>\n<p>业务逻辑层。顾名思义，它处理逻辑上的业务，而不去考虑具体的实现。要提供不同的数据库的服务时，我们只需要面对接口用不同的类实现即可，而不用重复地定义类。<br />\n因为在 java 中接口是多继承的，而类是单继承的，如果你需要一个类实现多个 service，你用接口可以实现，用类定义 service 就没那么灵活。</p>\n<div class=\"tab\" data-id=\"ss\" data-title=\"BookService\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BookService</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"ss\" data-title=\"BookServiceImpl\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:BookServiceImpl fold</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>impl</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BookDao</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BookService</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> cnt <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> cnt<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<h3 id=\"实现controller层\"><a class=\"anchor\" href=\"#实现controller层\">#</a> 实现 controller 层</h3>\n<p>从 HTTP 请求中获取信息，提取参数，并将其分发给不同的处理服务（service 层），并向前端返回 service 层处理后的数据（JSON 数据或者 ModelAndView 对象）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:BookController </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BookService</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Integer</span> code <span class=\"token operator\">=</span> book <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_OK</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_ERR</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> book <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"数据查询失败，请重试！\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span>book<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> bookList <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Integer</span> code <span class=\"token operator\">=</span> bookList <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_OK</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_ERR</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> bookList <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"数据查询失败，请重试！\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span>bookList<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SAVE_OK</span><span class=\"token operator\">:</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SAVE_ERR</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATE_OK</span><span class=\"token operator\">:</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATE_ERR</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE_OK</span><span class=\"token operator\">:</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE_ERR</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>还又对结果的封装，让业务规范，这块实际开发根据具体需求撰写</p>\n<div class=\"tab\" data-id=\"c1\" data-title=\"Code\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:Code</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SAVE_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20011</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">DELETE_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20021</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">UPDATE_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20031</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">GET_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20041</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SAVE_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20010</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">DELETE_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20020</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">UPDATE_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20030</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">GET_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20040</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SYSTEM_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">50001</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SYSTEM_TIMEOUT_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">50002</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SYSTEM_UNKNOW_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">59999</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">BUSINESS_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">60002</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"c1\" data-title=\"Result\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:Result</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> msg<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<h3 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h3>\n<ul>\n<li>将异常进行分类<br />\n在 com.zy.exception 包下新建异常类</li>\n</ul>\n<div class=\"tab\" data-id=\"yc\" data-title=\"ProjectExceptionAdvice\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:ProjectExceptionAdvice</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>exception</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Code</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BusinessException</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SystemException</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Result</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExceptionHandler</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestControllerAdvice</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectExceptionAdvice</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 处理系统异常</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SystemException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">doSystemException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SystemException</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 记录日志  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 发送消息给运维  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 发送邮件给开发人员，ex 对象发送给开发人员  </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 处理业务一场</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">doBusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessException</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 处理未知异常</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">doOtherException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 记录日志  </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 发送消息给运维  </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 发送邮件给开发人员，ex 对象发送给开发人员  </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SYSTEM_UNKNOW_ERR</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"系统繁忙，请稍后再试！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"yc\" data-title=\"BusinessException\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:BusinessException</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>exception</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BusinessException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"yc\" data-title=\"SystemException\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>title:SystemException</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zy<span class=\"token punctuation\">.</span>exception</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SystemException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SystemException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SystemException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<p>使用，在 controller 层需要的业务位置 <code>throw new xxException()</code></p>\n<h3 id=\"测试-2\"><a class=\"anchor\" href=\"#测试-2\">#</a> 测试</h3>\n<p>增删改查都 ok<br />\n<img data-src=\"image-20240320180040144.png\" alt=\"\" /><br />\n 数据库的也更改了<br />\n<img data-src=\"image-20240320180115799.png\" alt=\"\" /></p>\n<p>至此 sprintboot 大体流程初步掌握</p>\n<h2 id=\"业务逻辑\"><a class=\"anchor\" href=\"#业务逻辑\">#</a> 业务逻辑</h2>\n<ol>\n<li>接收页面发送的 ajax 请求\n<ol>\n<li>类注释，拦截什么路径下的请求 <code>@RestController</code>  、 <code>@RequestMapping(&quot;/&quot;)</code></li>\n<li>方法注释，上面的路径之后的路径 <code>@PostMapping(&quot;/login&quot;)</code></li>\n</ol>\n</li>\n<li>方法的形参（ <code>HttpServletRequest request, @RequestBody Employee employee</code> ）\n<ol>\n<li>接收 request，并且表明接收的数据格式，@RequestBody 会自动按名称匹配上</li>\n<li>写具体的业务逻辑</li>\n</ol>\n</li>\n<li>Service 调用 Mapper 操作数据库，查询分页数据</li>\n<li>Controller 将查询到的分页数据响应给页面</li>\n<li>页面接收到分页数据并通过 ElementUI 的 Table 组件展示到页面上</li>\n</ol>\n",
            "tags": [
                "spring复习",
                "JAVA"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/18/spring%E5%A4%8D%E4%B9%A0/Maven/",
            "url": "https://zyakmd.github.io/2024/03/18/spring%E5%A4%8D%E4%B9%A0/Maven/",
            "title": "Maven",
            "date_published": "2024-03-18T09:58:55.000Z",
            "content_html": "<blockquote>\n<p>目标</p>\n<ul>\n<li>理解并实现分模块开发</li>\n<li>能够使用聚合工程快速构建项目</li>\n<li>能够使用继承简化项目配置</li>\n<li>能够根据需求配置生成、开发、测试环境，并在各个环境间切换运行</li>\n<li>了解 Maven 的私服</li>\n</ul>\n</blockquote>\n<p>Maven 翻译为 &quot;专家&quot;、&quot;内行&quot;，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven 利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。<br />\nMaven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</p>\n<h1 id=\"分模块开发\"><a class=\"anchor\" href=\"#分模块开发\">#</a> 分模块开发</h1>\n<h2 id=\"分模块开发设计\"><a class=\"anchor\" href=\"#分模块开发设计\">#</a> 分模块开发设计</h2>\n<ol>\n<li>按照功能拆分</li>\n</ol>\n<p>比如上面的 SSM 整合开发，都是在一个模块中。虽然这样做功能也都实现了，但是也存在了一些问题，拿银行的项目为例</p>\n<ul>\n<li>网络没有那么发达的时候，需要到银行柜台或者取款机进行业务操作</li>\n<li>随着互联网的发展，有了电脑以后，就可以在网页上登录银行网站使用 U 盾进行业务操作</li>\n<li>再来就是随着智能手机的普及，只需要用手机登录 APP 就可以进行业务操作</li>\n</ul>\n<p>上面三个场景出现的时间是不相同的，如果非要把三个场景的模块代码放入到一个项目，那么当其中某一个模块代码出现问题，就会导致整个项目无法正常启动，从而导致银行的多个业务都无法正常班理。所以会<mark>按照功能</mark>将项目进行拆分。</p>\n<ol start=\"2\">\n<li>按照模块拆分</li>\n</ol>\n<p>比如电商的项目中，有订单和商品两个模块，订单中需要包含商品的详细信息，所以需要商品的模型类，商品模块也会用到商品的模型类，这个时候如果两个模块中都写模型类，就会出现重复代码，后期的维护成本就比较高。就想能不能将它们公共的部分抽取成一个独立的模块，其他模块要想使用可以像添加第三方 jar 包依赖一样来使用自己抽取的模块，这样就解决了代码重复的问题，这种拆分方式就说所说的<mark>按照模块</mark>拆分。</p>\n<p>经过两个案例的分析，就知道:</p>\n<ul>\n<li>将原始模块按照功能拆分成若干个子模块，方便模块间的相互调用，接口共享。</li>\n</ul>\n<p>可以将各个层拆成一个个对立的模块，如:<br />\n<img data-src=\"image-20240318211945082.png\" alt=\"\" /></p>\n<p>这样的话，项目中的每一层都可以单独维护，也可以很方便的被别人使用，该如何实现呢？</p>\n<h2 id=\"分模块开发实现\"><a class=\"anchor\" href=\"#分模块开发实现\">#</a> 分模块开发实现</h2>\n<p>前面已经完成了 SSM 整合，接下来，就基于 SSM 整合的项目来实现对项目的拆分。</p>\n<h3 id=\"环境准备\"><a class=\"anchor\" href=\"#环境准备\">#</a> 环境准备</h3>\n<p>将之前 ssm 的项目重命名为 <code>maven_01_ssm</code>  部署到 IDEA 中，将环境快速准备好，部署成功后，项目的格式如下:</p>\n<h3 id=\"抽取domain层\"><a class=\"anchor\" href=\"#抽取domain层\">#</a> 抽取 domain 层</h3>\n<blockquote>\n<p>步骤 1: 创建新模块</p>\n</blockquote>\n<ul>\n<li>创建一个名为 <code>maven_02_pojo</code>  的 maven 项目</li>\n</ul>\n<blockquote>\n<p>步骤 2: 项目中创建 domain 包</p>\n</blockquote>\n<ul>\n<li>在 <code>maven_02_pojo</code>  中创建 <code>com.zy.domain</code>  包，并将 <code>maven_01_ssm</code>  的 Book 类拷贝到该包中</li>\n</ul>\n<blockquote>\n<p>步骤 3: 删除原项目 <code>maven_01_ssm</code>  中的 domain 包</p>\n</blockquote>\n<ul>\n<li>删除后， <code>maven_01_ssm</code>  项目中用到 <code>Book</code>  的类中都会有红色提示，如下:</li>\n</ul>\n<p><span class=\"label warning\">说明</span>  出错的原因是 <code>maven_01_ssm</code>  中已经将 Book 类删除，所以该项目找不到 Book 类，所以报错</p>\n<ul>\n<li>要想解决上述问题，需要在 <code>maven_01_ssm</code>  中添加 <code>maven_02_pojo</code>  的依赖。</li>\n</ul>\n<blockquote>\n<p>步骤 4: 建立依赖关系</p>\n</blockquote>\n<ul>\n<li>在 <code>maven_01_ssm</code>  项目的 pom.xml 添加 <code>maven_02_pojo</code>  的依赖，即 <code>maven_02_pojo</code>  的 <code>pom.xml</code>  的配置</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_02_pojo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>因为添加了依赖，所以在 <code>maven_01_ssm</code>  中就已经能找到 Book 类，所以刚才的报红提示就会消失。</li>\n</ul>\n<blockquote>\n<p>步骤 5: 编译 <code>maven_01_ssm</code>  项目</p>\n</blockquote>\n<p>编译 <code>maven_01_ssm</code>  你会在控制台看到如下错误</p>\n<div class=\"note info no-icon\">\n<p>Failed to execute goal on project maven_01_ssm: Could not resolve dependencies for project com.blog:maven_01_ssm:jar:1.0-SNAPSHOT: Could not find artifact com.blog:maven_02_pojo:jar:1.0-SNAPSHOT -&gt; [Help 1]</p>\n</div>\n<p>错误信息为：不能解决 <code>maven_01_ssm</code>  项目的依赖问题，找不到 <code>maven_02_pojo</code>  这个 jar 包。</p>\n<p>为什么找不到呢？</p>\n<p>原因是 Maven 会从本地仓库找对应的 jar 包，但是本地仓库又不存在该 jar 包所以会报错。</p>\n<p>在 IDEA 中是有 <code>maven_02_pojo</code>  这个项目，所以只需要将 <code>maven_02_pojo</code>  项目安装到本地仓库即可。</p>\n<blockquote>\n<p>步骤 6: 将项目安装本地仓库</p>\n</blockquote>\n<p>将需要被依赖的项目 <code>maven_02_pojo</code> ，使用 maven 的 install 命令，把其安装到 Maven 的本地仓库中。<br />\n在 idea 右侧的 maven 中对 <code>maven_02_pojo</code>  的 <code>Lifecyle</code>  的 install 双击，控制台打印 success 且会有路径信息</p>\n<p>安装成功后，在对应的路径下就看到安装好的 jar 包</p>\n<p><span class=\"label info\">说明</span> 具体安装在哪里，和自己 Maven 的本地仓库配置的位置有关。</p>\n<p>当再次执行 <code>maven_01_ssm</code>  的 compile 的命令后，就已经能够成功编译。</p>\n<h3 id=\"抽取dao层\"><a class=\"anchor\" href=\"#抽取dao层\">#</a> 抽取 Dao 层</h3>\n<blockquote>\n<p>步骤 1: 创建新模块</p>\n</blockquote>\n<p>创建一个名称为 <code>maven_03_dao</code>  的 jar 项目</p>\n<p><img data-src=\"assets/1630773580067.png\" alt=\"1630773580067\" /></p>\n<blockquote>\n<p>步骤 2: 项目中创建 dao 包</p>\n</blockquote>\n<p>在 <code>maven_03_dao</code>  项目中创建 <code>com.zy.dao</code>  包，并将 <code>maven_01_ssm</code>  中 BookDao 类拷贝到该包中</p>\n<p>在 <code>maven_03_dao</code>  中会有如下几个问题需要解决下:</p>\n<ul>\n<li>\n<p>项目 <code>maven_03_dao</code>  的 BookDao 接口中 Book 类找不到报错</p>\n<ul>\n<li>解决方案在 <code>maven_03_dao</code>  项目的 pom.xml 中添加 <code>maven_02_pojo</code>  项目<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_02_pojo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>项目 <code>maven_03_dao</code>  的 BookDao 接口中，Mybatis 的增删改查注解报错</p>\n<ul>\n<li>\n<p>解决方案在 <code>maven_03_dao</code>  项目的 pom.xml 中添加 <code>mybatis</code>  的相关依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.47<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>最后 install 安装到本地</li>\n</ul>\n<blockquote>\n<p>步骤 3: 删除原项目中的 dao 包</p>\n</blockquote>\n<p>删除 Dao 包以后，因为 <code>maven_01_ssm</code>  中的 BookServiceImpl 类中有使用到 Dao 的内容，所以需要在 <code>maven_01_ssm</code>  的 pom.xml 添加 <code>maven_03_dao</code>  的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_03_dao<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>当再次执行 <code>maven_01_ssm</code>  的 compile 的指令后，就已经能够成功编译。</p>\n<blockquote>\n<p>步骤四：运行测试</p>\n</blockquote>\n<ul>\n<li>启动 Tomcat 服务器，访问 <code>http://localhost:8080/pages/books.html</code></li>\n<li>将抽取后的项目进行运行，测试之前的增删改查功能依然能够使用。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>将抽取后的项目进行运行，测试之前的增删改查功能依然能够使用。</p>\n<p>所以对于项目的拆分，大致会有如下几个步骤:</p>\n<ol>\n<li>创建 Maven 模块</li>\n<li>书写模块代码</li>\n</ol>\n<ul>\n<li>分模块开发需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分。拆分方式可以按照功能拆也可以按照模块拆。</li>\n</ul>\n<ol start=\"3\">\n<li>通过 maven 指令安装模块到本地仓库 (install 指令)</li>\n</ol>\n<p>团队内部开发需要发布模块功能到团队内部可共享的仓库中 (私服)，私服后面会讲解。</p>\n<h1 id=\"依赖管理\"><a class=\"anchor\" href=\"#依赖管理\">#</a> 依赖管理</h1>\n<p>现在已经能把项目拆分成一个个独立的模块，当在其他项目中想要使用独立出来的这些模块，只需要在其 pom.xml 使用 &lt;dependency&gt; 标签来进行 jar 包的引入即可。</p>\n<p>&lt;dependency&gt; 其实就是依赖，关于依赖管理里面都涉及哪些内容，就一个个来学习下:</p>\n<ul>\n<li>依赖传递</li>\n<li>可选依赖</li>\n<li>排除依赖</li>\n</ul>\n<p>先来说说什么是依赖:</p>\n<p>依赖指当前项目运行所需的 jar，一个项目可以设置多个依赖。</p>\n<p>格式为:</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 设置当前项目所依赖的所有 jar--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 设置具体的依赖 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 依赖所属群组 id--></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 依赖所属项目 id--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 依赖版本号 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"依赖传递与冲突问题\"><a class=\"anchor\" href=\"#依赖传递与冲突问题\">#</a> 依赖传递与冲突问题</h2>\n<p>回到刚才的项目案例中，打开 Maven 的面板，你会发现:</p>\n<p>在项目所依赖的这些 jar 包中，有一个比较大的区别就是<strong>有的依赖前面有箭头 <code>&gt;</code> , 有的依赖前面没有。</strong><br />\n<img data-src=\"image-20240319193916136.png\" alt=\"\" /><br />\n那么这个箭头所代表的含义是什么？</p>\n<p>打开前面的箭头，你会发现这个 jar 包下面还包含有其他的 jar 包</p>\n<p>你会发现有两个 <code>maven_02_pojo</code>  的依赖被加载到 Dependencies 中，那么 <code>maven_03_dao</code>  中的 <code>maven_02_pojo</code>  能不能使用呢？</p>\n<p>要想验证非常简单，只需要把 <code>maven_01_ssm</code>  项目中 pom.xml 关于 <code>maven_02_pojo</code>  的依赖注释或删除掉</p>\n<p>在 Dependencies 中移除自己所添加 <code>maven_02_pojo</code>  依赖后，打开 BookServiceImpl 的类，你会发现 Book 类依然存在，可以被正常使用</p>\n<p>这个特性其实就是要讲解的<mark>依赖传递</mark>。</p>\n<p>依赖是具有传递性的:<br />\n<img data-src=\"https://pic.imgdb.cn/item/63203b1c16f2c2beb16ca62c.jpg\" alt=\"\" /></p>\n<p><span class=\"label info\">说明</span>  A 代表自己的项目；B,C,D,E,F,G 代表的是项目所依赖的 jar 包；D1 和 D2 E1 和 E2 代表是相同 jar 包的不同版本</p>\n<ol>\n<li>A 依赖了 B 和 C,B 和 C 有分别依赖了其他 jar 包，所以在 A 项目中就可以使用上面所有 jar 包，这就是所说的依赖传递</li>\n<li>依赖传递有直接依赖和间接依赖\n<ul>\n<li>相对于 A 来说，A 直接依赖 B 和 C, 间接依赖了 D1,E1,G，F,D2 和 E2</li>\n<li>相对于 B 来说，B 直接依赖了 D1 和 E1, 间接依赖了 G</li>\n<li>直接依赖和间接依赖是一个相对的概念</li>\n</ul>\n</li>\n<li>因为有依赖传递的存在，就会导致 jar 包在依赖的过程中出现冲突问题，具体什么是冲突？Maven 是如何解决冲突的？</li>\n</ol>\n<p>这里所说的<mark>依赖冲突</mark>是指项目依赖的某一个 jar 包，有多个不同的版本，因而造成类包版本冲突。</p>\n<ul>\n<li><span class=\"label info\">情况一</span>在 <code>maven_01_ssm</code>  的 pom.xml 中添加两个不同版本的 Junit 依赖:</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>调换位置，刷新 maven 面板，我们会发现，maven 的 dependencies 面板上总是显示使用的是后加载的 jar 包</p>\n<p>通过对比，会发现一个结论</p>\n<ul>\n<li>特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的。</li>\n</ul>\n<ul>\n<li><span class=\"label info\">情况二</span>路径优先：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高\n<ul>\n<li>A 通过 B 间接依赖到 E1</li>\n<li>A 通过 C 间接依赖 D2 再到 E2</li>\n<li>A 就会间接依赖到 E1 和 E2，Maven 会按照层级来选择，E1 是 2 度，E2 是 3 度，所以最终会选择 E1</li>\n</ul>\n</li>\n<li><span class=\"label info\">情况三</span>声明优先：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的\n<ul>\n<li>A 通过 B 间接依赖到 D1</li>\n<li>A 通过 C 间接依赖到 D2</li>\n<li>D1 和 D2 都是两度，这个时候就不能按照层级来选择，需要按照声明来，谁先声明用谁，也就是说 B 在 C 之前声明，这个时候使用的是 D1，反之则为 D2</li>\n</ul>\n</li>\n</ul>\n<p>但是对于上面的结果，我们也不用刻意去记，一切以 maven 的 dependencies 面板上显示的为准</p>\n<h2 id=\"可选依赖和排除依赖\"><a class=\"anchor\" href=\"#可选依赖和排除依赖\">#</a> 可选依赖和排除依赖</h2>\n<p>依赖传递介绍完以后，来思考一个问题，假如</p>\n<ul>\n<li>maven_01_ssm 依赖了 maven_03_dao</li>\n<li>maven_03_dao 依赖了 maven_02_pojo</li>\n<li>因为现在有依赖传递，所以 maven_01_ssm 能够使用到 maven_02_pojo 的内容</li>\n<li>如果说现在不想让 maven_01_ssm 依赖到 maven_02_pojo，有哪些解决方案？</li>\n</ul>\n<p><span class=\"label info\">说明</span> 在真实使用的过程中，maven_01_ssm 中是需要用到 maven_02_pojo 的，这里只是用这个例子描述的需求。因为有时候，maven_03_dao 出于某些因素的考虑，就是不想让别人使用自己所依赖的 maven_02_pojo。</p>\n<ul>\n<li>方案一：可选依赖\n<ul>\n<li>可选依赖指对外隐藏当前所依赖的资源 --- 不透明</li>\n<li>在 <code>maven_03_dao</code>  的 pom.xml, 在引入 <code>maven_02_pojo</code>  的时候，添加 <code>optional</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_02_pojo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 可选依赖是隐藏当前工程所依赖的资源，隐藏后对应资源将不具有依赖传递 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>此时 BookServiceImpl 就已经报错了，说明由于 maven_03_dao 将 maven_02_pojo 设置成可选依赖，导致 maven_01_ssm 无法引用到 maven_02_pojo 中的内容，导致 Book 类找不到。</p>\n<ul>\n<li>方案二：排除依赖 <code>exclusions</code>\n<ul>\n<li>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本 --- 不需要</li>\n<li>前面已经通过可选依赖实现了阻断 maven_02_pojo 的依赖传递，对于排除依赖，则指的是已经有依赖的事实，也就是说 maven_01_ssm 项目中已经通过依赖传递用到了 maven_02_pojo，此时需要做的是将其进行排除，所以接下来需要修改 maven_01_ssm 的 pom.xml</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_03_dao<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 排除依赖是隐藏当前资源对应的依赖关系 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_02_pojo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这样操作后，BookServiceImpl 中的 Book 类一样也会报错。</p>\n<p>当然 <code>exclusions</code>  标签带 <code>s</code>  说明是可以依次排除多个依赖到的 jar 包，比如 maven_03_dao 中有依赖 junit 和 mybatis, 也可以一并将其排除。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_03_dao<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 排除依赖是隐藏当前资源对应的依赖关系 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_02_pojo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>介绍我这两种方式后，简单来梳理下，就是</p>\n<ul>\n<li><code>A依赖B,B依赖C</code> , <code>C</code>  通过依赖传递会被 <code>A</code>  使用到，现在要想办法让 <code>A</code>  不去依赖 <code>C</code></li>\n<li>可选依赖是在 B 上设置 <code>&lt;optional&gt;</code> , <code>A</code>  不知道有 <code>C</code>  的存在，</li>\n<li>排除依赖是在 A 上设置 <code>&lt;exclusions&gt;</code> , <code>A</code>  知道有 <code>C</code>  的存在，主动将其排除掉。</li>\n</ul>\n<h1 id=\"聚合和继承\"><a class=\"anchor\" href=\"#聚合和继承\">#</a> 聚合和继承</h1>\n<p>项目已经从以前的单模块，变成了现在的多模块开发。项目一旦变成了多模块开发以后，就会引发一些问题，在这一节中主要会学习两个内容 <code>聚合</code> 和 <code>继承</code> ，用这两个知识来解决下分模块后的一些问题。</p>\n<h2 id=\"聚合\"><a class=\"anchor\" href=\"#聚合\">#</a> 聚合</h2>\n<p><img data-src=\"https://pic.imgdb.cn/item/63205b6416f2c2beb18ff5db.jpg\" alt=\"\" /></p>\n<ul>\n<li>分模块开发后，需要将这四个项目都安装到本地仓库，目前只能通过项目 Maven 面板的 <code>install</code>  来安装，并且需要安装四个，如果的项目足够多，那么一个个安装起来还是比较麻烦的</li>\n<li>如果四个项目都已经安装成功，当 ssm_pojo 发生变化后，就得将 ssm_pojo 重新安装到 maven 仓库，但是为了确保对 ssm_pojo 的修改不会影响到其他项目模块，需要对所有的模块进行重新编译，那又需要将所有的模块再来一遍</li>\n</ul>\n<p>项目少的话还好，但是如果项目多的话，一个个操作项目就容易出现漏掉或重复操作的问题，所以就想能不能抽取一个项目，把所有的项目管理起来，以后要想操作这些项目，只需要操作这一个项目，其他所有的项目都走一样的流程，这个不就很省事省力。</p>\n<p>这就用到了接下来要讲解的<mark>聚合</mark>：</p>\n<ul>\n<li>所谓聚合：将多个模块组织成一个整体，同时进行项目构建的过程称为聚合</li>\n<li>聚合工程：通常是一个不具有业务功能的 &quot;空&quot; 工程（有且仅有一个 pom 文件）</li>\n<li>作用：使用聚合工程可以将多个工程编组，通过对聚合工程进行构建，实现对所包含的模块进行同步构建</li>\n<li>当工程中某个模块发生更新（变更）时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题。</li>\n</ul>\n<p>具体的实现步骤为：</p>\n<blockquote>\n<p>步骤 1: 创建一个空的 maven 项目</p>\n</blockquote>\n<blockquote>\n<p>步骤 2: 将项目的打包方式改为 pom，通过 <code>packaging</code></p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_01_parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><span class=\"label info\">说明</span> 项目的打包方式，接触到的有三种，分别是</p>\n<ul>\n<li>jar：默认情况，说明该项目为 java 项目</li>\n<li>war：说明该项目为 web 项目</li>\n<li>pom：说明该项目为聚合或继承 (后面会讲) 项目</li>\n</ul>\n<blockquote>\n<p>步骤 3:pom.xml 添加所要管理的项目</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_01_parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 设置管理的模块名称 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>../maven_01_ssm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>../maven_02_pojo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>../maven_03_dao<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 使用聚合统一管理项目</p>\n</blockquote>\n<p>测试发现，当 <code>maven</code>  面板的 <code>compile</code>  被点击后，所有被其管理的项目都会被执行编译操作。这就是聚合工程的作用。</p>\n<div class=\"note info no-icon\">\n<p>[INFO] maven_02_pojo Maven Webapp … SUCCESS [ 0.677 s]<br />\n[INFO] maven_03_dao … SUCCESS [ 0.027 s]<br />\n[INFO] maven_01_ssm Maven Webapp … SUCCESS [ 0.100 s]<br />\n[INFO] maven_00_parent … SUCCESS [ 0.001 s]</p>\n</div>\n<p><span class=\"label info\">说明</span> 聚合工程管理的项目在进行运行的时候，会按照项目与项目之间的依赖关系来自动决定执行的顺序和配置的顺序无关。虽然我们配置的顺序是 <code>123</code> ，但是执行的时候按照依赖关系编译是 <code>231</code></p>\n<p>聚合的知识就讲解完了，最后总结一句话就是，<strong>聚合工程主要是用来管理项目</strong>。</p>\n<h2 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h2>\n<p>已经完成了使用聚合工程去管理项目，聚合工程进行某一个构建操作，其他被其管理的项目也会执行相同的构建操作。那么接下来，再来分析下，多模块开发存在的另外一个问题， <code>重复配置</code> 的问题，先来看张图:</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/632063ce16f2c2beb19992ee.jpg\" alt=\"\" /></p>\n<ul>\n<li><code>spring-webmvc</code> 、 <code>spring-jdbc</code>  在三个项目模块中都有出现，这样就出现了重复的内容</li>\n<li><code>spring-test</code>  只在 ssm_crm 和 ssm_goods 中出现，而在 ssm_order 中没有，这里是部分重复的内容</li>\n<li>使用的 spring 版本目前是 <code>5.2.10.RELEASE</code> , 假如后期要想升级 spring 版本，所有跟 Spring 相关 jar 包都得被修改，涉及到的项目越多，维护成本越高</li>\n</ul>\n<p>面对上面的这些问题，就得用到接下来要学习的<mark>继承</mark></p>\n<ul>\n<li>所谓继承：描述的是两个工程间的关系，与 java 中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</li>\n<li>作用：\n<ul>\n<li>简化配置</li>\n<li>减少版本冲突</li>\n</ul>\n</li>\n</ul>\n<p>到程序中去看看继承该如何实现：</p>\n<blockquote>\n<p>步骤 1: 创建一个空的 Maven 项目并将其打包方式设置为 pom</p>\n</blockquote>\n<p>因为这一步和前面 maven 创建聚合工程的方式是一摸一样，所以可以单独创建一个新的工程，也可以直接和聚合公用一个工程。实际开发中，<mark>聚合和继承一般也都放在同一个项目中</mark>，但是这两个的功能是不一样的</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_01_parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 设置打包方式 --></span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 在子项目中设置其父工程</p>\n</blockquote>\n<p>分别在 <code>maven_01_ssm</code> , <code>maven_02_pojo</code> , <code>maven_03_dao</code>  的 pom.xml 中添加其父项目为 <code>maven_01_parent</code></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 配置当前工程继承自 parent 工程 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_01_parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 设置父项目 pom.xml 位置路径 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">></span></span>../maven_01_parent/pom.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>relativePath</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 优化子项目共有依赖导入问题</p>\n</blockquote>\n<ol>\n<li>将子项目共同使用的 jar 包都抽取出来，维护在父项目的 pom.xml 中</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_01_parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 设置管理的模块名称 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>../maven_01_ssm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>../maven_02_pojo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>../maven_03_dao<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.47<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>删除子项目中已经被抽取到父项目的 pom.xml 中的 jar 包，如在 <code>maven_01_ssm</code>  的 pom.xml 中将已经出现在父项目的 jar 包删除掉</p>\n<ul>\n<li>删除完后，你会发现父项目中有依赖对应的 jar 包，子项目虽然已经将重复的依赖删除掉了，但是刷新的时候，子项目中所需要的 jar 包依然存在。</li>\n<li>当项目的 <code>&lt;parent&gt;</code>  标签被移除掉，会发现多出来的 jar 包依赖也会随之消失。</li>\n</ul>\n</li>\n<li>\n<p>在父项目中修改 jar 包的版本，刷新后，子项目中的 jar 包版本也随之变化</p>\n</li>\n</ol>\n<ul>\n<li>这样就可以解决刚才提到的第一个问题，将子项目中的公共 jar 包抽取到父工程中进行统一添加依赖，这样做的可以简化配置，并且当父工程中所依赖的 jar 包版本发生变化，所有子项目中对应的 jar 包版本也会跟着更新。</li>\n</ul>\n<blockquote>\n<p>步骤 4: 优化子项目依赖版本问题</p>\n</blockquote>\n<p>如果把所有用到的 jar 包都管理在父项目的 pom.xml，看上去更简单些，但是这样就会导致有很多项目引入了过多自己不需要的 jar 包。如上面看到的这张图:</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/632063ce16f2c2beb19992ee.jpg\" alt=\"\" /></p>\n<p>如果把所有的依赖都放在了父工程中进行统一维护，就会导致 ssm_order 项目中多引入了 <code>spring-test</code>  的 jar 包，如果这样的 jar 包过多的话，对于 ssm_order 来说也是一种 &quot;负担&quot;。</p>\n<p>那针对于这种部分项目有的 jar 包，该如何管理优化呢？</p>\n<ol>\n<li>在父工程 mavne_01_parent 的 pom.xml 来定义依赖管理</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 定义依赖管理 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>将 maven_01_ssm 的 pom.xml 中的 junit 依赖删除掉，刷新 Maven</p>\n<p>刷新完会发现，在 maven_01_ssm 项目中的 junit 依赖并没有出现，所以得到一个结论:<br />\n<mark> <code>&lt;dependencyManagement&gt;</code>  标签不真正引入 jar 包，而是配置可供子项目选择的 jar 包依赖</mark><br />\n子项目要想使用它所提供的这些 jar 包，需要自己添加依赖，并且不需要指定 <code>&lt;version&gt;</code></p>\n</li>\n<li>\n<p>在 maven_01_ssm 的 pom.xml 添加 junit 的依赖</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><span class=\"label info\">注意</span> 这里就不需要添加版本了，这样做的好处就是当父工程 dependencyManagement 标签中的版本发生变化后，子项目中的依赖版本也会跟着发生变化</p>\n<ol start=\"4\">\n<li>在 maven_03_dao 的 pom.xml 添加 junit 的依赖</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这个时候，maven_01_ssm 和 maven_03_dao 这两个项目中的 junit 版本就会跟随着父项目中的标签 dependencyManagement 中 junit 的版本发生变化而变化。不需要 junit 的项目就不需要添加对应的依赖即可。</p>\n<p>至此继承就已经学习完了，总结来说，继承可以帮助做两件事</p>\n<ul>\n<li>将所有项目公共的 jar 包依赖提取到父工程的 pom.xml 中，子项目就可以不用重复编写，简化开发</li>\n<li>将所有项目的 jar 包配置到父工程的 dependencyManagement 标签下，实现版本管理，方便维护\n<ul>\n<li><mark>dependencyManagement 标签不真正引入 jar 包，只是管理 jar 包的版本</mark></li>\n<li>子项目在引入的时候，只需要指定 groupId 和 artifactId，不需要加 version</li>\n<li>当 dependencyManagement 标签中 jar 包版本发生变化，所有子项目中有用到该 jar 包的地方对应的版本会自动随之更新</li>\n</ul>\n</li>\n</ul>\n<p>最后总结一句话就是，<strong><mark>父工程主要是用来快速配置依赖 jar 包和管理项目中所使用的资源</mark></strong>。</p>\n<h2 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h2>\n<p>继承的实现步骤:</p>\n<ul>\n<li>\n<p>创建 Maven 模块，设置打包类型为 pom</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在父工程的 pom 文件中配置依赖关系 (子工程将沿用父工程中的依赖关系), 一般只抽取子项目中公有的 jar 包</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在父工程中配置子工程中可选的依赖关系</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在子工程中配置当前工程所继承的父工程</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 定义该工程的父工程 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_01_parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 填写父工程的 pom 文件，可以不写 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">></span></span>../maven_01_parent/pom.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>relativePath</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在子工程中配置使用父工程中可选依赖的坐标</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<p><span class=\"label warning\">注意事项</span></p>\n<ol>\n<li>子工程中使用父工程中的可选依赖时，仅需要提供群组 id 和项目 id，无需提供版本，版本由父工程统一提供，避免版本冲突</li>\n<li>子工程中还可以定义父工程中没有定义的依赖关系，只不过不能被父工程进行版本统一管理。</li>\n</ol>\n<h2 id=\"聚合与继承的区别\"><a class=\"anchor\" href=\"#聚合与继承的区别\">#</a> 聚合与继承的区别</h2>\n<ul>\n<li>\n<p>聚合和继承的作用:</p>\n<ul>\n<li>聚合用于快速构建项目，对项目进行管理</li>\n<li>继承用于快速配置和管理子项目中所使用 jar 包的版本</li>\n</ul>\n</li>\n<li>\n<p>聚合和继承的相同点:</p>\n<ul>\n<li>聚合与继承的 pom.xml 文件打包方式均为 pom，可以将两种关系制作到同一个 pom 文件中</li>\n<li>聚合与继承均属于设计型模块，并无实际的模块内容</li>\n</ul>\n</li>\n<li>\n<p>聚合和继承的不同点:</p>\n<ul>\n<li>聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些</li>\n<li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"idea构建聚合与继承工程\"><a class=\"anchor\" href=\"#idea构建聚合与继承工程\">#</a> IDEA 构建聚合与继承工程</h3>\n<p>但是有一个稍微麻烦的地方就是聚合和继承的工程构建，需要在聚合项目中手动添加 <code>modules</code>  标签，需要在所有的子项目中添加 <code>parent</code>  标签，万一写错了咋办？</p>\n<p>其实对于聚合和继承工程的创建，IDEA 已经能帮助快速构建，具体的实现步骤为:</p>\n<blockquote>\n<p>步骤 1: 创建一个 Maven 项目</p>\n</blockquote>\n<p>创建一个空的 Maven 项目，可以将项目中的 <code>src</code>  目录删除掉，这个项目作为聚合工程和父工程。</p>\n<p><img data-src=\"image-20240319201616859.png\" alt=\"\" /></p>\n<blockquote>\n<p>步骤 2: 创建子项目</p>\n</blockquote>\n<p>该项目可以被聚合工程管理，同时会继承父工程。</p>\n<p><img data-src=\"image-20240319201625874.png\" alt=\"\" /></p>\n<p>创建成功后，maven_parent 即是聚合工程又是父工程，maven_web 中也有 parent 标签，继承的就是 maven_parent, 对于难以配置的内容都自动生成</p>\n<p>按照上面这种方式，就可以根据自己的需要来构建分模块项目</p>\n<h1 id=\"属性\"><a class=\"anchor\" href=\"#属性\">#</a> 属性</h1>\n<p>在这一章节内容中，将学习两个内容，分别是</p>\n<ul>\n<li>属性</li>\n<li>版本管理</li>\n</ul>\n<p>属性中会继续解决分模块开发项目存在的问题，版本管理主要是认识下当前主流的版本定义方式。</p>\n<h2 id=\"属性-2\"><a class=\"anchor\" href=\"#属性-2\">#</a> 属性</h2>\n<h3 id=\"问题分析\"><a class=\"anchor\" href=\"#问题分析\">#</a> 问题分析</h3>\n<p>讲解内容之前，还是先来分析问题:</p>\n<p>前面已经在父工程中的 &lt;dependencyManagement&gt; 标签 (配置后里面的包对于子工程就是可选依赖项) 中对项目中所使用的 jar 包版本进行了统一的管理，但是如果在标签中有如下的内容:</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>你会发现，如果现在想更新 Spring 的版本，你会发现依然需要更新多个 jar 包的版本，这样的话还是有可能出现漏改导致程序出问题，而且改起来也是比较麻烦。</p>\n<p>问题清楚后，需要解决的话，就可以参考 java 基础所学习的变量，声明一个变量，在其他地方使用该变量，当变量的值发生变化后，所有使用变量的地方，就会跟着修改，即:<br />\n<img data-src=\"image-20240319202013134.png\" alt=\"\" /></p>\n<h3 id=\"解决步骤\"><a class=\"anchor\" href=\"#解决步骤\">#</a> 解决步骤</h3>\n<blockquote>\n<p>步骤 1: 父工程中定义属性</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring.version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>junit.version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>junit.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mybatis-spring.version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mybatis-spring.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 修改依赖的 version</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>此时，只需要更新父工程中 properties 标签中所维护的 jar 包版本，所有子项目中的版本也就跟着更新。当然除了将 spring 相关版本进行维护，可以将其他的 jar 包版本也进行抽取，这样就可以对项目中所有 jar 包的版本进行统一维护，如:</p>\n<div class=\"note info no-icon\">\n<p>使用 <code>properties</code>  标签来定义属性，在 <code>properties</code>  标签内自定义标签名当做属性名，自定义标签内的值即为属性值<br />\n例如： <code>&lt;spring.version&gt;5.2.10.RELEASE&lt;/spring.version&gt;</code> ，属性名为 <code>spring.version</code> ，属性值为 <code>5.2.10.RELEASE</code> <br />\n 在其他地方引用变量时用 <code>$&#123;属性名&#125;</code></p>\n</div>\n<h2 id=\"配置文件加载属性\"><a class=\"anchor\" href=\"#配置文件加载属性\">#</a> 配置文件加载属性</h2>\n<p>Maven 中的属性已经介绍过了，现在也已经能够通过 Maven 来集中管理 Maven 中依赖 jar 包的版本。但是又有新的需求，就是想让 Maven 对于属性的管理范围能更大些，比如之前项目中的 <code>jdbc.properties</code> ，这个配置文件中的属性，能不能也来让 Maven 进行管理呢？</p>\n<p>答案是肯定的，具体的实现步骤为:</p>\n<blockquote>\n<p>步骤 1: 父工程定义属性</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring.version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring.version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mybatis.version</span><span class=\"token punctuation\">></span></span>3.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mybatis.version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdbc.driver</span><span class=\"token punctuation\">></span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jdbc.driver</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdbc.url</span><span class=\"token punctuation\">></span></span>jdbc:mysql://localhost:3306/ssm_db?useSSL=false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jdbc.url</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdbc.username</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jdbc.username</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdbc.password</span><span class=\"token punctuation\">></span></span>123456<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jdbc.password</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2:jdbc.properties 文件中引用属性</p>\n</blockquote>\n<p>在 jdbc.properties，将 jdbc.url 的值直接获取 Maven 配置的属性</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">jdbc.driver</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">$&#123;jdbc.driver&#125;  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">jdbc.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">$&#123;jdbc.url&#125;  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">jdbc.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">$&#123;jdbc.username&#125;  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">jdbc.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">$&#123;jdbc.password&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 设置 maven 过滤文件范围</p>\n</blockquote>\n<p>直接在 properties 中引用属性，看起来怪怪的，properties 怎么能直接用到 maven 中配置的属性呢？<br />\n所以我们还需要来配置一下，让 <code>maven_01_ssm/src/main/resources</code>  目录下的 <code>jdbc.properties</code>  文件可以解析 <code>$&#123;&#125;</code></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 设置资源目录 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">></span></span>../maven_01_ssm/src/main/resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 设置能够解析 $&#123;&#125;，默认是 false --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filtering</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filtering</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>directory 路径前要添加 <code>../</code>  的原因是 maven_01_ssm 相对于父工程的 pom.xml 路径是在其上一层的目录中，所以需要添加。</p>\n<p>修改完后，注意 maven_01_ssm 项目的 resources 目录就多了些东西，如下:</p>\n<p><img data-src=\"image-20240319202657872.png\" alt=\"\" /></p>\n<blockquote>\n<p>步骤 4: 测试是否生效</p>\n</blockquote>\n<p>测试的时候，只需要将 maven_01_ssm 项目进行打包，然后观察打包结果中最终生成的内容是否为 Maven 中配置的内容</p>\n<p><img data-src=\"image-20240319203154231.png\" alt=\"\" /></p>\n<p>上面的属性管理就已经完成，但是有一个问题没有解决，因为不只是 maven_01_ssm 项目需要有属性被父工程管理，如果有多个项目需要配置，该如何实现呢？</p>\n<p>方式一:</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 设置资源目录，并设置能够解析 $&#123;&#125;--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">></span></span>../maven_01_ssm/src/main/resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filtering</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filtering</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">></span></span>../maven_02_pojo/src/main/resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filtering</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filtering</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ...</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>可以配，但是如果项目够多的话，这个配置也是比较繁琐</p>\n<p>方式二:</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t$&#123;project.basedir&#125;: 当前项目所在目录，子项目继承了父项目，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t相当于所有的子项目都添加了资源目录的过滤</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">></span></span>$&#123;project.basedir&#125;/src/main/resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filtering</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filtering</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><div class=\"note info no-icon\">\n<p>说明：如果打包过程中出现错误 <code>Error assembling WAR: webxml attribute is required</code> <br />\n 原因就是 Maven 发现你的项目为 web 项目，就会去找 web 项目的入口 web.xml (配置文件配置的方式)，发现没有找到，就会报错。</p>\n</div>\n<p><span class=\"label info\">解决方案 1</span> 在 maven_01_ssm 项目的 <code>src\\main\\webapp\\WEB-INF\\</code>  添加一个 web.xml 文件</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/javaee<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3.1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><span class=\"label info\">解决方案 2</span>  配置 maven 打包 war 时，忽略 web.xml 检查</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-war-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>failOnMissingWebXml</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>failOnMissingWebXml</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>上面所使用的都是 Maven 的自定义属性，除了 ${project.basedir}, 它属于 Maven 的内置系统属性。</p>\n<p>在 Maven 中的属性分为:</p>\n<ul>\n<li>自定义属性（常用）</li>\n<li>内置属性</li>\n<li>Setting 属性</li>\n<li>Java 系统属性</li>\n<li>环境变量属性<br />\n<img data-src=\"image-20240319203510750.png\" alt=\"\" /></li>\n</ul>\n<p>在 cmd 命令行中输入 <code>mvn help:system</code>  查看这些属性，使用  <code>$&#123;key&#125;</code>  来获取，key 为等号左边的</p>\n<h2 id=\"版本管理\"><a class=\"anchor\" href=\"#版本管理\">#</a> 版本管理</h2>\n<p>关于这个版本管理解决的问题是，在 Maven 创建项目和引用别人项目的时候，都看到过如下内容:</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_01_parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>可以在 Maven 仓库地址 <code>https://mvnrepository.com/</code>  查看<br />\n这里面有两个单词，SNAPSHOT 和 RELEASE，它们所代表的含义是什么呢？</p>\n<ul>\n<li>SNAPSHOT（快照版本）\n<ul>\n<li>项目开发过程中临时输出的版本，称为快照版本</li>\n<li>快照版本会随着开发的进展不断更新</li>\n</ul>\n</li>\n<li>RELEASE（发布版本）\n<ul>\n<li>项目开发到一定阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的</li>\n<li>即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本</li>\n</ul>\n</li>\n</ul>\n<p>除了上面的工程版本，还经常能看到一些发布版本:</p>\n<ul>\n<li>alpha 版：内测版，bug 多不稳定内部版本不断添加新功能</li>\n<li>beta 版：公测版，不稳定 (比 alpha 稳定些)，bug 相对较多不断添加新功能</li>\n<li>纯数字版</li>\n</ul>\n<p>对于这些版本，简单认识下即可。</p>\n<h1 id=\"多环境配置与应用\"><a class=\"anchor\" href=\"#多环境配置与应用\">#</a> 多环境配置与应用</h1>\n<p>这一节中，会讲两个内容，分别是 <code>多环境开发</code> 和 <code>跳过测试</code></p>\n<h2 id=\"多环境开发\"><a class=\"anchor\" href=\"#多环境开发\">#</a> 多环境开发</h2>\n<p><img data-src=\"https://pic.imgdb.cn/item/632146b616f2c2beb1667b38.jpg\" alt=\"\" /></p>\n<ul>\n<li>平常都是在自己的开发环境进行开发，</li>\n<li>当开发完成后，需要把开发的功能部署到测试环境供测试人员进行测试使用，</li>\n<li>等测试人员测试通过后，会将项目部署到生成环境上线使用。</li>\n<li>这个时候就有一个问题是，不同环境的配置是不相同的，如不可能让三个环境都用一个数据库，所以就会有三个数据库的 url 配置，</li>\n<li>在项目中如何配置？</li>\n<li>要想实现不同环境之间的配置切换又该如何来实现呢？</li>\n</ul>\n<p>maven 提供配置多种环境的设定，帮助开发者在使用过程中快速切换环境。具体实现步骤:</p>\n<blockquote>\n<p>步骤 1: 父工程配置多个环境，并指定默认激活环境</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profiles</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 开发环境 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>env_dep<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdbc.url</span><span class=\"token punctuation\">></span></span>jdbc:mysql://127.1.1.1:3306/ssm_db<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jdbc.url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 设定是否为默认启动环境 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activation</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeByDefault</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeByDefault</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activation</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 生产环境 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>env_pro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdbc.url</span><span class=\"token punctuation\">></span></span>jdbc:mysql://127.2.2.2:3306/ssm_db<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jdbc.url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 测试环境 --></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>env_test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdbc.url</span><span class=\"token punctuation\">></span></span>jdbc:mysql://127.3.3.3:3306/ssm_db<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jdbc.url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profiles</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 执行 install 查看 env_dep 环境是否生效</p>\n</blockquote>\n<p>在你本地仓库找到打包的 war 包，看看 jdbc.properties 配置文件中的 url 是否为 <code>jdbc:mysql://127.1.1.1:3306/ssm_db</code> <br />\n 这时可以手动切换，如何来实现在不改变代码的前提下完成环境的切换呢？</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activation</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeByDefault</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeByDefault</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activation</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 命令行实现环境切换</p>\n</blockquote>\n<p>在命令后加上环境 id 如： <code>mvn install -P env_test</code></p>\n<blockquote>\n<p>步骤 4: 执行安装并查看 env_test 环境是否生效</p>\n</blockquote>\n<p>查看到的结果为 <code>jdbc:mysql://127.3.3.3:3306/ssm_db</code></p>\n<p>所以总结来说，对于多环境切换只需要两步即可:</p>\n<ul>\n<li>\n<p>父工程中定义多环境</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profiles</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>环境名称<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span><span class=\"token punctuation\">></span></span>value<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activation</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeByDefault</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeByDefault</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activation</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profiles</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>使用多环境 (构建过程)</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn 指令 <span class=\"token parameter variable\">-P</span> 环境定义ID<span class=\"token punctuation\">[</span>环境定义中获取<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"跳过测试\"><a class=\"anchor\" href=\"#跳过测试\">#</a> 跳过测试</h2>\n<p>前面在执行 <code>install</code>  指令的时候，Maven 都会按照顺序从上往下依次执行，每次都会执行 <code>test</code> ,</p>\n<p>对于 <code>test</code>  来说有它存在的意义，</p>\n<ul>\n<li>可以确保每次打包或者安装的时候，程序的正确性，假如测试已经通过在没有修改程序的前提下再次执行打包或安装命令，由于顺序执行，测试会被再次执行，就有点耗费时间了。</li>\n<li>功能开发过程中有部分模块还没有开发完毕，测试无法通过，但是想要把其中某一部分进行快速打包，此时由于测试环境失败就会导致打包失败。</li>\n</ul>\n<p>遇到上面这些情况的时候，就想跳过测试执行下面的构建命令，具体实现方式有很多：</p>\n<h3 id=\"方式一idea工具实现跳过测试\"><a class=\"anchor\" href=\"#方式一idea工具实现跳过测试\">#</a> 方式一：IDEA 工具实现跳过测试</h3>\n<p><img data-src=\"image-20240319204705852.png\" alt=\"\" /></p>\n<p>图中的按钮为 <code>Toggle 'Skip Tests' Mode</code> ,</p>\n<p>Toggle 翻译为切换的意思，也就是说在测试与不测试之间进行切换。点击一下，出现测试画横线的图片，说明测试已经被关闭，再次点击就会恢复</p>\n<p>这种方式最简单，但是有点 &quot;暴力&quot;，会把所有的测试都跳过，如果想更精细的控制哪些跳过哪些不跳过，就需要使用配置插件的方式。</p>\n<h3 id=\"方式二配置插件实现跳过测试\"><a class=\"anchor\" href=\"#方式二配置插件实现跳过测试\">#</a> 方式二：配置插件实现跳过测试</h3>\n<p>在父工程中的 pom.xml 中添加测试插件配置</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-surefire-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.12.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>skipTests</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>skipTests</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 排除掉不参与测试的内容 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>excludes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclude</span><span class=\"token punctuation\">></span></span>**/BookServiceTest.java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclude</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>excludes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>skipTests</code> : 如果为 true，则跳过所有测试，如果为 false，则不跳过测试</p>\n<p><code>excludes</code> ： 哪些测试类不参与测试，即排除，针对 skipTests 为 false 来设置的</p>\n<p><code>includes</code> :  哪些测试类要参与测试，即包含，针对 skipTests 为 true 来设置的</p>\n<h3 id=\"方式三命令行跳过测试\"><a class=\"anchor\" href=\"#方式三命令行跳过测试\">#</a> 方式三：命令行跳过测试</h3>\n<p>使用 Maven 的命令行， <code>mvn 指令 -D skipTests</code></p>\n<div class=\"note info no-icon\">\n<p>注意事项:</p>\n<ul>\n<li>执行的项目构建指令必须包含测试生命周期，否则无效果。例如执行 compile 生命周期，不经过 test 生命周期。</li>\n<li>该命令可以不借助 IDEA，直接使用 cmd 命令行进行跳过测试，需要注意的是 cmd 要在 pom.xml 所在目录下进行执行。</li>\n</ul>\n</div>\n<h1 id=\"私服\"><a class=\"anchor\" href=\"#私服\">#</a> 私服</h1>\n<p>这一节，主要学习的内容是:</p>\n<ul>\n<li>私服简介</li>\n<li>私服仓库分类</li>\n<li>资源上传与下载</li>\n</ul>\n<p>首先来说一说什么是私服？</p>\n<h2 id=\"私服简介\"><a class=\"anchor\" href=\"#私服简介\">#</a> 私服简介</h2>\n<p>团队开发现状分析</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/63215ba216f2c2beb17b6286.jpg\" alt=\"\" /></p>\n<ol>\n<li>张三负责 ssm_crm 的开发，自己写了一个 ssm_pojo 模块，要想使用直接将 ssm_pojo 安装到本地仓库即可</li>\n<li>李四负责 ssm_order 的开发，需要用到张三所写的 ssm_pojo 模块，这个时候如何将张三写的 ssm_pojo 模块交给李四呢？</li>\n<li>如果直接拷贝，那么团队之间的 jar 包管理会非常混乱而且容器出错，这个时候就想能不能将写好的项目上传到中央仓库，谁想用就直接联网下载即可</li>\n<li>Maven 的中央仓库不允许私人上传自己的 jar 包，那么就得换种思路，自己搭建一个类似于中央仓库的东西，把自己的内容上传上去，其他人就可以从上面下载 jar 包使用</li>\n<li>这个类似于中央仓库的东西就是接下来要学习的私服</li>\n</ol>\n<p>所以到这就有两个概念，一个是私服，一个是中央仓库</p>\n<ul>\n<li>私服：公司内部搭建的用于存储 Maven 资源的服务器</li>\n<li>远程仓库：Maven 开发团队维护的用于存储 Maven 资源的服务器</li>\n</ul>\n<p>所以说:</p>\n<ul>\n<li>私服是一台独立的服务器，用于解决团队内部的资源共享与资源同步问题</li>\n</ul>\n<p>搭建 Maven 私服的方式有很多，来介绍其中一种使用量比较大的实现方式:</p>\n<ul>\n<li>Nexus\n<ul>\n<li>Sonatype 公司的一款 maven 私服产品</li>\n<li>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLnNvbmF0eXBlLmNvbS9yZXBvbWFuYWdlcjMvZG93bmxvYWQ=\">https://help.sonatype.com/repomanager3/download</span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"私服安装\"><a class=\"anchor\" href=\"#私服安装\">#</a> 私服安装</h2>\n<p>具体参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20xODMzNjEzMjM2MS9hcnRpY2xlL2RldGFpbHMvMTIzNTgwNDI4\"> Nexus 使用</span><br />\n主要有以下步骤</p>\n<blockquote>\n<p>步骤 1: 下载解压<br />\n步骤 2: 启动 Nexus<br />\n 步骤 3: 浏览器访问<br />\n步骤 4: 首次登录重置密码</p>\n</blockquote>\n<h2 id=\"私服仓库分类\"><a class=\"anchor\" href=\"#私服仓库分类\">#</a> 私服仓库分类</h2>\n<p>私服资源操作流程分析:</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/6321630c16f2c2beb1836959.jpg\" alt=\"\" /></p>\n<ol>\n<li>在没有私服的情况下，我们自己创建的服务都是安装在 Maven 的本地仓库中</li>\n<li>私服中也有仓库，我们要把自己的资源上传到私服，最终也是放在私服的仓库中</li>\n<li>其他人要想使用你所上传的资源，就需要从私服的仓库中获取</li>\n<li>当我们要使用的资源不是自己写的，是远程中央仓库有的第三方 jar 包，这个时候就需要从远程中央仓库下载，每个开发者都去远程中央仓库下速度比较慢 (中央仓库服务器在国外)</li>\n<li>私服就再准备一个仓库，用来专门存储从远程中央仓库下载的第三方 jar 包，第一次访问没有就会去远程中央仓库下载，下次再访问就直接走私服下载</li>\n<li>前面在介绍版本管理的时候提到过有 <code>SNAPSHOT</code>  和 <code>RELEASE</code> ，如果把这两类的都放到同一个仓库，比较混乱，所以私服就把这两个种 jar 包放入不同的仓库</li>\n<li>上面我们已经介绍了有三种仓库，一种是存放 <code>SNAPSHOT</code>  的，一种是存放 <code>RELEASE</code>  还有一种是存放从远程仓库下载的第三方 jar 包，那么我们在获取资源的时候要从哪个仓库种获取呢？</li>\n<li>为了方便获取，我们将所有的仓库编成一个组，我们只需要访问仓库组去获取资源。</li>\n</ol>\n<p>所有私服仓库总共分为三大类:</p>\n<ol>\n<li>\n<p>宿主仓库 hosted</p>\n<ul>\n<li>保存无法从中央仓库获取的资源</li>\n<li>自主研发</li>\n<li>第三方非开源项目，比如 Oracle, 因为是付费产品，所以中央仓库没有</li>\n</ul>\n</li>\n<li>\n<p>代理仓库 proxy</p>\n<ul>\n<li>代理远程仓库，通过 nexus 访问其他公共仓库，例如中央仓库</li>\n</ul>\n</li>\n<li>\n<p>仓库组 group</p>\n<ul>\n<li>将若干个仓库组成一个群组，简化配置</li>\n<li>仓库组不能保存资源，属于设计型仓库</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"image-20240319210252300.png\" alt=\"\" /></p>\n<h2 id=\"本地仓库访问私服配置\"><a class=\"anchor\" href=\"#本地仓库访问私服配置\">#</a> 本地仓库访问私服配置</h2>\n<ul>\n<li>通过 IDEA 将开发的模块上传到私服，中间是要经过本地 Maven 的</li>\n<li>本地 Maven 需要知道私服的访问地址以及私服访问的用户名和密码</li>\n<li>私服中的仓库很多，Maven 最终要把资源上传到哪个仓库？</li>\n<li>Maven 下载的时候，又需要携带用户名和密码到私服上找对应的仓库组进行下载，然后再给 IDEA<br />\n<img data-src=\"image-20240319210349959.png\" alt=\"\" /><br />\n 上面所说的这些内容，需要在本地 Maven 的配置文件 <code>settings.xml</code>  中进行配置。</li>\n</ul>\n<blockquote>\n<p>步骤 1: 私服上配置仓库</p>\n</blockquote>\n<p><img data-src=\"image-20240319210516978.png\" alt=\"\" /></p>\n<p><strong>说明:</strong></p>\n<ul>\n<li>第 5，6 步骤是创建 itheima-snapshot 仓库</li>\n<li>第 7，8 步骤是创建 itheima-release 仓库</li>\n</ul>\n<blockquote>\n<p>步骤 2: 配置本地 Maven 对私服的访问权限</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>server</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>zy-snapshot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>username</span><span class=\"token punctuation\">></span></span>admin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>username</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>password</span><span class=\"token punctuation\">></span></span>password<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>password</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>server</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>server</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>zy-release<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>username</span><span class=\"token punctuation\">></span></span>admin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>username</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>password</span><span class=\"token punctuation\">></span></span>password<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>password</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>server</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servers</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 配置私服的访问路径</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrors</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 配置仓库组的 ID--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>maven-public<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">&lt;!--* 代表所有内容都从私服获取 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 私服仓库组 maven-public 的访问路径 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://localhost:8081/repository/maven-public/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrors</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>最后记得将新创建的两个仓库加入到 maven-public 的成员中，至此本地仓库就能与私服进行交互了</p>\n<h2 id=\"私服资源上传与下载\"><a class=\"anchor\" href=\"#私服资源上传与下载\">#</a> 私服资源上传与下载</h2>\n<p>本地仓库与私服已经建立了连接，接下来就需要往私服上上传资源和下载资源，具体的实现步骤为:</p>\n<blockquote>\n<p>步骤 1: 配置工程上传私服的具体位置</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 配置当前工程保存在私服中的具体位置 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>distributionManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>repository</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 和 maven/settings.xml 中 server 中的 id 一致，表示使用该 id 对应的用户名和密码 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>itheima-release<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token comment\">&lt;!--release 版本上传仓库的具体地址 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://localhost:8081/repository/itheima-release/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>repository</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>snapshotRepository</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 和 maven/settings.xml 中 server 中的 id 一致，表示使用该 id 对应的用户名和密码 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>itheima-snapshot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">&lt;!--snapshot 版本上传仓库的具体地址 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://localhost:8081/repository/itheima-snapshot/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>snapshotRepository</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>distributionManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 发布资源到私服</p>\n</blockquote>\n<p>maven 面板中运行 <code>deploy</code> ，或者执行 maven 命令 <code>mvn deploy</code></p>\n<div class=\"note info no-icon\">\n<p>注意:<br />\n 要发布的项目都需要配置 <code>distributionManagement</code>  标签，要么在自己的 pom.xml 中配置，要么在其父项目中配置，然后子项目中继承父项目即可。</p>\n</div>\n<p>发布成功，在私服中就能看到:<br />\n<img data-src=\"image-20240319210855614.png\" alt=\"\" /><br />\n 现在发布是在 itheima-snapshot 仓库中，如果想发布到 itheima-release 仓库中就需要将项目 pom.xml 中的 version 修改成 RELEASE 即可。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>zy.blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven_00_parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!--&lt;version>1.0-SNAPSHOT&lt;/version>--></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>如果私服中没有对应的 jar，会去中央仓库下载，速度很慢。可以配置让私服去阿里云中下载依赖。</p>\n<p>修改 maven-central 的 Remote storage 为 <code>http://maven.aliyun.com/nexus/content/groups/public</code></p>\n<p>至此私服的搭建步骤就结束了，相对来说有点麻烦，这一块暂时没时间复现了。有空了试试，或者工作就接触了。</p>\n",
            "tags": [
                "spring复习",
                "JAVA"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/17/spring%E5%A4%8D%E4%B9%A0/SSM%E6%95%B4%E5%90%88/",
            "url": "https://zyakmd.github.io/2024/03/17/spring%E5%A4%8D%E4%B9%A0/SSM%E6%95%B4%E5%90%88/",
            "title": "SSM整合",
            "date_published": "2024-03-17T13:05:58.000Z",
            "content_html": "<h1 id=\"ssm整合\"><a class=\"anchor\" href=\"#ssm整合\">#</a> SSM 整合</h1>\n<p>前面我们已经把 <code>Mybatis</code> 、 <code>Spring</code>  和 <code>SpringMVC</code>  三个框架进行了学习，那现在我们把这三个框架整合在一起，来完成我们的业务功能开发，具体如何来整合，我们一步步来学习。</p>\n<h2 id=\"流程分析\"><a class=\"anchor\" href=\"#流程分析\">#</a> 流程分析</h2>\n<ol>\n<li>创建工程\n<ul>\n<li>创建一个 Maven 的 web 工程</li>\n<li>pom.xml 添加 SSM 需要的依赖 jar 包</li>\n<li>编写 Web 项目的入口配置类，实现 <code>AbstractAnnotationConfigDispatcherServletInitializer</code>  重写以下方法\n<ul>\n<li><code>getRootConfigClasses()</code>  ：返回 Spring 的配置类 --&gt; 需要 <code>SpringConfig</code>  配置类</li>\n<li><code>getServletConfigClasses()</code>  ：返回 SpringMVC 的配置类 --&gt; 需要 <code>SpringMvcConfig</code>  配置类</li>\n<li><code>getServletMappings()</code>  : 设置 SpringMVC 请求拦截路径规则</li>\n<li><code>getServletFilters()</code>  ：设置过滤器，解决 POST 请求中文乱码问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SSM 整合 (重点是各个配置的编写)\n<ul>\n<li><code>SpringConfig</code>\n<ul>\n<li>标识该类为配置类，使用 <code>@Configuration</code></li>\n<li>扫描 <code>Service</code>  所在的包，使用 <code>@ComponentScan</code></li>\n<li>在 <code>Service</code>  层要管理事务，使用 <code>@EnableTransactionManagement</code></li>\n<li>读取外部的 <code>properties</code>  配置文件，使用 <code>@PropertySource</code></li>\n<li>整合 <code>Mybatis</code>  需要引入 Mybatis 相关配置类，使用 <code>@Import</code>\n<ul>\n<li>第三方数据源配置类  <code>JdbcConfig</code></li>\n<li>构建 DataSource 数据源，DruidDataSouroce，需要注入数据库连接四要素，使用  <code>@Bean</code> 、 <code>@Value</code></li>\n<li>构建平台事务管理器，DataSourceTransactionManager，使用 <code>@Bean</code></li>\n<li>Mybatis 配置类  <code>MybatisConfig</code></li>\n<li>构建 <code>SqlSessionFactoryBean</code>  并设置别名扫描与数据源，使用 <code>@Bean</code></li>\n<li>构建 <code>MapperScannerConfigurer</code>  并设置 DAO 层的包扫描</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>SpringMvcConfig</code>\n<ul>\n<li>标识该类为配置类，使用 <code>@Configuratio</code></li>\n<li>扫描 <code>Controller</code>  所在的包，使用 <code>@ComponentScan</code></li>\n<li>开启 SpringMVC 注解支持，使用 <code>@EnableWebMvc</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>功能模块 (与具体的业务模块有关)\n<ul>\n<li>创建数据库表</li>\n<li>根据数据库表创建对应的模型类</li>\n<li>通过 Dao 层完成数据库表的增删改查 (接口 + 自动代理)</li>\n<li>编写 <code>Service</code>  层 (Service 接口 + 实现类)\n<ul>\n<li><code>@Service</code></li>\n<li><code>@Transactional</code></li>\n<li>整合 Junit 对业务层进行单元测试\n<ul>\n<li><code>@RunWith</code></li>\n<li><code>@ContextConfiguration</code></li>\n<li><code>@Test</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>编写 <code>Controller</code>  层\n<ul>\n<li>接收请求  <code>@RequestMapping</code> 、 <code>@GetMapping</code> 、 <code>@PostMapping</code> 、 <code>@PutMapping</code> 、 <code>@DeleteMapping</code></li>\n<li>接收数据 简单、POJO、嵌套 POJO、集合、数组、JSON 数据类型\n<ul>\n<li><code>@RequestParam</code></li>\n<li><code>@PathVariable</code></li>\n<li><code>@RequestBody</code></li>\n</ul>\n</li>\n<li>转发业务层\n<ul>\n<li><code>@Autowired</code></li>\n</ul>\n</li>\n<li>响应结果\n<ul>\n<li><code>@ResponseBody</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"整合配置\"><a class=\"anchor\" href=\"#整合配置\">#</a> 整合配置</h2>\n<p>分析完毕之后，我们就一步步来完成我们的 SSM 整合</p>\n<ul>\n<li>\n<p>步骤一：创建 Maven 的 web 项目<br />\n<img data-src=\"image-20240317211434376.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>步骤二：导入坐标</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.46<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>\n<p>步骤 3: 创建项目包结构</p>\n<ul>\n<li>config 目录存放的是相关的配置类</li>\n<li>controller 编写的是 Controller 类</li>\n<li>dao 存放的是 Dao 接口，因为使用的是 Mapper 接口代理方式，所以没有实现类包</li>\n<li>service 存的是 Service 接口，impl 存放的是 Service 实现类</li>\n<li>resources: 存入的是配置文件，如 Jdbc.properties</li>\n<li>webapp: 目录可以存放静态资源</li>\n<li>test/java: 存放的是测试类</li>\n</ul>\n</li>\n<li>\n<p>步骤 4: 创建 SpringConfig 配置类</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SpringConfig</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"com.itheima.service\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:jdbc.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">JdbcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">MyBatisConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@EnableTransactionManagement</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 5: 创建 JdbcConfig 配置类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.driver&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driver<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.url&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.username&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.password&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">transactionManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">DataSourceTransactionManager</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 6: 创建 MybatisConfig 配置类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactoryBean</span> <span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactoryBean</span> factoryBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setTypeAliasesPackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.domain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> factoryBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MapperScannerConfigurer</span> <span class=\"token function\">mapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">MapperScannerConfigurer</span> msc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        msc<span class=\"token punctuation\">.</span><span class=\"token function\">setBasePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.dao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> msc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 7: 创建 jdbc.properties</li>\n</ul>\n<p>在 resources 下提供 jdbc.properties, 设置数据库连接四要素</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">jdbc.driver</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">jdbc.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://localhost:3306/ssm_db</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">jdbc.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">jdbc.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr></table></figure><ul>\n<li>步骤 8: 创建 SpringMVC 配置类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 9: 创建 Web 项目入口配置类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 加载 Spring 配置类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 加载 SpringMVC 配置类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 设置 SpringMVC 请求地址拦截规则</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 设置 post 请求中文乱码过滤器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">CharacterEncodingFilter</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>filter<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>至此 SSM 整合的环境就已经搭建好了。在这个环境上，我们如何进行功能模块的开发呢？</p>\n<h2 id=\"功能模块开发\"><a class=\"anchor\" href=\"#功能模块开发\">#</a> 功能模块开发</h2>\n<p><span class=\"label\">需求</span> 对表 tbl_book 进行新增、修改、删除、根据 ID 查询和查询所有</p>\n<ul>\n<li>步骤 1: 创建数据库及表</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> ssm_db <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">use</span> ssm_db<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tbl_book<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">type</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  description <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span>  <span class=\"token keyword\">into</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tbl_book<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>type<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>description<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Spring实战 第五版'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Spring入门经典教程，深入理解Spring原理技术内幕'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Spring 5核心原理与30个类手写实践'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'十年沉淀之作，手写Spring精华思想'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Spring 5设计模式'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'深入Spring源码刨析Spring源码中蕴含的10大设计模式'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Spring MVC+Mybatis开发从入门到项目实战'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'轻量级Java Web企业应用实战'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'源码级刨析Spring框架，适合已掌握Java基础的读者'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Java核心技术 卷Ⅰ 基础知识(原书第11版)'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Core Java第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'深入理解Java虚拟机'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5个纬度全面刨析JVM,大厂面试知识点全覆盖'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Java编程思想(第4版)'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Java学习必读经典，殿堂级著作！赢得了全球程序员的广泛赞誉'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">'计算机理论'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'零基础学Java(全彩版)'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">'市场营销'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'直播就这么做:主播高效沟通实战指南'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李子柒、李佳奇、薇娅成长为网红的秘密都在书中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token string\">'市场营销'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'直播销讲实战一本通'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'和秋叶一起学系列网络营销书籍'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token string\">'市场营销'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'直播带货:淘宝、天猫直播从新手到高手'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>步骤 2: 编写模型类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//getter...setter...toString 省略</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 3: 编写 Dao 接口</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    @Insert(\"insert into tbl_book values(null,#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)\")</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from tbl_book where id = #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_book where id = #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_book\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 4: 编写 Service 接口和实现类</li>\n</ul>\n<div class=\"tab\" data-id=\"ssm_mkkf\" data-title=\"BookService\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 保存</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">book</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * <span class=\"token keyword\">@return</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 修改</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">book</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * <span class=\"token keyword\">@return</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 按id删除</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">id</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * <span class=\"token keyword\">@return</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 按id查询</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">id</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * <span class=\"token keyword\">@return</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 查询全部</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * <span class=\"token keyword\">@return</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"ssm_mkkf\" data-title=\"BookServiceImpl\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<p><span class=\"label info\">说明</span></p>\n<ul>\n<li>bookDao 在 Service 中注入的会提示一个红线提示，为什么呢？\n<ul>\n<li>BookDao 是一个接口，没有实现类，接口是不能创建对象的，所以最终注入的应该是代理对象</li>\n<li>代理对象是由 Spring 的 IOC 容器来创建管理的</li>\n<li>IOC 容器又是在 Web 服务器启动的时候才会创建</li>\n<li>IDEA 在检测依赖关系的时候，没有找到适合的类注入，所以会提示错误提示</li>\n<li>但是程序运行的时候，代理对象就会被创建，框架会使用 DI 进行注入，所以程序运行无影响。</li>\n</ul>\n</li>\n<li>如何解决上述问题？\n<ul>\n<li>可以不用理会，因为运行是正常的</li>\n<li>设置错误提示级别</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>步骤 5: 编写 Contorller 类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于图书模块的增删改查就已经完成了编写，我们可以从后往前写也可以从前往后写，最终只需要能把功能实现即可。</p>\n<p>接下来我们就先把业务层的代码使用 <code>Spring</code>  整合 <code>Junit</code>  的知识点进行单元测试:</p>\n<p>## 单元测试</p>\n<ul>\n<li>步骤 1: 新建测试类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 2: 注入 Service 类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 3: 编写测试方法，先对查询进行单元测试</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> all <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>all<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行测试方法，可以查询到对应的数据</p>\n<h2 id=\"postman测试\"><a class=\"anchor\" href=\"#postman测试\">#</a> PostMan 测试</h2>\n<h3 id=\"新增\"><a class=\"anchor\" href=\"#新增\">#</a> 新增</h3>\n<p>发送 <code>POST</code>  请求与数据，访问 <code>localhost:8080/books</code></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"类别测试数据\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"书名测试数据\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"描述测试数据\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>数据库中能看到新增的数据</p>\n<h3 id=\"修改\"><a class=\"anchor\" href=\"#修改\">#</a> 修改</h3>\n<p>发送 <code>PUT</code>  请求与数据，访问 <code>localhost:8080/books</code></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"类别测试数据\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"书名测试数据\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"描述测试数据\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>数据库中能看到修改后的数据</p>\n<h3 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h3>\n<p><code>http://localhost/books/13</code></p>\n<p>发送 DELETE 请求，访问 <code>localhost:8080/books/13</code> <br />\n 数据库中能看到 id 为 13 的数据不见了</p>\n<h3 id=\"查询单个\"><a class=\"anchor\" href=\"#查询单个\">#</a> 查询单个</h3>\n<p>发送 <code>GET</code>  请求，访问 <code>localhost:8080/books/1</code> <br />\n 可以查询到 ID 为 1 的数据，在 PostMan 中表现为 JSON 数据</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring实战 第五版\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring入门经典教程，深入理解Spring原理技术内幕\"</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"查询所有\"><a class=\"anchor\" href=\"#查询所有\">#</a> 查询所有</h3>\n<p>发送 <code>GET</code>  请求，访问 <code>localhost:8080/books</code> <br />\nPostMan 中以 JSON 对象数组的形式显示了数据库中的所有数据</p>\n<h1 id=\"统一结果封装\"><a class=\"anchor\" href=\"#统一结果封装\">#</a> 统一结果封装</h1>\n<h2 id=\"表现层与前端数据传输协议定义\"><a class=\"anchor\" href=\"#表现层与前端数据传输协议定义\">#</a> 表现层与前端数据传输协议定义</h2>\n<p>SSM 整合以及功能模块开发完成后，接下来，我们在上述案例的基础上分析下有哪些问题需要我们去解决下。首先第一个问题是:</p>\n<ul>\n<li>在 Controller 层增删改返回给前端的是 boolean 类型数据 <code>true</code></li>\n<li>在 Controller 层查询单个返回给前端的是对象</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring实战 第五版\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring入门经典教程，深入理解Spring原理技术内幕\"</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>在 Controller 层查询所有返回给前端的是集合对象</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring实战 第五版\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring入门经典教程，深入理解Spring原理技术内幕\"</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring 5核心原理与30个类手写实践\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"十年沉淀之作，手写Spring精华思想\"</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ...  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>目前我们就已经有三种数据类型返回给前端，如果随着业务的增长，需要返回的数据类型会越来越多。对于前端开发人员在解析数据的时候就比较凌乱了，所以对于前端来说，如果后台能够返回一个统一的数据结果，前端在解析的时候就可以按照一种方式进行解析。开发就会变得更加简单。</p>\n<p>所以我们就想能不能将返回结果的数据进行统一，具体如何来做，大体的思路为:</p>\n<ul>\n<li>为了封装返回的结果数据:<mark> 创建结果模型类，封装数据到 data 属性中</mark></li>\n<li>为了封装返回的数据是何种操作及是否操作成功:<mark> 封装操作结果到 code 属性中</mark></li>\n<li>操作失败后为了封装返回的错误信息:<mark> 封装特殊消息到 message (msg) 属性中</mark></li>\n</ul>\n<p>根据分析，我们可以设置统一数据返回结果类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label warning\">注意</span>  Result 类名及类中的字段并不是固定的，可以根据需要自行增减提供若干个构造方法，方便操作。</p>\n<h2 id=\"表现层与前端数据传输协议实现\"><a class=\"anchor\" href=\"#表现层与前端数据传输协议实现\">#</a> 表现层与前端数据传输协议实现</h2>\n<p>前面我们已经分析了如何封装返回结果数据，现在我们来具体实现一下</p>\n<ul>\n<li>环境准备\n<ul>\n<li>创建一个 Web 的 Maven 项目</li>\n<li>pom.xml 添加 SSM 整合所需 jar 包</li>\n<li>创建对应的配置类</li>\n<li>编写 Controller、Service 接口、Service 实现类、Dao 接口和模型类</li>\n<li>resources 下提供 jdbc.properties 配置文件<br />\n和 SSM 整合的内容是一致的</li>\n</ul>\n</li>\n</ul>\n<p>对于结果封装，我们应该是在表现层进行处理，所以我们把结果类放在 controller 包下，当然你也可以放在 domain 包，这个都是可以的，具体如何实现结果封装，具体的步骤如下</p>\n<ul>\n<li>步骤 1: 创建 Result 类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 描述统一格式中的数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 描述统一格式中的编码，用于区分操作，可以简化配置 0 或 1 表示成功失败</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 描述统一格式中的消息，可选属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 构造方法是方便对象的创建</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 构造方法是方便对象的创建</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//setter...getter... 省略</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 2: 定义返回码 Code 类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 状态码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SAVE_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20011</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">DELETE_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20021</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">UPDATE_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20031</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">GET_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20041</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SAVE_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20010</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">DELETE_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20020</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">UPDATE_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20030</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">GET_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20040</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label warning\">注意</span>  code 类中的常量设计也不是固定的，可以根据需要自行增减，例如将查询再进行细分为 GET_OK,GET_ALL_OK,GET_PAGE_OK 等。</p>\n<ul>\n<li>步骤 3: 修改 Controller 类的返回值</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 统一每一个控制器方法返回值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SAVE_OK</span><span class=\"token operator\">:</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SAVE_ERR</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATE_OK</span><span class=\"token operator\">:</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATE_ERR</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE_OK</span><span class=\"token operator\">:</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE_ERR</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Integer</span> code <span class=\"token operator\">=</span> book <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_OK</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_ERR</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> book <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"数据查询失败，请重试！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span>book<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> bookList <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Integer</span> code <span class=\"token operator\">=</span> bookList <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_OK</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_ERR</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> bookList <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"数据查询失败，请重试！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span>bookList<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 4: 启动服务测试</li>\n</ul>\n<p>五个方法的测试结果如下</p>\n<div class=\"tab\" data-id=\"tyjgfz\" data-title=\"save\">\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20011</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"tyjgfz\" data-title=\"update\">\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20021</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"tyjgfz\" data-title=\"delete\">\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20031</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"tyjgfz\" data-title=\"getById\">\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20041</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring实战 第五版\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring入门经典教程，深入理解Spring原理技术内幕\"</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"tyjgfz\" data-title=\"getAll\">\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20041</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring实战 第五版\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring入门经典教程，深入理解Spring原理技术内幕\"</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring 5核心原理与30个类手写实践\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"十年沉淀之作，手写Spring精华思想\"</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring 5设计模式\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"深入Spring源码刨析Spring源码中蕴含的10大设计模式\"</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring MVC+Mybatis开发从入门到项目实战\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手\"</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"轻量级Java Web企业应用实战\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"源码级刨析Spring框架，适合已掌握Java基础的读者\"</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Java核心技术 卷Ⅰ 基础知识(原书第11版)\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Core Java第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新\"</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"深入理解Java虚拟机\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5个纬度全面刨析JVM,大厂面试知识点全覆盖\"</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Java编程思想(第4版)\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Java学习必读经典，殿堂级著作！赢得了全球程序员的广泛赞誉\"</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"零基础学Java(全彩版)\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术\"</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"市场营销\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"直播就这么做:主播高效沟通实战指南\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"李子柒、李佳奇、薇娅成长为网红的秘密都在书中\"</span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"市场营销\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"直播销讲实战一本通\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"和秋叶一起学系列网络营销书籍\"</span>  </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"市场营销\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"直播带货:淘宝、天猫直播从新手到高手\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+\"</span>  </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"类别测试数据\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"书名测试数据9527\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"描述测试数据\"</span>  </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"类别测试数据\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"书名测试数据\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"描述测试数据\"</span>  </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"类别测试数据\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"书名测试数据\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"描述测试数据\"</span>  </pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>  </pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<p>至此，我们的返回结果就已经能以一种统一的格式返回给前端。前端根据返回的结果，先从中获取 <code>code</code> , 根据 code 判断，如果成功则取 <code>data</code>  属性的值，如果失败，则取 <code>msg</code>  中的值做提示。</p>\n<h1 id=\"统一异常处理\"><a class=\"anchor\" href=\"#统一异常处理\">#</a> 统一异常处理</h1>\n<h2 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<p>在讲解这一部分知识点之前，我们先来演示个效果，修改 BookController 类的 <code>getById</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 手动添加一个错误信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Integer</span> code <span class=\"token operator\">=</span> book <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_OK</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_ERR</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> book <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"数据查询失败，请重试！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span>book<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重新启动运行项目，使用 PostMan 发送请求，当传入的 id 为 1，则会出现如下效果：</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/631c97e516f2c2beb1326946.jpg\" alt=\"\" /></p>\n<p>前端接收到这个信息后和之前我们约定的格式不一致，这个问题该如何解决？</p>\n<p>在解决问题之前，我们先来看下异常的种类及出现异常的原因:</p>\n<ul>\n<li>框架内部抛出的异常：因使用不合规导致</li>\n<li>数据层抛出的异常：因外部服务器故障导致（例如：服务器访问超时）</li>\n<li>业务层抛出的异常：因业务逻辑书写错误导致（例如：遍历业务书写操作，导致索引异常等）</li>\n<li>表现层抛出的异常：因数据收集、校验等规则导致（例如：不匹配的数据类型间导致异常）</li>\n<li>工具类抛出的异常：因工具类书写不严谨不够健壮导致（例如：必要释放的连接长期未释放等）</li>\n</ul>\n<p>看完上面这些出现异常的位置，你会发现，在我们开发的任何一个位置都有可能出现异常，而且这些异常是不能避免的。所以我们就得将异常进行处理。</p>\n<p><strong>思考</strong></p>\n<ol>\n<li>各个层级均出现异常，异常处理代码书写在哪一层？\n<ul>\n<li>所有的异常均抛出到表现层进行处理</li>\n</ul>\n</li>\n<li>异常的种类很多，表现层如何将所有的异常都处理到呢？\n<ul>\n<li>异常分类</li>\n</ul>\n</li>\n<li>表现层处理异常，每个方法中单独书写，代码书写量巨大且意义不强，如何解决？\n<ul>\n<li>AOP</li>\n</ul>\n</li>\n</ol>\n<p>对于上面这些问题及解决方案，SpringMVC 已经为我们提供了一套解决方案:</p>\n<ul>\n<li>异常处理器:</li>\n<li>集中的、统一的处理项目中出现的异常。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectExceptionAdvice</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">doException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"异常处理器的使用\"><a class=\"anchor\" href=\"#异常处理器的使用\">#</a> 异常处理器的使用</h2>\n<h3 id=\"环境准备\"><a class=\"anchor\" href=\"#环境准备\">#</a> 环境准备</h3>\n<ul>\n<li>创建一个 Web 的 Maven 项目</li>\n<li>pom.xml 添加 SSM 整合所需 jar 包</li>\n<li>创建对应的配置类</li>\n<li>编写 Controller、Service 接口、Service 实现类、Dao 接口和模型类</li>\n<li>resources 下提供 jdbc.properties 配置文件</li>\n</ul>\n<p>内容参考前面的项目或者直接使用前面的项目进行本节内容的学习。</p>\n<p>最终创建好的项目结构如下:</p>\n<h3 id=\"使用步骤\"><a class=\"anchor\" href=\"#使用步骤\">#</a> 使用步骤</h3>\n<ul>\n<li>步骤 1: 创建异常处理器类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//@RestControllerAdvice 用于标识当前类为 REST 风格对应的异常处理器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectExceptionAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 除了自定义的异常处理器，保留对 Exception 类型的异常处理，用于处理非预期的异常</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这有个异常！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><mark>确保 SpringMvcConfig 能够扫描到异常处理器类</mark></p>\n<ul>\n<li>步骤 2: 让程序抛出异常</li>\n</ul>\n<p>修改 <code>BookController</code>  的 getById 方法，添加 <code>int i = 1/0</code> .</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  \t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Integer</span> code <span class=\"token operator\">=</span> book <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_OK</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET_ERR</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> book <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"数据查询失败，请重试！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span>book<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 3：运行程序，测试</li>\n</ul>\n<p>使用 <code>PostMan</code>  发送 <code>GET</code>  请求访问 <code>localhost:8080/books/1</code> <br />\n 控制台输出了 <code>doException</code>  中的语句，说明异常已经被拦截，且执行了 <code>doException()</code>  方法</p>\n<ul>\n<li>步骤 4：异常处理器类返回结果给前端</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//@RestControllerAdvice 用于标识当前类为 REST 风格对应的异常处理器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectExceptionAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 除了自定义的异常处理器，保留对 Exception 类型的异常处理，用于处理非预期的异常</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">doException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这有个异常！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"这有个异常！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重启服务器，让 postman 发送请求</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">666</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"这有个异常！\"</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>至此，就算后台执行的过程中抛出异常，最终也能按照我们和前端约定好的格式返回给前端。</p>\n<h3 id=\"知识点\"><a class=\"anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<p><code>@RestControllerAdvice</code></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@RestControllerAdvice</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>类注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>Rest 风格开发的控制器增强类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>为 Rest 风格开发的控制器类做增强</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"label info\">说明</span>  此注解自带 @ResponseBody 注解与 @Component 注解，具备对应的功能</p>\n<p><code>@ExceptionHandler</code></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@ExceptionHandler</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>方法注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>专用于异常处理的控制器方法上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置指定异常的处理方案，功能等同于控制器方法，&lt;br/&gt; 出现异常后终止原始控制器执行，并转入当前方法执行</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"label info\">说明</span> 此类方法可以根据处理的异常不同，制作多个方法分别处理对应的异常</p>\n<h2 id=\"项目异常处理方案\"><a class=\"anchor\" href=\"#项目异常处理方案\">#</a> 项目异常处理方案</h2>\n<h3 id=\"异常分类\"><a class=\"anchor\" href=\"#异常分类\">#</a> 异常分类</h3>\n<p>异常处理器已经能够使用了，那么在项目中该如何来处理异常呢？</p>\n<p>因为异常的种类有很多，如果每一个异常都对应一个 @ExceptionHandler，那得写多少个方法来处理各自的异常，所以我们在处理异常之前，需要对异常进行一个分类:</p>\n<ul>\n<li><code>业务异常</code> （BusinessException）\n<ul>\n<li>规范的用户行为产生的异常\n<ul>\n<li>用户在页面输入内容的时候未按照指定格式进行数据填写，如在年龄框输入的是字符串</li>\n</ul>\n</li>\n<li>不规范的用户行为操作产生的异常\n<ul>\n<li>如用户手改 URL，故意传递错误数据 <code>localhost:8080/books/略略略</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>系统异常</code> （SystemException）\n<ul>\n<li>项目运行过程中可预计，但无法避免的异常\n<ul>\n<li>如服务器宕机</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>其他异常</code> （Exception）\n<ul>\n<li>编程人员未预期到的异常\n<ul>\n<li>如：系统找不到指定文件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>将异常分类以后，针对不同类型的异常，要提供具体的解决方案:</p>\n<h3 id=\"异常解决方案\"><a class=\"anchor\" href=\"#异常解决方案\">#</a> 异常解决方案</h3>\n<ul>\n<li><code>业务异常</code> （BusinessException）\n<ul>\n<li>发送对应消息传递给用户，提醒规范操作\n<ul>\n<li>大家常见的就是提示用户名已存在或密码格式不正确等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>系统异常</code> （SystemException）\n<ul>\n<li>发送固定消息传递给用户，安抚用户\n<ul>\n<li>系统繁忙，请稍后再试</li>\n<li>系统正在维护升级，请稍后再试</li>\n<li>系统出问题，请联系系统管理员等</li>\n</ul>\n</li>\n<li>发送特定消息给运维人员，提醒维护\n<ul>\n<li>可以发送短信、邮箱或者是公司内部通信软件</li>\n</ul>\n</li>\n<li>记录日志\n<ul>\n<li>发消息给运维和记录日志对用户来说是不可见的，属于后台程序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>其他异常</code> （Exception）\n<ul>\n<li>发送固定消息传递给用户，安抚用户</li>\n<li>发送特定消息给编程人员，提醒维护（纳入预期范围内）\n<ul>\n<li>一般是程序没有考虑全，比如未做非空校验等</li>\n</ul>\n</li>\n<li>记录日志</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"具体实现\"><a class=\"anchor\" href=\"#具体实现\">#</a> 具体实现</h3>\n<p>思路:</p>\n<ol>\n<li>先通过自定义异常，完成 BusinessException 和 SystemException 的定义</li>\n<li>将其他异常包装成自定义异常类型</li>\n<li>在异常处理器类中对不同的异常进行处理</li>\n</ol>\n<ul>\n<li>步骤 1: 自定义异常类</li>\n</ul>\n<div class=\"tab\" data-id=\"ecp\" data-title=\"SystemException\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SystemException</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自定义异常处理器，用于封装异常信息，对异常进行分类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SystemException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SystemException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SystemException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"ecp\" data-title=\"BusinessException\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BusinessException</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自定义异常处理器，用于封装异常信息，对异常进行分类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BusinessException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"note info no-icon\">\n<p>说明:</p>\n<ul>\n<li>让自定义异常类继承 <code>RuntimeException</code>  的好处是，后期在抛出这两个异常的时候，就不用在 try...catch... 或 throws 了</li>\n<li>自定义异常类中添加 <code>code</code>  属性的原因是为了更好的区分异常是来自哪个业务的</li>\n</ul>\n</div>\n<ul>\n<li>步骤 2: 将其他异常包成自定义异常</li>\n</ul>\n<p>假如在 BookServiceImpl 的 getById 方法抛异常了，该如何来包装呢？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 模拟业务异常，包装成自定义异常</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BUSINESS_ERR</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"不要查看他人隐私!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 模拟系统异常，将可能出现的异常进行包装，转换成自定义异常</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SystemException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SYSTEM_TIMEOUT_ERR</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"服务器访问超时，请重试!\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>具体的包装方式有：</p>\n<ul>\n<li>方式一: <code>try&#123;&#125;catch()&#123;&#125;</code>  在 catch 中重新 throw 我们自定义异常即可。</li>\n<li>方式二：直接 throw 自定义异常即可</li>\n</ul>\n<p>上面为了使 <code>code</code>  看着更专业些，我们在 Code 类中再新增需要的属性</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 状态码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SAVE_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20011</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">DELETE_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20021</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">UPDATE_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20031</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">GET_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">20041</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SAVE_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20010</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">DELETE_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20020</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">UPDATE_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20030</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">GET_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">20040</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SYSTEM_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">50001</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SYSTEM_TIMEOUT_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">50002</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">SYSTEM_UNKNOW_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">59999</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">BUSINESS_ERR</span> <span class=\"token operator\">=</span> <span class=\"token number\">60002</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 3: 处理器类中处理自定义异常</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//@RestControllerAdvice 用于标识当前类为 REST 风格对应的异常处理器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectExceptionAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//@ExceptionHandler 用于设置当前处理器类对应的异常类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SystemException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">doSystemException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SystemException</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 记录日志</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 发送消息给运维</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 发送邮件给开发人员，ex 对象发送给开发人员</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">doBusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessException</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 除了自定义的异常处理器，保留对 Exception 类型的异常处理，用于处理非预期的异常</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">doOtherException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 记录日志</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 发送消息给运维</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 发送邮件给开发人员，ex 对象发送给开发人员</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SYSTEM_UNKNOW_ERR</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"系统繁忙，请稍后再试！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤 4: 运行程序</li>\n</ul>\n<p>根据 ID 查询，</p>\n<p>如果传入的参数为 1，会报 <code>BusinessException</code></p>\n<p>如果传入的是其他参数，会报 <code>SystemException</code></p>\n<p>对于异常我们就已经处理完成了，不管后台哪一层抛出异常，都会以我们与前端约定好的方式进行返回，前端只需要把信息获取到，根据返回的正确与否来展示不同的内容即可。</p>\n<p>以后项目中的异常处理方式为:<br />\n<img data-src=\"https://pic.imgdb.cn/item/631d597316f2c2beb1d20ccd.jpg\" alt=\"\" /></p>\n<h1 id=\"前后台协议联调\"><a class=\"anchor\" href=\"#前后台协议联调\">#</a> 前后台协议联调</h1>\n<h2 id=\"环境准备-2\"><a class=\"anchor\" href=\"#环境准备-2\">#</a> 环境准备</h2>\n<ul>\n<li>创建一个 Web 的 Maven 项目</li>\n<li>pom.xml 添加 SSM 整合所需 jar 包</li>\n<li>创建对应的配置类</li>\n<li>编写 Controller、Service 接口、Service 实现类、Dao 接口和模型类</li>\n<li>resources 下提供 jdbc.properties 配置文件</li>\n</ul>\n<p>内容参考前面的项目或者直接使用前面的项目进行本节内容的学习。</p>\n<ul>\n<li>将 <code>资料\\SSM功能页面</code> 下面的静态资源拷贝到 webapp 下</li>\n<li>因为添加了静态资源，SpringMVC 会拦截，所有需要在 SpringConfig 的配置类中将静态资源进行放行。</li>\n</ul>\n<ul>\n<li>\n<p>新建 SpringMvcSupport，继承 <code>WebMvcConfigurationSupport</code> ，并重写 <code>addResourceHandlers()</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcSupport</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebMvcConfigurationSupport</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addResourceHandlers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceHandlerRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pages/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pages/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/css/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/css/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/js/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/js/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/plugins/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/plugins/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 SpringMvcConfig 中扫描 SpringMvcSupport 配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"com.itheima.config\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"页面分析\"><a class=\"anchor\" href=\"#页面分析\">#</a> 页面分析</h2>\n<p>在完成增删改查操作之前，我们先来看看给我们提供的页面源码</p>\n<div class=\"tab\" data-id=\"ymfx\" data-title=\"源码\">\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 页面 meta --></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>SpringMVC案例<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入样式 --></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../plugins/elementui/index.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../plugins/font-awesome/css/font-awesome.min.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../css/style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hold-transition<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>图书管理<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filter-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名称<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filter-item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dalfBut<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查询<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>butT<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>openSave()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>新建<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>small<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">current-row-key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stripe</span> <span class=\"token attr-name\">highlight-current-row</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>序号<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书类别<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名称<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>描述<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>操作<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot-scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scope<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>编辑<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-pagination</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagiantion<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token attr-name\">@current-change</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleCurrentChange<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        <span class=\"token attr-name\">:current-page</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination.currentPage<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        <span class=\"token attr-name\">:page-size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination.pageSize<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                        <span class=\"token attr-name\">layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>total, prev, pager, next, jumper<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        <span class=\"token attr-name\">:total</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination.total<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-pagination</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 新增标签弹层 --></span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add-form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-dialog</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>新增图书<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:visible.sync</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dialogFormVisible<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataAddForm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formData<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:rules</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rules<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label-position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                             <span class=\"token attr-name\">label-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100px<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-row</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-col</span> <span class=\"token attr-name\">:span</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>12<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书类别<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formData.type<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-col</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-col</span> <span class=\"token attr-name\">:span</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>12<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名称<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formData.name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-col</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-row</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-row</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-col</span> <span class=\"token attr-name\">:span</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>24<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>描述<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formData.description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>textarea<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-col</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-row</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dialog-footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dialogFormVisible = false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>取消<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>saveBook()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>确定<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-dialog</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">&lt;!-- 引入组件库 --></span>  </pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../plugins/elementui/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/jquery.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/axios-0.18.0.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">  </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">var</span> vue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token literal-property property\">dataList</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 当前页要展示的分页列表数据  </span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token literal-property property\">formData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 表单数据  </span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token literal-property property\">dialogFormVisible</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 增加表单是否可见  </span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token literal-property property\">dialogFormVisible4Edit</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 编辑表单是否可见  </span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token literal-property property\">pagination</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 分页模型数据，暂时弃用  </span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">// 钩子函数，VUE 对象初始化完成后自动执行  </span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token comment\">// 重置表单  </span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token function\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token comment\">// 弹出添加窗口  </span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token function\">openSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token comment\">// 添加  </span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token function\">saveBook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token comment\">// 主页列表查询  </span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"138\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"ymfx\" data-title=\"页头\">\n<p>这部分有一个 <code>input输入框</code> ，一个 <code>查询按钮</code> 和一个 <code>新建按钮</code> <br />\n由于本案例没有查询业务，故未给查询按钮绑定事件<br />\n而新建按钮则绑定了一个 <code>openSave()</code>  函数，后面我们会分析</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filter-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名称<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filter-item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dalfBut<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查询<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>butT<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>openSave()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>新建<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"ymfx\" data-title=\"表格\">\n<p>表格绑定的 Model 是 <code>dataList</code> <br />\nid 不需要在页面显示，图书 <code>类型</code>  / <code>名称</code>  / <code>描述</code> 分别绑定了 <code>type</code> / <code>name</code> / <code>description</code>  属性<br />\n编辑和删除按钮暂时还没有绑定点击事件，待会儿我们自己来做</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>small<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">current-row-key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stripe</span> <span class=\"token attr-name\">highlight-current-row</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>序号<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书类别<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名称<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>描述<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>操作<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot-scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scope<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>编辑<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"ymfx\" data-title=\"新增按钮弹出框\">\n<p>当点击新增按钮时的对话框，在 JavaWeb 课程的最后项目中已经用过了，<br />\n第二行的 <code>dialogFormVisible</code>  控制该 dialog 是否显示<br />\n第三行的 <code>:model=&quot;formData&quot;</code>  表示该对话框绑定模型的是 <code>formData</code> <br />\n 最后还有 <code>取消</code> 和 <code>确定</code> 两个按钮，<br />\n取消按钮绑定点击事件为 <code>dialogFormVisible = false</code> ，也就是关闭对话框<br />\n确定按钮绑定的是 <code>saveBook()</code> ，见名知意，当我们点击确定按钮时，图书就执行新增函数</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-pagination</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagiantion<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token attr-name\">@current-change</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleCurrentChange<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token attr-name\">:current-page</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination.currentPage<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token attr-name\">:page-size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination.pageSize<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token attr-name\">layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>total, prev, pager, next, jumper<span class=\"token punctuation\">\"</span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token attr-name\">:total</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination.total<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-pagination</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"ymfx\" data-title=\"data\">\n<p>下面我们来看看 data 区都提供了什么模型<br />\n <code>dataList</code> ：我们主体的表格就绑定的是它<br />\n <code>formData</code> ：新增按钮弹出的对话框绑定的就是它<br />\n <code>dialogFormVisible</code> ：控制增加表单是否课件<br />\n <code>dialogFormVisible4Edit</code> ：控制编辑表单是否可见</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">dataList</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 当前页要展示的分页列表数据  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">formData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 表单数据  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">dialogFormVisible</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 增加表单是否可见  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">dialogFormVisible4Edit</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 编辑表单是否可见  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">pagination</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 分页模型数据，暂时弃用  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"ymfx\" data-title=\"钩子函数\">\n<p>不出意外的话，当 VUE 初始化之后，我们就该展示数据了，调用 <code>getAll()</code>  函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 钩子函数，VUE 对象初始化完成后自动执行  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"ymfx\" data-title=\"method\">\n<p>最后就是一些函数</p>\n<ul>\n<li>弹出编辑窗口</li>\n<li>编辑</li>\n<li>删除</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 重置表单  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 弹出添加窗口  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">openSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 添加  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">saveBook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 主页列表查询  </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<h2 id=\"列表功能\"><a class=\"anchor\" href=\"#列表功能\">#</a> 列表功能</h2>\n<p>接下来我们就需要将所有的列表查询、新增、修改、删除等功能一个个来实现下</p>\n<blockquote>\n<p>需求：页面加载完后发送异步请求到后台获取列表数据进行展示。</p>\n<ol>\n<li>找到页面的钩子函数， <code>created()</code></li>\n<li><code>created()</code>  方法中调用了 <code>this.getAll()</code>  方法</li>\n<li>在 getAll () 方法中使用 axios 发送异步请求从后台获取数据</li>\n<li>访问的路径为 <code>http://localhost/books</code></li>\n<li>返回数据</li>\n</ol>\n</blockquote>\n<p>返回数据 res.data 的内容如下:</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring实战 第五版\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring入门经典教程，深入理解Spring原理技术内幕\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring 5核心原理与30个类手写实践\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"十年沉淀之作，手写Spring精华思想\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>...</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20041</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>res.data</code>  表示获取的 <code>Result</code>  对象，而 <code>Result</code>  对象的 <code>data</code>  属性才是真正的数据<br />\n也就是将 <code>Rusult.data</code>  赋给了 <code>this.dataList</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 发送 ajax 请求</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dataList</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在钩子函数中直接调用 <code>getAll()</code>  即可</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"添加功能\"><a class=\"anchor\" href=\"#添加功能\">#</a> 添加功能</h2>\n<blockquote>\n<p>需求：完成新增功能模块</p>\n<ol>\n<li>找到页面上的 <code>新建</code> 按钮，按钮上绑定了 <code>@click=&quot;handleCreate()&quot;</code>  方法</li>\n<li>在 method 中找到 <code>handleCreate</code>  方法，方法中打开新增面板</li>\n<li>新增面板中找到 <code>确定</code> 按钮，按钮上绑定了 <code>@click=&quot;handleAdd()&quot;</code>  方法</li>\n<li>在 method 中找到 <code>handleAdd</code>  方法</li>\n<li>在方法中发送请求和数据，响应成功后将新增面板关闭并重新查询数据</li>\n</ol>\n</blockquote>\n<p><code>handleCreate</code>  打开新增面板</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">handleCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dialogFormVisible</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p><code>handleAdd</code>  方法发送异步请求并携带数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">handleAdd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 发送 ajax 请求</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//this.formData 是表单中的数据，最后是一个 json 数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">formData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dialogFormVisible</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"添加功能状态处理\"><a class=\"anchor\" href=\"#添加功能状态处理\">#</a> 添加功能状态处理</h2>\n<p>基础的新增功能已经完成，但是还有一些问题需要解决下:</p>\n<blockquote>\n<p>需求：新增成功是关闭面板，重新查询数据，那么新增失败以后该如何处理？</p>\n<ol>\n<li>在 handlerAdd 方法中根据后台返回的数据来进行不同的处理</li>\n<li>如果后台返回的是成功，则提示成功信息，并关闭面板</li>\n<li>如果后台返回的是失败，则提示错误信息</li>\n</ol>\n</blockquote>\n<ol>\n<li>修改前端页面</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">handleAdd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 发送 ajax 请求</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">formData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 如果操作成功，关闭弹层，显示数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span> <span class=\"token operator\">==</span> <span class=\"token number\">20011</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dialogFormVisible</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span> <span class=\"token operator\">==</span> <span class=\"token number\">20010</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>后台返回操作结果，将 Dao 层的增删改方法返回值从 <code>void</code>  改成 <code>int</code> ，如果添加失败，int 值为 0，添加成功则 int 值为显示受影响的行数</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    @Insert(\"insert into tbl_book values(null,#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)\")</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from tbl_book where id = #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_book where id = #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_book\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>在 BookServiceImpl 中，增删改方法根据 DAO 的返回值来决定返回 true/false，如果受影响的行大于 0，则添加成功，否则添加失败</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Code</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BUSINESS_ERR</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"请不要使用你的技术挑战我的耐性!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//        // 将可能出现的异常进行包装，转换成自定义异常</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//        try&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//            int i = 1/0;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//        &#125;catch (Exception e)&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//            throw new SystemException (Code.SYSTEM_TIMEOUT_ERR,\"服务器访问超时，请重试！\",e);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>处理完新增后，会发现新增还存在一个问题，</p>\n<p>新增成功后，再次点击 <code>新增</code> 按钮会发现之前的数据还存在，这个时候就需要在新增的时候将表单内容清空。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">formData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">handleCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dialogFormVisible</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试成功<img data-src=\"image-20240318210046286.png\" alt=\"\" /></p>\n<h2 id=\"修改功能\"><a class=\"anchor\" href=\"#修改功能\">#</a> 修改功能</h2>\n<blockquote>\n<p>需求：完成图书信息的修改功能</p>\n<ol>\n<li>找到页面中的 <code>编辑</code> 按钮，该按钮绑定了 <code>@click=&quot;handleUpdate(scope.row)&quot;</code></li>\n<li>在 method 的 <code>handleUpdate</code>  方法中发送异步请求根据 ID 查询图书信息</li>\n<li>根据后台返回的结果，判断是否查询成功<br />\n​如果查询成功打开修改面板回显数据，如果失败提示错误信息</li>\n<li>修改完成后找到修改面板的 <code>确定</code> 按钮，该按钮绑定了 <code>@click=&quot;handleEdit()&quot;</code></li>\n<li>在 method 的 <code>handleEdit</code>  方法中发送异步请求提交修改数据</li>\n<li>根据后台返回的结果，判断是否修改成功<br />\n​如果成功提示错误信息，关闭修改面板，重新查询数据，如果失败提示错误信息</li>\n</ol>\n</blockquote>\n<ul>\n<li><code>scope.row</code>  代表的是当前行的行数据，也就是说，scope.row 就是选中行对应的 json 数据，如下:</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机理论\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring实战 第五版\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spring入门经典教程，深入理解Spring原理技术内幕\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>修改 <code>handleUpdate</code>  方法</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 弹出编辑窗口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">handleUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//console.log (row);   //row.id 查询条件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 查询数据，根据 id 查询</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books/\"</span><span class=\"token operator\">+</span>row<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span> <span class=\"token operator\">==</span> <span class=\"token number\">20041</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 展示弹层，加载数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">formData</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dialogFormVisible4Edit</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>修改 <code>handleEdit</code>  方法</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">handleEdit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 发送 ajax 请求</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">formData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 如果操作成功，关闭弹层，显示数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span> <span class=\"token operator\">==</span> <span class=\"token number\">20031</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dialogFormVisible4Edit</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span> <span class=\"token operator\">==</span> <span class=\"token number\">20030</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"删除功能\"><a class=\"anchor\" href=\"#删除功能\">#</a> 删除功能</h2>\n<blockquote>\n<p>需求：完成页面的删除功能。</p>\n<ol>\n<li>找到页面的删除按钮，按钮上绑定了 <code>@click=&quot;handleDelete(scope.row)&quot;</code></li>\n<li>method 的 <code>handleDelete</code>  方法弹出提示框</li>\n<li>用户点击取消，提示操作已经被取消。</li>\n<li>用户点击确定，发送异步请求并携带需要删除数据的主键 ID</li>\n<li>根据后台返回结果做不同的操作<br />\n如果返回成功，提示成功信息，并重新查询数据<br />\n如果返回失败，提示错误信息，并重新查询数据</li>\n</ol>\n</blockquote>\n<p>修改 <code>handleDelete</code>  方法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">handleDelete</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//1. 弹出提示框</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">$confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"此操作永久删除当前数据，是否继续？\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"提示\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">'info'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//2. 做删除业务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books/\"</span><span class=\"token operator\">+</span>row<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span> <span class=\"token operator\">==</span> <span class=\"token number\">20021</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//3. 取消删除</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取消删除操作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试 ok，并且删完后会后续 id 自动缩进，应该是 mysql 默认设置？</p>\n<ul>\n<li>我就说复习 mysql 没这个的印象，并没有，数据库中实际 id 没改变。上面实现的只是返回列表 <code>List&lt;Book&gt; bookList = bookService.getAll()</code> <br />\n<img data-src=\"image-20240318210306030.png\" alt=\"\" /><br />\n<img data-src=\"image-20240318210325889.png\" alt=\"\" /><br />\n 在 html 中 <code>&lt;el-table-column type=&quot;index&quot; align=&quot;center&quot; label=&quot;序号&quot;&gt;&lt;/el-table-column&gt;</code>  打印的是 index，列表的序号。但换成了 id 也还是这样，没摸着头脑</li>\n<li>type... 没改，应该是 <code>prop=&quot;id&quot;</code>  从配置中读取<br />\n<img data-src=\"image-20240318211321926.png\" alt=\"\" /><br />\n ok，其他也都测试了，功能实现通过</li>\n</ul>\n<h1 id=\"拦截器\"><a class=\"anchor\" href=\"#拦截器\">#</a> 拦截器</h1>\n<h2 id=\"拦截器概念\"><a class=\"anchor\" href=\"#拦截器概念\">#</a> 拦截器概念</h2>\n<p>看图说话<br />\n<img data-src=\"https://pic.imgdb.cn/item/631e964416f2c2beb1ece79e.jpg\" alt=\"\" /></p>\n<ol>\n<li>浏览器发送一个请求，会先到 Tomcat 服务器的 web 服务器</li>\n<li>Tomcat 服务器接收到请求后，会先去判断请求的是 <code>静态资源</code> 还是 <code>动态资源</code></li>\n<li>如果是静态资源，会直接到 Tomcat 的项目部署目录下直接访问</li>\n<li>如果是动态资源，就需要交给项目的后台代码进行处理</li>\n<li>在找到具体的方法之前，我们可以去配置过滤器（可以配置多个），按照顺序进行执行（在这里就可以进行权限校验）</li>\n<li>然后进入到中央处理器（SpringMVC 中的内容），SpringMVC 会根据配置的规则进行拦截</li>\n<li>如果满足规则，则进行处理，找到其对应的 <code>Controller</code>  类中的方法进行之星，完成后返回结果</li>\n<li>如果不满足规则，则不进行处理</li>\n<li>这个时候，如果我们需要在每个 Controller 方法执行的前后添加业务，具体该如何来实现？\n<ul>\n<li>这个就是拦截器要做的事</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>拦截器（Interceptor）是一种动态拦截方法调用的机制，在 SpringMVC 中动态拦截控制器方法的执行\n<ul>\n<li><code>作用：</code>\n<ul>\n<li>在指定的方法调用前后执行预先设定的代码</li>\n<li>阻止原始方法的执行</li>\n</ul>\n</li>\n<li><code>总结：</code> 拦截器就是用来作增强</li>\n</ul>\n</li>\n<li>但是这个拦截器貌似跟我们之前学的过滤器很像啊，不管是从作用上来看还是从执行顺序上来看\n<ul>\n<li>那么拦截器和过滤器之间的区别是什么呢？\n<ul>\n<li><code>归属不同：</code> Filter 属于 Servlet 技术，而 Interceptor 属于 SpringMVC 技术</li>\n<li><code>拦截内容不同：</code> Filter 对所有访问进行增强，Interceptor 仅对 SpringMVC 的访问进行增强</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://pic.imgdb.cn/item/631e9b5416f2c2beb1f1d381.jpg\" alt=\"\" /></p>\n<h2 id=\"拦截器入门案例\"><a class=\"anchor\" href=\"#拦截器入门案例\">#</a> 拦截器入门案例</h2>\n<h3 id=\"环境准备-3\"><a class=\"anchor\" href=\"#环境准备-3\">#</a> 环境准备</h3>\n<ul>\n<li>\n<p>创建一个 Web 的 Maven 项目</p>\n</li>\n<li>\n<p>pom.xml 添加 SSM 整合所需 jar 包</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>fold</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springmvc_12_interceptor<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>war<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-compiler-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span><span class=\"token punctuation\">></span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>target</span><span class=\"token punctuation\">></span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>target</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>创建对应的配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 乱码处理</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">CharacterEncodingFilter</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>filter<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建模型类 Book</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Book&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token string\">\"书名='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token string\">\", 价格=\"</span> <span class=\"token operator\">+</span> price <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 Controller</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book save...\"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book delete...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book update...\"</span><span class=\"token operator\">+</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book update'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getById...\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book getById'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getAll...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book getAll'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"拦截器开发\"><a class=\"anchor\" href=\"#拦截器开发\">#</a> 拦截器开发</h3>\n<blockquote>\n<p>步骤 1: 创建拦截器类</p>\n</blockquote>\n<p>在 <code>com.xx.controller.interceptor</code>  下创建 <code>ProjectInterceptor</code>  类，实现 <code>HandlerInterceptor</code>  接口，并重写其中的三个方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 定义拦截器类，实现 HandlerInterceptor 接口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 注意当前类必须受 Spring 容器控制</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 原始方法调用前执行的内容</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preHandle...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 原始方法调用后执行的内容</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndView</span> modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postHandle...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 原始方法调用完成后执行的内容</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterCompletion...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label warning\">注意</span> 拦截器类要被 SpringMVC 容器扫描到。</p>\n<blockquote>\n<p>步骤 2: 配置拦截器类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcSupport</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebMvcConfigurationSupport</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ProjectInterceptor</span> projectInterceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addResourceHandlers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceHandlerRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pages/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pages/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 配置拦截器，拦截路径是 /books，只会拦截 /books，拦截不到 /books/1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>projectInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3:SpringMVC 添加 SpringMvcSupport 包扫描</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"com.itheima.config\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 运行程序测试</p>\n</blockquote>\n<ul>\n<li>使用 PostMan 发送请求给 <code>localhost:8080/books</code> ，控制台输出如下，说明已经成功拦截 `</li>\n</ul>\n<div class=\"note info no-icon\">\n<p>preHandle<br />\nbook update …Book {书名 =‘书名测试数据 111’, 价格 = 0.0}<br />\npostHandle<br />\nafterCompletion</p>\n</div>\n<ul>\n<li>使用 PostMan 发送请求给 <code>localhost:8080/books/111</code> ，控制台输出如下，说明没有拦截。因为拦截路径是 /books，只会拦截 /books，拦截不到 /books/x。若想拦截，则继续修改拦截器的拦截规则</li>\n</ul>\n<div class=\"note info no-icon\">\n<p>book getById …9527</p>\n</div>\n<blockquote>\n<p>步骤 5: 修改拦截器拦截规则</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcSupport</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebMvcConfigurationSupport</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ProjectInterceptor</span> projectInterceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addResourceHandlers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceHandlerRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pages/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pages/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 配置拦截器，查看源码发现，参数是个可变形参，可以设置任意多个拦截路径</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tregistry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>projectInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/books/*\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个时候，如果再次访问 <code>http://localhost/books/x</code> ，拦截器就会被执行。</p>\n<p>最后说一件事，就是拦截器中的 <code>preHandler</code>  方法，如果返回 true, 则代表放行，会执行原始 Controller 类中要请求的方法，如果返回 false，则代表拦截，后面的就不会再执行了。</p>\n<blockquote>\n<p>步骤 6: 简化 SpringMvcSupport 的编写</p>\n</blockquote>\n<p>我们可以让 <code>SpringMvcConfig</code>  类实现 <code>WebMvcConfigurer</code>  接口，然后直接在 <code>SpringMvcConfig</code>  中写 <code>WebMvcConfigurationSupport</code>  的东西，这样我们就不用再写 <code>SpringMvcSupport</code>  类了，全都在 <code>SpringMvcConfig</code>  中写</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 实现 WebMvcConfigurer 接口可以简化开发，但具有一定的侵入性</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ProjectInterceptor</span> projectInterceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 配置多拦截器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>projectInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/books/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此后咱们就不用再写 <code>SpringMvcSupport</code>  类了。</p>\n<p>最后我们来看下拦截器的执行流程:</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/631ebfbd16f2c2beb1165a09.jpg\" alt=\"\" /></p>\n<ul>\n<li>当有拦截器后，请求会先进入 preHandle 方法\n<ul>\n<li>如果方法返回 true，则放行继续执行后面的 handle (controller 的方法) 和后面的方法</li>\n<li>如果返回 false，则直接跳过后面方法的执行。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"拦截器参数\"><a class=\"anchor\" href=\"#拦截器参数\">#</a> 拦截器参数</h2>\n<h3 id=\"前置处理方法\"><a class=\"anchor\" href=\"#前置处理方法\">#</a> 前置处理方法</h3>\n<p>原始方法之前运行 preHandle</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                         <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                         <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preHandle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>request: 请求对象</li>\n<li>response: 响应对象</li>\n<li>handler: 被调用的处理器对象，本质上是一个方法对象，对反射中的 Method 对象进行了再包装</li>\n</ul>\n<p>使用 request 对象可以获取请求数据中的内容，如获取请求头的 <code>Content-Type</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> contentType <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preHandle...\"</span><span class=\"token operator\">+</span>contentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 handler 参数，可以获取方法的相关信息</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">HandlerMethod</span> hm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerMethod</span><span class=\"token punctuation\">)</span>handler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> hm<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可以获取方法的名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preHandle...\"</span><span class=\"token operator\">+</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>控制台输出如下，成功输出了方法名 <code>save</code></p>\n<div class=\"note info no-icon\">\n<p>preHandle…save<br />\nbook save …Book {书名 =‘书名测试数据’, 价格 = 0.0}<br />\npostHandle<br />\nafterCompletion</p>\n</div>\n<h3 id=\"后置处理方法\"><a class=\"anchor\" href=\"#后置处理方法\">#</a> 后置处理方法</h3>\n<p>原始方法运行后运行，如果原始方法被拦截，则不执行</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                       <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                       <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                       <span class=\"token class-name\">ModelAndView</span> modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postHandle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>前三个参数和上面的是一致的。</p>\n<p><code>modelAndView</code> : 如果处理器执行完成具有返回结果，可以读取到对应数据与页面信息，并进行调整</p>\n<p>因为咱们现在都是返回 json 数据，所以该参数的使用率不高。</p>\n<h3 id=\"完成处理方法\"><a class=\"anchor\" href=\"#完成处理方法\">#</a> 完成处理方法</h3>\n<p>拦截器最后执行的方法，无论原始方法是否执行</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                            <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterCompletion\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>前三个参数与上面的是一致的。</p>\n<p><code>ex</code> : 如果处理器执行过程中出现异常对象，可以针对异常情况进行单独处理</p>\n<p>因为我们现在已经有全局异常处理器类，所以该参数的使用率也不高。</p>\n<p>这三个方法中，最常用的是 <code>preHandle</code> , 在这个方法中可以通过返回值来决定是否要进行放行，我们可以把业务逻辑放在该方法中，如果满足业务则返回 true 放行，不满足则返回 false 拦截。</p>\n<h2 id=\"拦截器链配置\"><a class=\"anchor\" href=\"#拦截器链配置\">#</a> 拦截器链配置</h2>\n<p>目前，我们在项目中只添加了一个拦截器，如果有多个，该如何配置？配置多个后，执行顺序是什么？</p>\n<h3 id=\"配置多个拦截器\"><a class=\"anchor\" href=\"#配置多个拦截器\">#</a> 配置多个拦截器</h3>\n<blockquote>\n<p>步骤 1: 创建拦截器类</p>\n</blockquote>\n<p>实现接口，并重写接口中的方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectInterceptor2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preHandle...222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndView</span> modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postHandle...222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterCompletion...222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 配置拦截器类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 实现 WebMvcConfigurer 接口可以简化开发，但具有一定的侵入性</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ProjectInterceptor</span> projectInterceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ProjectInterceptor2</span> projectInterceptor2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 配置多拦截器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>projectInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/books/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>projectInterceptor2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/books/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 运行程序，观察顺序</p>\n</blockquote>\n<div class=\"note info no-icon\">\n<p>preHandle…<br />\npreHandle…222<br />\nbook getById …9527<br />\npostHandle…222<br />\npostHandle<br />\nafterCompletion…222<br />\nafterCompletion</p>\n</div>\n<p>拦截器执行的顺序是和配置顺序有关。就和前面所提到的运维人员进入机房的案例，先进后出。</p>\n<ul>\n<li>当配置多个拦截器时，形成拦截器链</li>\n<li>拦截器链的运行顺序参照拦截器添加顺序为准</li>\n<li>当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行</li>\n<li>当拦截器运行中断，仅运行配置在前面的拦截器的 afterCompletion 操作<br />\n<img data-src=\"https://pic.imgdb.cn/item/631ecaa216f2c2beb121be79.jpg\" alt=\"\" /></li>\n</ul>\n<p>preHandle：与配置顺序相同，必定运行<br />\n postHandle: 与配置顺序相反，可能不运行<br />\n afterCompletion: 与配置顺序相反，可能不运行</p>\n",
            "tags": [
                "spring复习",
                "JAVA"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/15/spring%E5%A4%8D%E4%B9%A0/Spring%20MVC/",
            "url": "https://zyakmd.github.io/2024/03/15/spring%E5%A4%8D%E4%B9%A0/Spring%20MVC/",
            "title": "Spring MVC",
            "date_published": "2024-03-15T07:19:51.000Z",
            "content_html": "<p>SpringMVC 隶属于 Spring，是 Spring 技术中的一部分。那么 SpringMVC 到底是用来做什么的呢？</p>\n<ul>\n<li>回想 web 阶段，我们学习过 Servlet, 而 SpringMVC 与 Servlet 技术功能等同，均属于 web 层或者说表现层开发技术。</li>\n</ul>\n<p>那么既然已经有了 Servlet 为什么还需要花时间再学习一个 SpringMVC 技术？要回答这个问题，我们就需要搞清楚 SpringMVC 与 Servlet 相比，有什么优势:</p>\n<p>框架我们都知道是用来简化开发的，所以 SpringMVC 与 Servlet 相比，开发起来更简单快捷，用更少的代码完成表现层代码的开发，那么问题又来了，到底有多简单呢？我们通过一个例子来体验一把吧。</p>\n<p>对于 SpringMVC 的学习，最终要达成的目标:</p>\n<ol>\n<li><mark>掌握基于 SpringMVC 获取请求参数和响应 json 数据操作</mark></li>\n<li><mark>熟练应用基于 REST 风格的请求路径设置与参数传递</mark></li>\n<li>能够根据实际业务建立前后端开发通信协议并进行实现</li>\n<li><mark>基于 SSM 整合技术开发任意业务模块功能</mark></li>\n</ol>\n<h1 id=\"springmvc概述\"><a class=\"anchor\" href=\"#springmvc概述\">#</a> SpringMVC 概述</h1>\n<p><img data-src=\"https://dingyue.ws.126.net/2022/1010/dbbd2e51j00rjip2d0018d000vb00h7p.jpg\" alt=\"\" /></p>\n<ul>\n<li>浏览器发送一个请求给后端服务器，后端服务器现在是使用 Servlet 来接收请求和数据</li>\n<li>如果所有的处理都交给 Servlet 来处理的话，所有的东西都耦合在一起，对后期的维护和扩展极为不利</li>\n<li>将后端服务器 Servlet 拆分成三层，分别是 <code>web</code> 、 <code>service</code>  和 <code>dao</code>\n<ul>\n<li>web 层主要由 servlet 来处理，负责页面请求和数据的收集以及响应结果给前端</li>\n<li>service 层主要负责业务逻辑的处理</li>\n<li>dao 层主要负责数据的增删改查操作</li>\n</ul>\n</li>\n<li>servlet 处理请求和数据的时候，存在的问题是一个 servlet 只能处理一个请求\n<ul>\n<li>针对 web 层进行了优化，采用了 MVC 设计模式，将其设计为 <code>controller</code> 、 <code>view</code>  和 <code>Model</code></li>\n<li>controller 负责请求和数据的接收，接收后将其转发给 service 进行业务处理</li>\n<li>service 根据需要会调用 dao 对数据进行增删改查</li>\n<li>dao 把数据处理完后将结果交给 service,service 再交给 controller</li>\n<li>controller 根据需求组装成 Model 和 View,Model 和 View 组合起来生成页面转发给前端浏览器</li>\n<li>这样做的好处就是 controller 可以处理多个请求，并对请求进行分发，执行不同的业务操作。</li>\n</ul>\n</li>\n</ul>\n<p>随着互联网的发展，上面的模式因为是同步调用，性能慢慢的跟不是需求，所以异步调用慢慢的走到了前台，是现在比较流行的一种处理方式。</p>\n<p><img data-src=\"https://dingyue.ws.126.net/2022/1010/dbbd2e51j00rjip2d0018d000vb00h7p.jpg\" alt=\"\" /></p>\n<ul>\n<li>因为是异步调用，所以后端不需要返回 View 视图，将其去除</li>\n<li>前端如果通过异步调用的方式进行交互，后端就需要将返回的数据转换成 JSON 格式进行返回</li>\n<li>SpringMVC 主要负责的就是\n<ul>\n<li>controller 如何接收请求和数据</li>\n<li>如何将请求和数据转发给业务层</li>\n<li>如何将响应数据转换成 JSON 发挥到前端</li>\n</ul>\n</li>\n<li>SpringMVC 是一种基于 Java 实现 MVC 模型的轻量级 Web 框架\n<ul>\n<li>优点\n<ul>\n<li>使用简单、开发快捷（相比较于 Servlet）</li>\n<li>灵活性强</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"springmvc入门案例\"><a class=\"anchor\" href=\"#springmvc入门案例\">#</a> SpringMVC 入门案例</h1>\n<p>因为 SpringMVC 是一个 Web 框架，将来是要替换 Servlet, 所以先来回顾下以前 Servlet 是如何进行开发的？</p>\n<ol>\n<li>创建 web 工程 (Maven 结构)</li>\n<li>设置 tomcat 服务器，加载 web 工程 (tomcat 插件)</li>\n<li>导入坐标 (Servlet)</li>\n<li>定义处理请求的功能类 (UserServlet)</li>\n<li>设置请求映射 (配置映射关系)</li>\n</ol>\n<p>SpringMVC 的制作过程和上述流程几乎是一致的，具体的实现流程是什么？</p>\n<ol>\n<li>创建 web 工程 (Maven 结构)</li>\n<li>设置 tomcat 服务器，加载 web 工程 (tomcat 插件)</li>\n<li>导入坐标 (SpringMVC+Servlet)</li>\n<li>定义处理请求的功能类 (UserController)</li>\n<li>设置请求映射 (配置映射关系)</li>\n<li>将 SpringMVC 设定加载到 Tomcat 容器中</li>\n</ol>\n<h2 id=\"流程\"><a class=\"anchor\" href=\"#流程\">#</a> 流程</h2>\n<blockquote>\n<p>步骤 1: 创建 Maven 项目</p>\n</blockquote>\n<p>打开 IDEA, 创建一个新的 web 项目</p>\n<blockquote>\n<p>步骤 2: 导入 jar 包</p>\n</blockquote>\n<p>将 pom.xml 中多余的内容删除掉，再添加 SpringMVC 需要的依赖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modelVersion<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modelVersion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>zy<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>mvcTest<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>properties<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>maven<span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">></span></span><span class=\"token number\">16</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>maven<span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span>source<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>maven<span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">></span></span><span class=\"token number\">16</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>maven<span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span>target<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>properties<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>javax<span class=\"token punctuation\">.</span>servlet<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>javax<span class=\"token punctuation\">.</span>servlet<span class=\"token operator\">-</span>api<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">3.1</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span>provided<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>webmvc<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">5.3</span><span class=\"token number\">.23</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>build<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>plugins<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>plugin<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>tomcat<span class=\"token punctuation\">.</span>maven<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>tomcat7<span class=\"token operator\">-</span>maven<span class=\"token operator\">-</span>plugin<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>configuration<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>port<span class=\"token punctuation\">></span></span><span class=\"token number\">80</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>port<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>path<span class=\"token punctuation\">></span></span><span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>path<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>configuration<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>plugin<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>plugins<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>build<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>说明:</strong> servlet 的坐标为什么需要添加 <code>&lt;scope&gt;provided&lt;/scope&gt;</code> ?</p>\n<ul>\n<li>\n<p>scope 是 maven 中 jar 包依赖作用范围的描述，</p>\n</li>\n<li>\n<p>如果不设置默认是 <code>compile</code>  在在编译、运行、测试时均有效</p>\n</li>\n<li>\n<p>如果运行有效的话就会和 tomcat 中的 servlet-api 包发生冲突，导致启动报错</p>\n</li>\n<li>\n<p>provided 代表的是该包只在编译和测试的时候用，运行的时候无效直接使用 tomcat 中的，就避免冲突</p>\n</li>\n</ul>\n<blockquote>\n<p>步骤 3: 创建配置类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 创建 Controller 类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 5: 使用配置类替换 web.xml</p>\n</blockquote>\n<p>将 web.xml 删除，换成 ServletContainersInitConfig</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 加载 springmvc 配置类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createServletApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 初始化 WebApplicationContext 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 加载指定配置类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 设置由 springmvc 控制器处理的请求映射路径</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 加载 spring 配置类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createRootApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 6: 配置 Tomcat 环境<br />\n<img data-src=\"image-20240315204710259.png\" alt=\"\" /><br />\n步骤 7: 启动运行项目</p>\n</blockquote>\n<p>首先遇到了<img data-src=\"image-20240315204739123.png\" alt=\"\" /><br />\n添加 <code>&lt;ignorePackaging&gt;true&lt;/ignorePackaging&gt; </code> 解决</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ignorePackaging</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ignorePackaging</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>然后没有正常建 webapp 项目的错 <code>src\\main\\webapp does not exist or is not a readable directory</code> <br />\n 手动添加<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81NjMyNDE0MS9hcnRpY2xlL2RldGFpbHMvMTIzODk2OTM1\">参考</span>，然后正常跑起<br />\n<img data-src=\"image-20240315205907872.png\" alt=\"\" /></p>\n<blockquote>\n<p>步骤 8: 浏览器访问</p>\n</blockquote>\n<p>浏览器输入 <code>http://localhost/save</code>  进行访问，会报如下错误:<br />\n<img data-src=\"image-20240315210024930.png\" alt=\"\" /><br />\n 页面报错的原因是后台没有指定返回的页面，目前只需要关注控制台看 <code>user save ...</code>  有没有被执行即可。<br />\n<img data-src=\"image-20240315210036175.png\" alt=\"\" /></p>\n<blockquote>\n<p>步骤 9: 修改 Controller 返回值解决上述问题</p>\n</blockquote>\n<p>前面我们说过现在主要的是前端发送异步请求，后台响应 json 数据，所以接下来我们把 Controller 类的 save 方法进行修改</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'info':'springmvc'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再次重启 tomcat 服务器，然后重新通过浏览器测试访问，会发现还是会报错，这次的错是 404<br />\n<img data-src=\"image-20240315210249865.png\" alt=\"\" /><br />\n 出错的原因是，如果方法直接返回字符串，springmvc 会把字符串当成页面的名称在项目中进行查找返回，因为不存在对应返回值名称的页面，所以会报 404 错误，找不到资源。</p>\n<p>而我们其实是想要直接返回的是 json 数据，具体如何修改呢？ <code>@ResponseBody</code></p>\n<blockquote>\n<p>步骤 10: 设置返回数据为 json</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'info':'springmvc'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"tomcat本地问题\"><a class=\"anchor\" href=\"#tomcat本地问题\">#</a> tomcat 本地问题</h2>\n<p>再次重启 tomcat 服务器，然后重新通过浏览器测试访问，就能看到返回的结果数据<br />\n又遇到问题，可能我的 16 太高了，总之下面问题的说法都是更改 tomcat 的版本（确保有导入 javax.servlet）<br />\n<img data-src=\"image-20240315210800360.png\" alt=\"\" /><br />\n <code>org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.NoSuchMethodError: 'void javax.servlet.http.HttpServletResponse.setContentLengthLong(long)'</code> <br />\n 然而 pom 里面的 Tomcat 依赖只有到 7 版本的，高的就要调用本地的，步骤<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYzOTMwNTkyL2FydGljbGUvZGV0YWlscy8xMjczNDQzMjE=\">参考</span>：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1d4eTk3MTEyMi9hcnRpY2xlL2RldGFpbHMvMTIzNTA4NTMy\">idea 安装 tomcat</span></p>\n<p>换本地后地址也变了 <code>http://localhost:8080/mvcTest_war_exploded/save</code> ， <code>mvcTest_war_exploded</code>  应该是跟我的 tomcat 配置的时候有关，总之是成了<br />\n<img data-src=\"image-20240315213444179.png\" alt=\"\" /></p>\n<p>SSM 后续，实际开发不能带项目名，不然 <code>@RequestMapping</code>  映射的地址也要变，在 idea 的 tomcat 设置的 <code>deployment</code>  中，将 <code>application context</code>  改为 <code>/</code> <br />\n 以及 tomcat 的输出<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MzE2ODAwMC9hcnRpY2xlL2RldGFpbHMvMTIwMzc2MTY4\">乱码问题解决</span></p>\n<p><strong>注意事项</strong></p>\n<ul>\n<li>SpringMVC 是基于 Spring 的，在 pom.xml 只导入了 <code>spring-webmvc</code> jar 包的原因是它会自动依赖 spring 相关坐标</li>\n<li>AbstractDispatcherServletInitializer 类是 SpringMVC 提供的快速初始化 Web3.0 容器的抽象类</li>\n<li>AbstractDispatcherServletInitializer 提供了三个接口方法供用户实现\n<ul>\n<li>createServletApplicationContext 方法，用来加载 SpringMVC 环境。创建 Servlet 容器时，加载 SpringMVC 对应的 bean 并放入 WebApplicationContext 对象范围中，而 WebApplicationContext 的作用范围为 ServletContext 范围，即整个 web 容器范围</li>\n<li>getServletMappings 方法，设定 SpringMVC 对应的请求映射路径，即 SpringMVC 拦截哪些请求</li>\n<li>createRootApplicationContext 方法，用来加载 Spring 环境。如果创建 Servlet 容器时需要加载非 SpringMVC 对应的 bean, 使用当前方法进行，使用方式和 createServletApplicationContext 相同。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>\n<p>一次性工作</p>\n<ul>\n<li>创建工程，设置服务器，加载工程</li>\n<li>导入坐标</li>\n<li>创建 web 容器启动类，加载 SpringMVC 配置，并设置 SpringMVC 请求拦截路径</li>\n<li>SpringMVC 核心配置类（设置配置类，扫描 controller 包，加载 Controller 控制器 bean）</li>\n</ul>\n</li>\n<li>\n<p>多次工作</p>\n<ul>\n<li>定义处理请求的控制器类</li>\n<li>定义处理请求的控制器方法，并配置映射路径（@RequestMapping）与返回 json 数据（@ResponseBody）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"流程解析\"><a class=\"anchor\" href=\"#流程解析\">#</a> 流程解析</h2>\n<p>为了更好的使用 SpringMVC, 我们将 SpringMVC 的使用过程总共分两个阶段来分析，分别是 <code>启动服务器初始化过程</code> 和 <code>单次请求过程</code></p>\n<h3 id=\"启动服务器初始化过程\"><a class=\"anchor\" href=\"#启动服务器初始化过程\">#</a> 启动服务器初始化过程</h3>\n<ol>\n<li>服务器启动，执行 ServletContainersInitConfig 类，初始化 web 容器\n<ul>\n<li>功能类似于以前的 web.xml</li>\n</ul>\n</li>\n<li>执行 createServletApplicationContext 方法，创建了 WebApplicationContext 对象\n<ul>\n<li>该方法加载 SpringMVC 的配置类 SpringMvcConfig 来初始化 SpringMVC 的容器</li>\n</ul>\n</li>\n<li>加载 SpringMvcConfig 配置类</li>\n<li>执行 @ComponentScan 加载对应的 bean\n<ul>\n<li>扫描指定包及其子包下所有类上的注解，如 Controller 类上的 @Controller 注解</li>\n</ul>\n</li>\n<li>加载 UserController，每个 @RequestMapping 的名称对应一个具体的方法\n<ul>\n<li>此时就建立了  <code>/save</code>  和 save 方法的对应关系</li>\n</ul>\n</li>\n<li>执行 getServletMappings 方法，设定 SpringMVC 拦截请求的路径规则\n<ul>\n<li><code>/</code>  代表所拦截请求的路径规则，只有被拦截后才能交给 SpringMVC 来处理请求</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"单次请求过程\"><a class=\"anchor\" href=\"#单次请求过程\">#</a> 单次请求过程</h3>\n<ol>\n<li>发送请求 <code>http://localhost/save</code></li>\n<li>web 容器发现该请求满足 SpringMVC 拦截规则，将请求交给 SpringMVC 处理</li>\n<li>解析请求路径 /save</li>\n<li>由 /save 匹配执行对应的方法 save (）\n<ul>\n<li>上面的第五步已经将请求路径和方法建立了对应关系，通过 /save 就能找到对应的 save 方法</li>\n</ul>\n</li>\n<li>执行 save ()</li>\n<li>检测到有 @ResponseBody 直接将 save () 方法的返回值作为响应体返回给请求方</li>\n</ol>\n<h3 id=\"bean加载控制\"><a class=\"anchor\" href=\"#bean加载控制\">#</a> Bean 加载控制</h3>\n<h4 id=\"问题分析\"><a class=\"anchor\" href=\"#问题分析\">#</a> 问题分析</h4>\n<p>入门案例的内容已经做完了，在入门案例中我们创建过一个 <code>SpringMvcConfig</code>  的配置类，在之前学习 Spring 的时候也创建过一个配置类 <code>SpringConfig</code> 。这两个配置类都需要加载资源，那么它们分别都需要加载哪些内容？</p>\n<p>我们先来回顾一下项目结构<br />\n <code>com.blog</code>  下有 <code>config</code> 、 <code>controller</code> 、 <code>service</code> 、 <code>dao</code>  这四个包</p>\n<ul>\n<li><code>config</code>  目录存入的是配置类，写过的配置类有:\n<ul>\n<li>ServletContainersInitConfig</li>\n<li>SpringConfig</li>\n<li>SpringMvcConfig</li>\n<li>JdbcConfig</li>\n<li>MybatisConfig</li>\n</ul>\n</li>\n<li><code>controller</code>  目录存放的是 <code>SpringMVC</code>  的 <code>controller</code>  类</li>\n<li><code>service</code>  目录存放的是 <code>service</code>  接口和实现类</li>\n<li><code>dao</code>  目录存放的是 <code>dao/Mapper</code>  接口</li>\n</ul>\n<p>controller、service 和 dao 这些类都需要被容器管理成 bean 对象，那么到底是该让 <code>SpringMVC</code>  加载还是让 <code>Spring</code>  加载呢？</p>\n<ul>\n<li><code>SpringMVC</code>  控制的 bean\n<ul>\n<li>表现层 bean, 也就是 <code>controller</code>  包下的类</li>\n</ul>\n</li>\n<li><code>Spring</code>  控制的 bean\n<ul>\n<li>业务 bean ( <code>Service</code> )</li>\n<li>功能 bean ( <code>DataSource</code> , <code>SqlSessionFactoryBean</code> , <code>MapperScannerConfigurer</code>  等)</li>\n</ul>\n</li>\n</ul>\n<p>分析清楚谁该管哪些 bean 以后，接下来要解决的问题是如何让 <code>Spring</code>  和 <code>SpringMVC</code>  分开加载各自的内容。<br />\n在 SpringMVC 的配置类 <code>SpringMvcConfig</code>  中使用注解 <code>@ComponentScan</code> ，我们只需要将其扫描范围设置到 controller 即可，如:  <code>@ComponentScan(&quot;com.zy.controller&quot;)</code> ，但 <code>SpringConfig</code>  会 <code>@ComponentScan(&quot;com.zy&quot;)</code>  涵盖，从包结构来看的话，Spring 已经多把 SpringMVC 的 controller 类也给扫描到，所以针对这个问题该如何解决，就是咱们接下来要学习的内容。</p>\n<p>概括的描述下咱们现在的问题就是<mark>因为功能不同，如何避免 Spring 错误加载到 SpringMVC 的 bean?</mark></p>\n<h4 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析</h4>\n<p>对于上面的问题，解决方案也比较简单</p>\n<ul>\n<li>加载 Spring 控制的 bean 的时候， <code>排除掉</code>  SpringMVC 控制的 bean</li>\n</ul>\n<p>那么具体该如何实现呢？</p>\n<ul>\n<li>方式一：Spring 加载的 bean 设定扫描范围 <code>com.blog</code> ，排除掉 <code>controller</code>  包内的 bean</li>\n<li>方式二：Spring 加载的 bean 设定扫描范围为精确扫描，具体到 <code>service</code>  包， <code>dao</code>  包等</li>\n<li>方式三：不区分 Spring 与 SpringMVC 的环境，加载到同一个环境中 ( <code>了解即可</code> )</li>\n</ul>\n<h4 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h4>\n<p>创建一个 Web 的 Maven 项目</p>\n<ul>\n<li>\n<p>pom.xml 添加 Spring 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springmvc_02_bean_load<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>war<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.47<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>创建对应的配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createServletApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createRootApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 Controller，Service，Dao，Domain 类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'info':'springmvc'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user service ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into tbl_user(name,age)values(#&#123;name&#125;,#&#123;age&#125;)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">//setter..getter..toString 略</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>配置目录如下<img data-src=\"image-20240316213641853.png\" alt=\"\" /></p>\n<h4 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h4>\n<blockquote>\n<p>方式一：修改 Spring 配置类，设定扫描范围为精准范围。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"com.itheima.service\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"comitheima.dao\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>说明:</strong></p>\n<p>上述只是通过例子说明可以精确指定让 Spring 扫描对应的包结构，真正在做开发的时候，因为 Dao 最终是交给 <code>MapperScannerConfigurer</code>  对象来进行扫描处理的，我们只需要将其扫描到 service 包即可。</p>\n<blockquote>\n<p>方式二：修改 Spring 配置类，设定扫描范围为 com.itheima, 排除掉 controller 包中的 bean</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    excludeFilters<span class=\"token operator\">=</span><span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \ttype <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANNOTATION</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        classes <span class=\"token operator\">=</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>excludeFilters 属性：设置扫描加载 bean 时，排除的过滤规则</p>\n</li>\n<li>\n<p>type 属性：设置排除规则，当前使用按照 bean 定义时的注解类型进行排除</p>\n<ul>\n<li>ANNOTATION：按照注解排除</li>\n<li>ASSIGNABLE_TYPE: 按照指定的类型过滤</li>\n<li>ASPECTJ: 按照 Aspectj 表达式排除，基本上不会用</li>\n<li>REGEX: 按照正则表达式排除</li>\n<li>CUSTOM: 按照自定义规则排除</li>\n</ul>\n<p>大家只需要知道第一种 ANNOTATION 即可</p>\n</li>\n<li>\n<p>classes 属性：设置排除的具体注解类，当前设置排除 @Controller 定义的 bean</p>\n</li>\n</ul>\n<p>如何测试 controller 类已经被排除掉了？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果被排除了，该方法执行就会报 bean 未被定义的错误<br />\n<mark>注意：测试的时候，需要把 SpringMvcConfig 配置类上的 @ComponentScan 注解注释掉，否则不会报错</mark></p>\n<p>出现问题的原因是，</p>\n<ul>\n<li>Spring 配置类扫描的包是 <code>com.itheima</code></li>\n<li>SpringMVC 的配置类， <code>SpringMvcConfig</code>  上有一个 @Configuration 注解，也会被 Spring 扫描到</li>\n<li>SpringMvcConfig 上又有一个 @ComponentScan，把 controller 类又给扫描进来了</li>\n<li>所以如果不把 @ComponentScan 注释掉，Spring 配置类将 Controller 排除，但是因为扫描到 SpringMVC 的配置类，又将其加载回来，演示的效果就出不来</li>\n<li>解决方案，也简单，把 SpringMVC 的配置类移出 Spring 配置类的扫描范围即可。</li>\n</ul>\n<p>最后一个问题，有了 Spring 的配置类，要想在 tomcat 服务器启动将其加载，我们需要修改 ServletContainersInitConfig</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createServletApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createRootApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于上述的配置方式，Spring 还提供了一种更简单的配置方式，可以不用再去创建 <code>AnnotationConfigWebApplicationContext</code>  对象，不用手动 <code>register</code>  对应的配置类，如何实现？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"postman工具的使用\"><a class=\"anchor\" href=\"#postman工具的使用\">#</a> PostMan 工具的使用</h1>\n<p>代码编写完后，我们要想测试，只需要打开浏览器直接输入地址发送请求即可。发送的是 <code>GET</code>  请求可以直接使用浏览器，但是如果要发送的是 <code>POST</code>  请求呢？</p>\n<p>如果要求发送的是 post 请求，我们就得准备页面在页面上准备 form 表单，测试起来比较麻烦。所以我们就需要借助一些第三方工具，如 PostMan.</p>\n<h1 id=\"请求与响应\"><a class=\"anchor\" href=\"#请求与响应\">#</a> 请求与响应</h1>\n<p>前面我们已经完成了入门案例相关的知识学习，接来了我们就需要针对 SpringMVC 相关的知识点进行系统的学习，之前我们提到过，SpringMVC 是 web 层的框架，主要的作用是接收请求、接收数据、响应结果，所以这一章节是学习 SpringMVC 的<mark>重点</mark>内容，我们主要会讲解四部分内容:</p>\n<ul>\n<li>请求映射路径</li>\n<li>请求参数</li>\n<li>日期类型参数传递</li>\n<li>响应 json 数据</li>\n</ul>\n<h2 id=\"设置请求映射路径\"><a class=\"anchor\" href=\"#设置请求映射路径\">#</a> 设置请求映射路径</h2>\n<h3 id=\"环境准备\"><a class=\"anchor\" href=\"#环境准备\">#</a> 环境准备</h3>\n<ul>\n<li>\n<p>创建一个 Web 的 Maven 项目</p>\n</li>\n<li>\n<p>pom.xml 添加 Spring 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springmvc_03_request_mapping<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>war<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>创建对应的配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 BookController 和 UserController</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user delete ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>把环境准备好后，启动 Tomcat 服务器，后台会报错:<br />\n<img data-src=\"image-20240317170926590.png\" alt=\"\" /></p>\n<p>从错误信息可以看出:</p>\n<ul>\n<li>UserController 有一个 save 方法，访问路径为 <code>http://localhost/save</code></li>\n<li>BookController 也有一个 save 方法，访问路径为 <code>http://localhost/save</code></li>\n<li>当访问 <code>http://localhost/saved</code>  的时候，到底是访问 UserController 还是 BookController?</li>\n</ul>\n<p>解决思路：为不同模块设置模块名作为请求路径前置</p>\n<ul>\n<li>对于 Book 模块的 save, 将其访问路径设置 <code>http://localhost/book/save</code></li>\n<li>对于 User 模块的 save, 将其访问路径设置 <code>http://localhost/user/save</code></li>\n</ul>\n<h3 id=\"设置映射路径\"><a class=\"anchor\" href=\"#设置映射路径\">#</a> 设置映射路径</h3>\n<blockquote>\n<p>步骤 1: 修改 Controller</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/delete\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user delete ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>问题是解决了，但是每个方法前面都需要进行修改，写起来比较麻烦而且还有很多重复代码，如果 /user 后期发生变化，所有的方法都需要改，耦合度太高。</p>\n<blockquote>\n<p>步骤 2: 优化路径配置</p>\n</blockquote>\n<p>优化方案:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user delete ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意:</strong></p>\n<ul>\n<li>当类上和方法上都添加了 <code>@RequestMapping</code>  注解，前端发送请求的时候，要和两个注解的 value 值相加匹配才能访问到。</li>\n<li>@RequestMapping 注解 value 属性前面加不加 <code>/</code>  都可以</li>\n</ul>\n<h2 id=\"请求参数\"><a class=\"anchor\" href=\"#请求参数\">#</a> 请求参数</h2>\n<p>请求路径设置好后，只要确保页面发送请求地址和后台 Controller 类中配置的路径一致，就可以接收到前端的请求，接收到请求后，如何接收页面传递的参数？</p>\n<p>关于请求参数的传递与接收是和请求方式有关系的，目前比较常见的两种请求方式为：</p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n</ul>\n<p>针对于不同的请求前端如何发送，后端如何接收？</p>\n<details class=\"info\"><summary>环境准备</summary><div>\n<ul>\n<li>\n<p>创建一个 Web 的 Maven 项目</p>\n</li>\n<li>\n<p>pom.xml 添加 Spring 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springmvc_03_request_mapping<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>war<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>创建对应的配置类</p>\n<pre><code class=\"language-java\"></code></pre>\n</li>\n</ul>\n<p>public class ServletContainersInitConfig extends AbstractAnnotationConfigDispatcherServletInitializer &#123;</p>\n<pre><code>  protected Class&lt;?&gt;[] getServletConfigClasses() &#123;\n      return new Class[]&#123;SpringMvcConfig.class&#125;;\n  &#125;\n  protected String[] getServletMappings() &#123;\n      return new String[]&#123;&quot;/&quot;&#125;;\n  &#125;\n  protected Class&lt;?&gt;[] getRootConfigClasses() &#123;\n      return new Class[0];\n  &#125;\n</code></pre>\n<p>}</p>\n<p>@Configuration<br />\n@ComponentScan(&quot;com.itheima.controller&quot;)<br />\npublic class SpringMvcConfig {<br />\n}</p>\n<pre><code>\n- 编写UserController\n```java\n@Controller\npublic class UserController &#123;\n\n    @RequestMapping(&quot;/commonParam&quot;)\n    @ResponseBody\n    public String commonParam()&#123;\n        return &quot;&#123;'module':'commonParam'&#125;&quot;;\n    &#125;\n&#125;\n</code></pre>\n<ul>\n<li>编写模型类，User 和 Address<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> province<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//setter...getter... 略</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//setter...getter... 略</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</div></details>\n<h3 id=\"参数传递\"><a class=\"anchor\" href=\"#参数传递\">#</a> 参数传递</h3>\n<p>最开始入门案例有提到我用的本地 tomcat 所以路径和黑马教程的略微不同，结构是这么回事，具体根据自己的情况调整请求</p>\n<h4 id=\"get发送单个参数\"><a class=\"anchor\" href=\"#get发送单个参数\">#</a> GET 发送单个参数</h4>\n<p>发送请求与参数:</p>\n<pre><code>http://localhost/commonParam?name=itcast\n</code></pre>\n<p>接收参数：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/commonParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">commonParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通参数传递 name ==> \"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'commonParam'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"get发送多个参数\"><a class=\"anchor\" href=\"#get发送多个参数\">#</a> GET 发送多个参数</h4>\n<p>发送请求与参数:</p>\n<pre><code>http://localhost/commonParam?name=itcast&amp;age=15\n</code></pre>\n<p>接收参数：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/commonParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">commonParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通参数传递 name ==> \"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通参数传递 age ==> \"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'commonParam'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"get请求中文乱码\"><a class=\"anchor\" href=\"#get请求中文乱码\">#</a> GET 请求中文乱码</h4>\n<p>如果我们传递的参数中有中文，你会发现接收到的参数会出现中文乱码问题。<br />\n发送请求: <code>http://localhost/commonParam?name=张三&amp;age=18</code> <br />\n 控制台:<img data-src=\"image-20240317172028307.png\" alt=\"\" /><br />\n 出现乱码的原因相信大家都清楚，Tomcat8.5 以后的版本已经处理了中文乱码的问题，但是 IDEA 中的 Tomcat 插件目前只到 Tomcat7，所以需要修改 pom.xml 来解决 GET 请求中文乱码问题 <code>tomcat</code>  配置中设置 <code>&lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;</code></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!--tomcat 端口号 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- 虚拟目录 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uriEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>uriEncoding</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 访问路径编解码字符集 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"post发送参数\"><a class=\"anchor\" href=\"#post发送参数\">#</a> POST 发送参数</h4>\n<p>发送请求与参数<br />\n<img data-src=\"image-20240317172156279.png\" alt=\"\" /><br />\n接收参数：<br />\n和 GET 一致，不用做任何修改</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/commonParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">commonParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通参数传递 name ==> \"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通参数传递 age ==> \"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'commonParam'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"post请求中文乱码\"><a class=\"anchor\" href=\"#post请求中文乱码\">#</a> POST 请求中文乱码</h4>\n<p>发送请求与参数:<br />\n<img data-src=\"image-20240317172306711.png\" alt=\"\" /></p>\n<p>接收参数:<br />\n 控制台打印，会发现有中文乱码问题<img data-src=\"image-20240317172318024.png\" alt=\"\" /><br />\n解决方案：配置过滤器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 乱码处理</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">CharacterEncodingFilter</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>filter<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>CharacterEncodingFilter 是在 spring-web 包中，所以用之前需要导入对应的 jar 包。</p>\n<h2 id=\"五种类型参数传递\"><a class=\"anchor\" href=\"#五种类型参数传递\">#</a> 五种类型参数传递</h2>\n<p>前面我们已经能够使用 GET 或 POST 来发送请求和数据，所携带的数据都是比较简单的数据，接下来在这个基础上，我们来研究一些比较复杂的参数传递，常见的参数种类有:</p>\n<ul>\n<li>普通参数</li>\n<li>POJO 类型参数</li>\n<li>嵌套 POJO 类型参数</li>\n<li>数组类型参数</li>\n<li>集合类型参数</li>\n</ul>\n<h3 id=\"普通参数\"><a class=\"anchor\" href=\"#普通参数\">#</a> 普通参数</h3>\n<ul>\n<li>普通参数:url 地址传参，地址参数名与形参变量名相同，定义形参即可接收参数<br />\n<img data-src=\"image-20240317172513457.png\" alt=\"\" /></li>\n</ul>\n<p>如果形参与地址参数名不一致该如何解决？</p>\n<p>发送请求与参数:</p>\n<pre><code>http://localhost/commonParamDifferentName?name=张三&amp;age=18\n</code></pre>\n<p>后台接收参数:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/commonParamDifferentName\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">commonParamDifferentName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通参数传递 userName ==> \"</span><span class=\"token operator\">+</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通参数传递 age ==> \"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'common param different name'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为前端给的是 <code>name</code> , 后台接收使用的是 <code>userName</code> , 两个名称对不上，导致接收数据失败</p>\n<p>解决方案：使用 @RequestParam 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/commonParamDifferentName\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">commonParamDifferentName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestPaam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> userName <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通参数传递 userName ==> \"</span><span class=\"token operator\">+</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通参数传递 age ==> \"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'common param different name'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意：写上 @RequestParam 注解框架就不需要自己去解析注入，能提升框架处理性能</strong></p>\n<h3 id=\"pojo数据类型\"><a class=\"anchor\" href=\"#pojo数据类型\">#</a> POJO 数据类型</h3>\n<p>简单数据类型一般处理的是参数个数比较少的请求，如果参数比较多，那么后台接收参数的时候就比较复杂，这个时候我们可以考虑使用 POJO 数据类型。</p>\n<ul>\n<li>POJO 参数：请求参数名与形参对象属性名相同，定义 POJO 类型形参即可接收参数</li>\n</ul>\n<p>此时需要使用前面准备好的 POJO 类 (“Plain Old Java Object”“简单 java 对象”。POJO 的内在含义是指那些没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的 java 对象 )，先来看下 User</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//setter...getter... 略</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发送请求和参数:<br />\n <code>http://localhost/pojoParam?name=itcast&amp;age=15</code></p>\n<p>后台接收参数:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//POJO 参数：请求参数与形参对象中的属性对应即可完成参数传递</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pojoParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pojoParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pojo参数传递 user ==> \"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'pojo param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意:</strong></p>\n<ul>\n<li>POJO 参数接收，前端 GET 和 POST 发送请求数据的方式不变。</li>\n<li><mark>请求参数 key 的名称要和 POJO 中属性的名称一致，否则无法封装。</mark></li>\n</ul>\n<h3 id=\"嵌套pojo类型参数\"><a class=\"anchor\" href=\"#嵌套pojo类型参数\">#</a> 嵌套 POJO 类型参数</h3>\n<p>如果 POJO 对象中嵌套了其他的 POJO 类，如</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> province<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//setter...getter... 略</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//setter...getter... 略</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>嵌套 POJO 参数：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套 POJO 属性参数</li>\n</ul>\n<p>发送请求和参数:</p>\n<p><code>localhost:8080/user/pojoParam?name=Helsing&amp;age=1024&amp;address.province=Beijing&amp;address.city=Beijing</code></p>\n<p>后台接收参数:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//POJO 参数：请求参数与形参对象中的属性对应即可完成参数传递</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pojoParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pojoParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pojo参数传递 user ==> \"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'pojo param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>控制台输出如下:</p>\n<p>POJO 参数传递 user --&gt; User {name=‘Helsing’, age=1024, address=Address {province=‘Beijing’, city=‘Beijing’}}</p>\n<p><strong>注意:</strong><br />\n<mark> 请求参数 key 的名称要和 POJO 中属性的名称一致，否则无法封装</mark></p>\n<h3 id=\"数组类型参数\"><a class=\"anchor\" href=\"#数组类型参数\">#</a> 数组类型参数</h3>\n<p>举个简单的例子，如果前端需要获取用户的爱好，爱好绝大多数情况下都是多个，如何发送请求数据和接收数据呢？</p>\n<ul>\n<li>数组参数：请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型即可接收参数</li>\n</ul>\n<p>发送请求和参数: (参数名一致才能封装到一个数组中)<br />\n <code>localhost:8080/user/arrayParam?hobbies=sing&amp;hobbies=jump&amp;hobbies=rap&amp;hobbies=basketball</code></p>\n<p>后台接收参数:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组参数：同名请求参数可以直接映射到对应名称的形参数组对象中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/arrayParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">arrayParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组参数传递 likes ==> \"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'array param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>控制台输出如下:</p>\n<blockquote>\n<p>数组参数传递 user --&gt; [sing, jump, rap, basketball]</p>\n</blockquote>\n<h4 id=\"435-集合类型参数\"><a class=\"anchor\" href=\"#435-集合类型参数\">#</a> 4.3.5 集合类型参数</h4>\n<p>数组能接收多个值，那么集合是否也可以实现这个功能呢？</p>\n<p>发送请求和参数:<br />\n <code>localhost:8080/user/listParam?hobbies=sing&amp;hobbies=jump&amp;hobbies=rap&amp;hobbies=basketball</code> <br />\n 后台接收参数:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 集合参数：同名请求参数可以使用 @RequestParam 注解映射到对应名称的集合对象中作为数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/listParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">listParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"集合参数传递 likes ==> \"</span><span class=\"token operator\">+</span> likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'list param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行会报错 <code>java.lang.IllegalArgumentException: Cannot generate variable name for non-typed Collection parameter type</code></p>\n<ul>\n<li>\n<p>错误的原因是：SpringMVC 将 List 看做是一个 POJO 对象来处理，将其创建一个对象并准备把前端的数据封装到对象中，但是 List 是一个接口无法创建对象，所以报错。</p>\n</li>\n<li>\n<p>解决方案是：使用 <code>@RequestParam</code>  注解</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 集合参数：同名请求参数可以使用 @RequestParam 注解映射到对应名称的集合对象中作为数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/listParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">listParam</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"集合参数传递 likes ==> \"</span><span class=\"token operator\">+</span> likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'list param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>集合保存普通参数：请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam 绑定参数关系</li>\n<li>对于简单数据类型使用数组会比集合更简单些。</li>\n</ul>\n<p>@RequestParam</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@RequestParam</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>形参注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>SpringMVC 控制器方法形参定义前面</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>绑定请求参数与处理器方法形参间的关系</td>\n</tr>\n<tr>\n<td>相关参数</td>\n<td>required：是否为必传参数 &lt;br/&gt;defaultValue：参数默认值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"json数据传输参数\"><a class=\"anchor\" href=\"#json数据传输参数\">#</a> JSON 数据传输参数</h2>\n<p>现在比较流行的开发方式为异步调用。前后台以异步方式进行交换，传输的数据使用的是<mark> JSON</mark>, 所以前端如果发送的是 JSON 数据，后端该如何接收？</p>\n<p>对于 JSON 数据类型，常见的有三种:</p>\n<ul>\n<li>json 普通数组（[&quot;value1&quot;,&quot;value2&quot;,&quot;value3&quot;,...]）</li>\n<li>json 对象（{key1:value1,key2:value2,...}）</li>\n<li>json 对象数组（[{key1:value1,...},{key2:value2,...}]）</li>\n</ul>\n<p>对于上述数据，前端如何发送，后端如何接收？<br />\nJSON 普通数组</p>\n<blockquote>\n<p>步骤 1:pom.xml 添加依赖，导入坐标</p>\n</blockquote>\n<p>SpringMVC 默认使用的是 jackson 来处理 json 的转换，所以需要在 pom.xml 添加 jackson 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2:PostMan 发送 JSON 数据</p>\n</blockquote>\n<p><img data-src=\"https://dingyue.ws.126.net/2022/1010/602100ffj00rjip2d000wd0012b008cp.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>步骤 3: 开启 SpringMVC 注解支持</p>\n</blockquote>\n<p>在 SpringMVC 的配置类中开启 SpringMVC 的注解支持，这里面就包含了将 JSON 转换成对象的功能。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 开启 json 数据类型自动转换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 后台接收参数，参数前添加 @RequestBody</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 @RequestBody 注解将外部传递的 json 数组数据映射到形参的集合对象中作为数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/listParamForJson\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">listParamForJson</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list common(json)参数传递 list ==> \"</span><span class=\"token operator\">+</span>likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'list common for json param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 5: 启动运行程序</p>\n</blockquote>\n<p>输出 <code>JSON数组参数传递hobbies --&gt; [唱, 跳, Rap, 篮球]</code> <br />\n JSON 普通数组的数据就已经传递完成，下面针对 JSON 对象数据和 JSON 对象数组的数据该如何传递呢？</p>\n<h3 id=\"json对象数据\"><a class=\"anchor\" href=\"#json对象数据\">#</a> JSON 对象数据</h3>\n<p>我们会发现，只需要关注请求和数据如何发送？后端数据如何接收？</p>\n<p>请求和数据的发送:</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"itcast\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">15</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image-20240317174704003.png\" alt=\"\" /></p>\n<p>后端接收数据：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pojoParamForJson\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pojoParamForJson</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pojo(json)参数传递 user ==> \"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'pojo for json param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果： <code>pojo(json)参数传递 user ==&gt;User&#123;name='itcast',age=15,address=null&#125;</code></p>\n<p><strong>说明:</strong></p>\n<p>address 为 null 的原因是前端没有传递数据给后端。<br />\n如果想要 address 也有数据，我们需求修改前端传递的数据内容:</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"itcast\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"province\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"beijing\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"beijing\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再次发送请求，就能看到 address 中的数据<br />\n <code>pojo(json)参数传递user &gt;User&#123;name='itcast', age=15,address=Address&#123;province:'beijing&quot;,city'beijing'</code></p>\n<h3 id=\"json对象数组\"><a class=\"anchor\" href=\"#json对象数组\">#</a> JSON 对象数组</h3>\n<p>集合中保存多个 POJO 该如何实现？</p>\n<p>请求和数据的发送:</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"itcast\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">15</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"itheima\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>后端接收数据:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/listPojoParamForJson\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">listPojoParamForJson</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list pojo(json)参数传递 list ==> \"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'list pojo for json param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动程序访问测试<br />\n <code>list pojo(ison)参数传递list ==&gt; [User&#123;name=&quot;itcast&quot;, age=15，address=null&#125;, &#123;User&#123;name=&quot;itheima&quot;, age=12, address=null&#125;]</code> <br />\n<strong> 小结</strong></p>\n<p>SpringMVC 接收 JSON 数据的实现步骤为:</p>\n<ol>\n<li>导入 jackson 包</li>\n<li>使用 PostMan 发送 JSON 数据</li>\n<li>开启 SpringMVC 注解驱动，在配置类上添加 @EnableWebMvc 注解 (包含了将 JSON 转换成对象的功能)</li>\n<li>Controller 方法的参数前添加 @RequestBody 注解</li>\n</ol>\n<h3 id=\"知识点\"><a class=\"anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<p>@EnableWebMvc</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@EnableWebMvc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>配置类注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>SpringMVC 配置类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>开启 SpringMVC 多项辅助功能</td>\n</tr>\n</tbody>\n</table>\n<p>@RequestBody</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@RequestBody</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>形参注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>SpringMVC 控制器方法形参定义前面</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"requestbody与requestparam区别\"><a class=\"anchor\" href=\"#requestbody与requestparam区别\">#</a> @RequestBody 与 @RequestParam 区别</h4>\n<ul>\n<li>\n<p>区别</p>\n<ul>\n<li>@RequestParam 用于接收 url 地址传参，表单传参【application/x-www-form-urlencoded】</li>\n<li>@RequestBody 用于接收 json 数据【application/json】</li>\n</ul>\n</li>\n<li>\n<p>应用</p>\n<ul>\n<li>后期开发中，发送 json 格式数据为主，@RequestBody 应用较广</li>\n<li>如果发送非 json 格式数据，选用 @RequestParam 接收请求参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"日期类型参数传递\"><a class=\"anchor\" href=\"#日期类型参数传递\">#</a> 日期类型参数传递</h2>\n<p>前面我们处理过简单数据类型、POJO 数据类型、数组和集合数据类型以及 JSON 数据类型，接下来我们还得处理一种开发中比较常见的一种数据类型， <code>日期类型</code></p>\n<p>日期类型比较特殊，因为对于日期的格式有 N 多中输入方式，比如:</p>\n<ul>\n<li>2088-08-18</li>\n<li>2088/08/18</li>\n<li>08/18/2088</li>\n<li>......</li>\n</ul>\n<p>针对这么多日期格式，SpringMVC 该如何接收，它能很好的处理日期类型数据么？</p>\n<blockquote>\n<p>步骤 1: 编写方法接收日期数据</p>\n</blockquote>\n<p>在 UserController 类中添加方法，把参数设置为日期类型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dataParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">dataParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数传递 date ==> \"</span><span class=\"token operator\">+</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'data param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 启动 Tomcat 服务器<br />\n步骤 3: 使用 PostMan 发送 (GET) 请求  <code>http://localhost/dataParam?date=2088/08/08</code> <br />\n 步骤 4: 查看控制台</p>\n</blockquote>\n<p><code>参数传递date --&gt; Tue Dec 21 00:00:00 CST 2077</code> <br />\n 通过打印，我们发现 SpringMVC 可以接收日期数据类型，并将其打印在控制台。<br />\n这个时候，我们就想如果把日期参数的格式改成其他的，SpringMVC 还能处理么？</p>\n<blockquote>\n<p>步骤 5: 更换日期格式</p>\n</blockquote>\n<p>为了能更好的看到程序运行的结果，我们在方法中多添加一个日期参数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dataParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">dataParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> date1<span class=\"token punctuation\">,</span><span class=\"token class-name\">Date</span> date2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数传递date1 --> \"</span> <span class=\"token operator\">+</span> date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数传递date2 --> \"</span> <span class=\"token operator\">+</span> date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'data param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 PostMan 发送请求，携带两个不同的日期格式，</p>\n<p><code>localhost:8080/user/dateParam?date1=2077/12/21&amp;date2=1997-02-13</code></p>\n<p>发送请求和数据后，页面会报 400， <code>The request sent by the client was syntactically incorrect.</code> <br />\n 错误的原因是将 <code>1997-02-13</code>  转换成日期类型的时候失败了，原因是 SpringMVC 默认支持的字符串转日期的格式为 <code>yyyy/MM/dd</code> , 而我们现在传递的不符合其默认格式，SpringMVC 就无法进行格式转换，所以报错。<br />\n解决方案也比较简单，需要使用 <code>@DateTimeFormat</code>  注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dataParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">dataParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> date1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token annotation punctuation\">@DateTimeFormat</span><span class=\"token punctuation\">(</span>pattern<span class=\"token operator\">=</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Date</span> date2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数传递 date1 ==> \"</span><span class=\"token operator\">+</span>date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数传递 date2(yyyy-MM-dd) ==> \"</span><span class=\"token operator\">+</span>date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'data param'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重新启动服务器，重新发送请求测试，SpringMVC 就可以正确的进行日期转换了</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>参数传递date1 --<span class=\"token operator\">></span> Tue Dec <span class=\"token number\">21</span> 00:00:00 CST <span class=\"token number\">2077</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>参数传递date2 --<span class=\"token operator\">></span> Thu Feb <span class=\"token number\">13</span> 00:00:00 CST <span class=\"token number\">1997</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 6: 携带时间的日期</p>\n</blockquote>\n<p>接下来我们再来发送一个携带时间的日期，看下 SpringMVC 该如何处理？<br />\n <code>localhost:8080/user/dateParam?date1=2077/12/21&amp;date2=1997-02-13&amp;date3=2022/09/09 16:34:07</code> <br />\n 修改 UserController 类，添加第三个参数 <code>@DateTimeFormat</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dateParam\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">dateParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> date1<span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token annotation punctuation\">@DateTimeFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Date</span> date2<span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                        <span class=\"token annotation punctuation\">@DateTimeFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span><span class=\"token string\">\"yyyy/MM/dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Date</span> date3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数传递date1 --> \"</span> <span class=\"token operator\">+</span> date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数传递date2 --> \"</span> <span class=\"token operator\">+</span> date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数传递date3 --> \"</span> <span class=\"token operator\">+</span> date3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'date param'&#125;\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 PostMan 发送请求，携带两个不同的日期格式，<br />\n重新启动服务器，重新发送请求测试，SpringMVC 就可以将日期时间的数据进行转换</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>参数传递date1 --<span class=\"token operator\">></span> Tue Dec <span class=\"token number\">21</span> 00:00:00 CST <span class=\"token number\">2077</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>参数传递date2 --<span class=\"token operator\">></span> Thu Feb <span class=\"token number\">13</span> 00:00:00 CST <span class=\"token number\">1997</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>参数传递date3 --<span class=\"token operator\">></span> Fri Sep 09 <span class=\"token number\">16</span>:34:07 CST <span class=\"token number\">2022</span></pre></td></tr></table></figure><h3 id=\"知识点-2\"><a class=\"anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@DateTimeFormat</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>形参注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>SpringMVC 控制器方法形参前面</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设定日期时间型数据格式</td>\n</tr>\n<tr>\n<td>相关属性</td>\n<td>pattern：指定日期时间格式字符串</td>\n</tr>\n</tbody>\n</table>\n<p><mark>内部实现原理</mark></p>\n<p>讲解内部原理之前，我们需要先思考个问题:</p>\n<ul>\n<li>前端传递字符串，后端使用日期 Date 接收</li>\n<li>前端传递 JSON 数据，后端使用对象接收</li>\n<li>前端传递字符串，后端使用 Integer 接收</li>\n<li>后台需要的数据类型有很多中</li>\n<li>在数据的传递过程中存在很多类型的转换</li>\n</ul>\n<p>问：谁来做这个类型转换？</p>\n<ul>\n<li>答: SpringMVC</li>\n</ul>\n<p>问: SpringMVC 是如何实现类型转换的？</p>\n<ul>\n<li>答: SpringMVC 中提供了很多类型转换接口和实现类</li>\n</ul>\n<p>在框架中，有一些类型转换接口，其中有:</p>\n<ol>\n<li>Converter 接口<br />\n<span class=\"label warning\">注意</span> Converter 所属的包为 <code>org.springframework.core.convert.converter</code></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>*\tS: the source type</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*\tT: the target type</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Converter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 该方法就是将从页面上接收的数据 (S) 转换成我们想要的数据类型 (T) 返回</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">T</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">S</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Converter 接口的实现类<br />\n<img data-src=\"https://dingyue.ws.126.net/2022/1010/c0f0a772j00rjip2d003ad0012p00fpp.jpg\" alt=\"\" /></p>\n<p>框架中有提供很多对应 Converter 接口的实现类，用来实现不同数据类型之间的转换，如:<br />\n 请求参数年龄数据（String→Integer）<br />\n日期格式转换（String → Date）</p>\n<ol start=\"2\">\n<li>HttpMessageConverter 接口</li>\n</ol>\n<p>该接口是实现对象与 JSON 之间的转换工作</p>\n<p><span class=\"label warning\">注意</span> <mark>SpringMVC 的配置类把 @EnableWebMvc 当做标配配置上去，不要省略</mark></p>\n<h2 id=\"响应\"><a class=\"anchor\" href=\"#响应\">#</a> 响应</h2>\n<p>SpringMVC 接收到请求和数据后，进行一些了的处理，当然这个处理可以是转发给 Service，Service 层再调用 Dao 层完成的，不管怎样，处理完以后，都需要将结果告知给用户</p>\n<p>比如：根据用户 ID 查询用户信息、查询用户列表、新增用户等。<br />\n对于响应，主要就包含两部分内容：</p>\n<ul>\n<li>响应页面</li>\n<li>响应数据\n<ul>\n<li>文本数据</li>\n<li>json 数据</li>\n</ul>\n</li>\n</ul>\n<p>因为异步调用是目前常用的主流方式，所以我们需要更关注的就是如何返回 JSON 数据，对于其他只需要认识了解即可</p>\n<h3 id=\"环境准备-2\"><a class=\"anchor\" href=\"#环境准备-2\">#</a> 环境准备</h3>\n<details class=\"info\"><summary>上文已有</summary><div>\n<ul>\n<li>\n<p>创建一个 Web 的 Maven 项目</p>\n</li>\n<li>\n<p>pom.xml 添加 Spring 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springmvc_05_response<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>war<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>创建对应的配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 乱码处理</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">CharacterEncodingFilter</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>filter<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 开启 json 数据类型自动转换</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写模型类 User</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//getter...setter...toString 省略</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</div></details>\n<p>主要是新增：</p>\n<ul>\n<li>webapp 下创建 page.jsp</li>\n</ul>\n<pre><code class=\"language-jsp\">  &lt;html&gt;\n  &lt;body&gt;\n  &lt;h2&gt;Hello Spring MVC!&lt;/h2&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre>\n<ul>\n<li>\n<p>编写 UserController</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"响应页面\"><a class=\"anchor\" href=\"#响应页面\">#</a> 响应页面</h3>\n<blockquote>\n<p>步骤 1: 设置返回页面</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/toJumpPage\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 注意</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//1. 此处不能添加 @ResponseBody, 如果加了该注入，会直接将 page.jsp 当字符串返回前端</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//2. 方法需要返回 String</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toJumpPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"跳转页面\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"page.jsp\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 启动程序测试</p>\n</blockquote>\n<p>此处涉及到页面跳转，所以不适合采用 PostMan 进行测试，直接打开浏览器，输入</p>\n<p><code>http://localhost:8080/toJumpPage</code></p>\n<h3 id=\"返回文本数据\"><a class=\"anchor\" href=\"#返回文本数据\">#</a> 返回文本数据</h3>\n<blockquote>\n<p>步骤 1: 设置返回文本内容</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   \t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/toText\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 注意此处该注解就不能省略，如果省略了，会把 response text 当前页面名称去查找，如果没有回报 404 错误</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回纯文本数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"response text\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 启动程序测试</p>\n</blockquote>\n<p>此处不涉及到页面跳转，因为我们现在发送的是 GET 请求，可以使用浏览器也可以使用 PostMan 进行测试，输入地址 <code>http://localhost/toText</code>  访问<br />\n页面上出现 <code>response text</code>  文本数据</p>\n<h3 id=\"响应json数据\"><a class=\"anchor\" href=\"#响应json数据\">#</a> 响应 JSON 数据</h3>\n<h4 id=\"响应pojo对象\"><a class=\"anchor\" href=\"#响应pojo对象\">#</a> 响应 POJO 对象</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/toJsonPOJO\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">toJsonPOJO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回json对象数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itcast\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>返回值为实体类对象，设置返回值为实体类类型，即可实现返回对应对象的 json 数据，需要依赖 ==@ResponseBody<mark> 注解和</mark> @EnableWebMvc== 注解</p>\n<p>重新启动服务器，访问 <code>http://localhost/toJsonPOJO</code> <br />\n 页面上成功出现 JSON 类型数据<br />\n <code>HttpMessageConverter</code>  接口帮我们实现了对象与 JSON 之间的转换工作，我们只需要在 <code>SpringMvcConfig</code>  配置类上加上 <code>@EnableWebMvc</code>  注解即可</p>\n<h4 id=\"响应pojo集合对象\"><a class=\"anchor\" href=\"#响应pojo集合对象\">#</a> 响应 POJO 集合对象</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/toJsonList\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">toJsonList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回json集合数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        user1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传智播客\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        user1<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">User</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        user2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黑马程序员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        user2<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        userList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        userList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> userList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重新启动服务器，访问 <code>http://localhost/toJsonList</code></p>\n<h3 id=\"知识点-3\"><a class=\"anchor\" href=\"#知识点-3\">#</a> 知识点</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@ResponseBody</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>方法 \\ 类注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>SpringMVC 控制器方法定义上方和控制类上</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置当前控制器返回值作为响应体，&lt;br&gt; 写在类上，该类的所有方法都有该注解功能</td>\n</tr>\n<tr>\n<td>相关属性</td>\n<td>pattern：指定日期时间格式字符串</td>\n</tr>\n</tbody>\n</table>\n<p><strong>说明:</strong></p>\n<ul>\n<li>该注解可以写在类上或者方法上</li>\n<li>写在类上就是该类下的所有方法都有 @ReponseBody 功能</li>\n<li>当方法上有 @ReponseBody 注解后\n<ul>\n<li>方法的返回值为字符串，会将其作为文本内容直接响应给前端</li>\n<li>方法的返回值为对象，会将对象转换成 JSON 响应给前端</li>\n</ul>\n</li>\n</ul>\n<p>此处又使用到了类型转换，内部还是通过 Converter 接口的实现类完成的，所以 Converter 除了前面所说的功能外，它还可以实现:</p>\n<ul>\n<li>对象转 Json 数据 (POJO -&gt; json)</li>\n<li>集合转 Json 数据 (Collection -&gt; json)</li>\n</ul>\n<h1 id=\"rest风格\"><a class=\"anchor\" href=\"#rest风格\">#</a> Rest 风格</h1>\n<p>REST，表现形式状态转换，它是一种软件架构 <code>风格</code> <br />\n当我们想表示一个网络资源时，可以使用两种方式：</p>\n<ul>\n<li>传统风格资源描述形式\n<ul>\n<li><code>http://localhost/user/getById?id=1</code>  查询 id 为 1 的用户信息</li>\n<li><code>http://localhost/user/saveUser</code>  保存用户信息</li>\n</ul>\n</li>\n<li>REST 风格描述形式\n<ul>\n<li><code>http://localhost/user/1</code></li>\n<li><code>http://localhost/user</code></li>\n</ul>\n</li>\n</ul>\n<p>传统方式一般是一个请求 url 对应一种操作，这样做不仅麻烦，而且也不安全，通过请求的 <code>URL</code>  地址，就大致能推测出该 <code>URL</code>  实现的是什么操作<br />\n反观 REST 风格的描述，请求地址变简洁了，而且只看请求 <code>URL</code>  并不很容易能猜出来该 <code>UR</code> L 的具体功能</p>\n<p>所以 <code>REST</code>  的优点有：</p>\n<ul>\n<li>隐藏资源的访问行为，无法通过地址得知该资源是何种操作</li>\n<li>书写简化</li>\n</ul>\n<p>那么问题也随之而来，一个相同的 <code>URL</code>  地址既可以是增加操作，也可以是修改或者查询，那么我们该如何区分该请求到底是什么操作呢？</p>\n<ul>\n<li>按照 REST 风格访问资源时，使用 <code>行为动作</code> 区分对资源进行了何种操作\n<ul>\n<li><code>http://localhost/users</code>  查询全部用户信息  <code>GET</code> （查询）</li>\n<li><code>http://localhost/users/1</code>  查询指定用户信息  <code>GET</code> （查询）</li>\n<li><code>http://localhost/users</code>  添加用户信息  <code>POST</code> （新增 / 保存）</li>\n<li><code>http://localhost/users</code>  修改用户信息  <code>PUT</code> （修改 / 更新）</li>\n<li><code>http://localhost/users/1</code>  删除用户信息  <code>DELETE</code> （删除）</li>\n</ul>\n</li>\n</ul>\n<p>请求的方式比较多，但是比较常用的就 4 种，分别是 <code>GET</code> , <code>POST</code> , <code>PUT</code> , <code>DELETE</code> <br />\n 按照不同的请求方式代表不同的操作类型</p>\n<ul>\n<li>发送 GET 请求是用来做查询</li>\n<li>发送 POST 请求是用来做新增</li>\n<li>发送 PUT 请求是用来做修改</li>\n<li>发送 DELETE 请求是用来做删除</li>\n</ul>\n<p><span class=\"label warning\">注意</span></p>\n<ul>\n<li>上述行为是约定方式，约定不是规范，约定可以打破，所以成为 <code>REST</code>  风格，而不是 <code>REST</code>  规范\n<ul>\n<li>REST 提供了对应的架构方式，按照这种架构方式设计项目可以降低开发的复杂性，提高系统的可伸缩性</li>\n<li>REST 中规定 <code>GET</code> / <code>POST</code> / <code>PUT</code> / <code>DELETE</code>  针对的是查询 / 新增 / 修改 / 删除，但如果我们非要使用 <code>GET</code>  请求做删除，这点在程序上运行是可以实现的</li>\n<li>但是如果大多数人都遵循这种风格，你不遵循，那你写的代码在别人看来就有点莫名其妙了，所以最好还是遵循 REST 风格</li>\n</ul>\n</li>\n<li>描述模块的名称通常使用复数，也就是加 s 的格式描述，表示此类的资源，而非单个的资源，例如 <code>users</code> 、 <code>books</code> 、 <code>accounts</code> …</li>\n</ul>\n<p>搞清楚了什么是 REST 分各个后，后面会经常提到一个概念叫 <code>RESTful</code> ，那么什么是 <code>RESTful</code>  呢？</p>\n<ul>\n<li>根据 REST 风格对资源进行访问称为 <code>RESTful</code> <br />\n 在我们后期的开发过程中，大多数都是遵循 <code>REST</code>  风格来访问我们的后台服务</li>\n</ul>\n<h2 id=\"restful入门案例\"><a class=\"anchor\" href=\"#restful入门案例\">#</a> RESTful 入门案例</h2>\n<h3 id=\"环境准备-3\"><a class=\"anchor\" href=\"#环境准备-3\">#</a> 环境准备</h3>\n<ul>\n<li>创建一个 Web 的 Maven 项目</li>\n<li>导入坐标：pom.xml 添加 Spring 依赖</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springmvc_06_rest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>war<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>创建对应的配置类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">// 乱码处理</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token class-name\">CharacterEncodingFilter</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          filter<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>filter<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 开启 json 数据类型自动转换</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>编写模型类 User 和 Book</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">//getter...setter...toString 省略</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token comment\">//getter...setter...toString 省略</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>编写 UserController 和 BookController</li>\n</ul>\n<div class=\"tab\" data-id=\"rest_environment\" data-title=\"UserController\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  \t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save...\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user delete...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/update\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user update...\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user update'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/getById\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user getById...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user getById'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/findAll\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user getAll...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user getAll'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"rest_environment\" data-title=\"BookController\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book save...\"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/books/&#123;id&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book delete...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book update...\"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book update'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/books/&#123;id&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getById...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book getById'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getAll...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book getAll'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<h3 id=\"思路分析-2\"><a class=\"anchor\" href=\"#思路分析-2\">#</a> 思路分析</h3>\n<p>需求：将之前的增删改查替换成 RESTful 的开发方式。</p>\n<ol>\n<li>\n<p>之前不同的请求有不同的路径，现在要将其修改为统一的请求路径</p>\n<ul>\n<li>修改前：新增: /save , 修改: /update, 删除 /delete...</li>\n<li>修改后：增删改查: /users</li>\n</ul>\n</li>\n<li>\n<p>根据 GET 查询、POST 新增、PUT 修改、DELETE 删除对方法的请求方式进行限定</p>\n</li>\n<li>\n<p>发送请求的过程中如何设置请求参数？</p>\n</li>\n</ol>\n<h3 id=\"修改restful风格\"><a class=\"anchor\" href=\"#修改restful风格\">#</a> 修改 RESTful 风格</h3>\n<ol>\n<li>新增</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 设置当前请求方法为 POST，表示 REST 风格中的添加操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>将请求路径更改为 <code>/users</code></li>\n<li>访问该方法使用 POST:  <code>http://localhost/users</code></li>\n<li>使用 method 属性限定该方法的访问方式为 <code>POST</code></li>\n<li>如果发送的不是 POST 请求，比如发送 GET 请求，则会报错</li>\n</ul>\n<ol start=\"2\">\n<li>删除</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置当前请求方法为 DELETE，表示 REST 风格中的删除操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user delete...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>将请求路径更改为 <code>/users</code>\n<ul>\n<li>访问该方法使用 DELETE:  <code>http://localhost/users</code></li>\n</ul>\n</li>\n</ul>\n<p>访问成功，但是删除方法没有携带所要删除数据的 id, 所以针对 RESTful 的开发，如何携带数据参数？</p>\n<blockquote>\n<p>传递路径参数</p>\n</blockquote>\n<p>前端发送请求的时候使用: <code>http://localhost/users/1</code> , 路径中的 <code>1</code>  就是我们想要传递的参数。</p>\n<p>后端获取参数，需要做如下修改:</p>\n<ul>\n<li>修改 @RequestMapping 的 value 属性，将其中修改为 <code>/users/&#123;id&#125;</code> ，目的是和路径匹配</li>\n<li>在方法的形参前添加 @PathVariable 注解</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置当前请求方法为 DELETE，表示 REST 风格中的删除操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user delete...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label primary\">思考</span></p>\n<ol>\n<li>如果方法形参的名称和路径 <code>&#123;&#125;</code>  中的值不一致，该怎么办？<br />\n 例如 <code>&quot;/users/&#123;id&#125;&quot;</code>  和 <code>delete(@PathVariable Integer userId)</code></li>\n</ol>\n<ul>\n<li>解答：如果这两个值不一致，就无法获取参数，此时我们可以在注解后面加上属性，让注解的属性值与 <code>&#123;&#125;</code>  中的值一致即可，具体代码如下</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user delete ...\"</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user delete'&#125;\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>如果有多个参数需要传递该如何编写？</li>\n</ol>\n<p>前端发送请求的时候使用: <code>http://localhost/users/1/tom</code> , 路径中的 <code>1</code>  和 <code>tom</code>  就是我们想要传递的两个参数。</p>\n<p>后端获取参数，需要做如下修改:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置当前请求方法为 DELETE，表示 REST 风格中的删除操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/&#123;id&#125;/&#123;name&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">,</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user delete...\"</span> <span class=\"token operator\">+</span> id<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改<br />\n将请求路径更改为 <code>/users</code> ，并设置当前请求方法为 <code>PUT</code></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置当前请求方法为 PUT，表示 REST 风格中的修改操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user update...\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user update'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发送 <code>PUT</code>  请求 <code>localhost:8080/users</code> ，访问并携带参数</p>\n<ol start=\"4\">\n<li>根据 ID 查询<br />\n将请求路径更改为 <code>/users/&#123;id&#125;</code> ，并设置当前请求方法为 <code>GET</code></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置当前请求方法为 GET，表示 REST 风格中的查询操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/&#123;id&#125;\"</span> <span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user getById...\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user getById'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发送 <code>GET</code>  请求访问 <code>localhost:8080/users/2077</code> <br />\n 输出 <code>user getById…2077</code></p>\n<ol start=\"6\">\n<li>查询所有<br />\n将请求路径更改为 <code>/users</code> ，并设置当前请求方法为 <code>GET</code></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置当前请求方法为 GET，表示 REST 风格中的查询操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span> <span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user getAll...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user getAll'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发送 <code>GET</code>  请求访问 <code>localhost:8080/users</code></p>\n<p><strong>代码汇总</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>增删查改</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save ...\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user save'&#125;\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/&#123;id&#125;/&#123;name&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> userId<span class=\"token punctuation\">,</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user delete ...\"</span> <span class=\"token operator\">+</span> userId <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user delete'&#125;\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUT</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user update ...\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user update'&#125;\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user getById ...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user getById'&#125;\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user getAll ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'user getAll'&#125;\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>小结</strong></p>\n<p>RESTful 入门案例，我们需要记住的内容如下:</p>\n<ol>\n<li>设定 Http 请求动作 (动词)</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token operator\">|</span><span class=\"token constant\">GET</span><span class=\"token operator\">|</span><span class=\"token constant\">PUT</span><span class=\"token operator\">|</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>设定请求参数 (路径变量)</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ReponseBody</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"知识点-4\"><a class=\"anchor\" href=\"#知识点-4\">#</a> 知识点</h3>\n<p><code>@PathVariable</code></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@PathVariable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>形参注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>SpringMVC 控制器方法形参定义前面</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>绑定路径参数与处理器方法形参间的关系，要求路径参数名与形参名一一对应</td>\n</tr>\n</tbody>\n</table>\n<p>关于接收参数，我们学过三个注解 <code>@RequestBody</code> 、 <code>@RequestParam</code> 、 <code>@PathVariable</code> , 这三个注解之间的区别和应用分别是什么？</p>\n<ul>\n<li>区别\n<ul>\n<li><code>@RequestParam</code>  用于接收 url 地址传参或表单传参</li>\n<li><code>@RequestBody</code>  用于接收 json 数据</li>\n<li><code>@PathVariable</code>  用于接收路径参数，使用 {参数名称} 描述路径参数</li>\n</ul>\n</li>\n<li>应用\n<ul>\n<li>后期开发中，发送请求参数超过 1 个时，以 json 格式为主， <code>@RequestBody</code>  应用较广</li>\n<li>如果发送非 json 格式数据，选用 <code>@RequestParam</code>  接收请求参数</li>\n<li>采用 RESTful 进行开发，当参数数量较少时，例如 1 个，可以采用 <code>@PathVariable</code>  接收请求路径变量，通常用于传递 id 值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"restful快速开发\"><a class=\"anchor\" href=\"#restful快速开发\">#</a> RESTful 快速开发</h2>\n<p>做完了 RESTful 的开发，<mark>麻烦</mark></p>\n<ul>\n<li>每个方法的 <code>@RequestMapping</code>  注解中都定义了访问路径 <code>/users</code> ，重复性太高。\n<ul>\n<li>解决方案：将 <code>@RequestMapping</code>  提到类上面，用来定义所有方法共同的访问路径。</li>\n</ul>\n</li>\n<li>每个方法的 <code>@RequestMapping</code>  注解中都要使用 method 属性定义请求方式，重复性太高。\n<ul>\n<li>解决方案：使用 <code>@GetMapping</code> 、 <code>@PostMapping</code> 、 <code>@PutMapping</code> 、 <code>@DeleteMapping</code>  代替</li>\n</ul>\n</li>\n<li>每个方法响应 json 都需要加上 <code>@ResponseBody</code>  注解，重复性太高。\n<ul>\n<li>解决方案：\n<ul>\n<li>将 <code>@ResponseBody</code>  提到类上面，让所有的方法都有 <code>@ResponseBody</code>  的功能</li>\n<li>使用 <code>@RestController</code>  注解替换 <code>@Controller</code>  与 <code>@ResponseBody</code>  注解，简化书写</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改后的代码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span> <span class=\"token comment\">//@Controller + ReponseBody</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">//@RequestMapping(method = RequestMethod.POST)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book save...\"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//@RequestMapping(value = \"/&#123;id&#125;\",method = RequestMethod.DELETE)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book delete...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//@RequestMapping(method = RequestMethod.PUT)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book update...\"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book update'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//@RequestMapping(value = \"/&#123;id&#125;\",method = RequestMethod.GET)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getById...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book getById'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//@RequestMapping(method = RequestMethod.GET)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getAll...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book getAll'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"知识点-5\"><a class=\"anchor\" href=\"#知识点-5\">#</a> 知识点</h3>\n<p><code>@RestController</code></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@RestController</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>类注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>基于 SpringMVC 的 RESTful 开发控制器类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置当前控制器类为 RESTful 风格，&lt;br/&gt; 等同于 @Controller 与 @ResponseBody 两个注解组合功能</td>\n</tr>\n</tbody>\n</table>\n<p><code>@GetMapping @PostMapping @PutMapping @DeleteMapping</code></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@GetMapping @PostMapping @PutMapping @DeleteMapping</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td><mark>方法注解</mark></td>\n</tr>\n<tr>\n<td>位置</td>\n<td>基于 SpringMVC 的 RESTful 开发控制器方法定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，&lt;br/&gt; 例如 @GetMapping 对应 GET 请求</td>\n</tr>\n<tr>\n<td>相关属性</td>\n<td>value（默认）：请求访问路径</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"restful案例\"><a class=\"anchor\" href=\"#restful案例\">#</a> RESTful 案例</h2>\n<h3 id=\"需求分析\"><a class=\"anchor\" href=\"#需求分析\">#</a> 需求分析</h3>\n<p>需求一：图片列表查询，从后台返回数据，将数据展示在页面上</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/631bdd1f16f2c2beb17823f9.jpg\" alt=\"\" /></p>\n<p>需求二：新增图片，将新增图书的数据传递到后台，并在控制台打印<br />\n<img data-src=\"https://pic.imgdb.cn/item/631bdd2a16f2c2beb1782c1c.jpg\" alt=\"\" /></p>\n<p><strong>说明:</strong> 此次案例的重点是在 SpringMVC 中如何使用 RESTful 实现前后台交互，所以本案例并没有和数据库进行交互，所有数据使用 <code>假数据</code> 来完成开发。</p>\n<p>步骤分析:</p>\n<blockquote>\n<p>1. 搭建项目导入 jar 包<br />\n 2. 编写 Controller 类，提供两个方法，一个用来做列表查询，一个用来做新增<br />\n 3. 在方法上使用 RESTful 进行路径设置<br />\n 4. 完成请求、参数的接收和结果的响应<br />\n 5. 使用 PostMan 进行测试<br />\n 6. 将前端页面拷贝到项目中<br />\n 7. 页面发送 ajax 请求<br />\n 8. 完成页面数据的展示</p>\n</blockquote>\n<h3 id=\"环境准备-4\"><a class=\"anchor\" href=\"#环境准备-4\">#</a> 环境准备</h3>\n<ul>\n<li>\n<p>创建一个 Web 的 Maven 项目</p>\n</li>\n<li>\n<p>pom.xml 添加 Spring 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springmvc_07_rest_case<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>war<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>创建对应的配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 乱码处理</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">CharacterEncodingFilter</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>filter<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 开启 json 数据类型自动转换</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写模型类 Book</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//setter...getter...toString 略</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 BookController</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"后台接口开发\"><a class=\"anchor\" href=\"#后台接口开发\">#</a> 后台接口开发</h3>\n<blockquote>\n<p>步骤 1: 编写 Controller 类，并使用 RESTful 进行配置</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book save ==> \"</span><span class=\"token operator\">+</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book save success'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> \t<span class=\"token annotation punctuation\">@GetMapping</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getAll is running ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> bookList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Book</span> book1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        book1<span class=\"token punctuation\">.</span><span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计算机\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        book1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SpringMVC入门教程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        book1<span class=\"token punctuation\">.</span><span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小试牛刀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        bookList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>book1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Book</span> book2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        book2<span class=\"token punctuation\">.</span><span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计算机\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        book2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SpringMVC实战教程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        book2<span class=\"token punctuation\">.</span><span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一代宗师\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        bookList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>book2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Book</span> book3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        book3<span class=\"token punctuation\">.</span><span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计算机丛书\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        book3<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SpringMVC实战教程进阶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        book3<span class=\"token punctuation\">.</span><span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一代宗师呕心创作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        bookList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>book3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> bookList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2：使用 PostMan 进行测试</p>\n</blockquote>\n<ul>\n<li>测试新增</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"计算机丛书\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"SpringMVC终极开发\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"这是一本好书\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>访问 <code>localhost:8080/books</code> ，发送 POST 请求与数据，控制台输出如下<br />\n <code>book save --&gt; Book&#123;id=null, type=‘计算机’, name=‘SpringMVC入门教程’, description=‘小试牛刀’&#125;</code></p>\n<ul>\n<li>测试查询<br />\n访问 <code>localhost:8080/books</code> ，发送 GET 请求，查询到如下内容</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SpringMVC入门教程\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"小试牛刀\"</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SpringMVC实战教程\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"一代宗师\"</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"计算机丛书\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SpringMVC实战教程进阶\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"一代宗师呕心创作\"</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"页面访问处理\"><a class=\"anchor\" href=\"#页面访问处理\">#</a> 页面访问处理</h3>\n<blockquote>\n<p>步骤 1: 拷贝静态页面</p>\n</blockquote>\n<p>将 <code>资料\\功能页面</code> 下的所有内容拷贝到项目的 <code>webapp</code>  目录下</p>\n<blockquote>\n<p>步骤 2: 访问 pages 目录下的 books.html</p>\n</blockquote>\n<ul>\n<li>打开浏览器输入 <code>http://localhost/pages/books.html</code>  报 404，为什么呢？</li>\n<li>SpringMVC 拦截了静态资源，根据 /pages/books.html 去 controller 找对应的方法，找不到所以会报 404 的错误。</li>\n<li>SpringMVC 为什么会拦截静态资源呢？</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>解决方案：<mark>springMVC 需要将静态资源进行放行</mark></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcSupport</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebMvcConfigurationSupport</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置静态资源访问过滤，当前类需要设置为配置类，并被扫描加载</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addResourceHandlers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceHandlerRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 当访问 /pages/???? 时候，从 /pages 目录下查找内容</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pages/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pages/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/js/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/js/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/css/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/css/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/plugins/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/plugins/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>该配置类是在 config 目录下，SpringMVC 扫描的是 controller 包，所以该配置类还未生效，要想生效需要将 SpringMvcConfig 配置类进行修改</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"com.itheima.controller\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"com.itheima.config\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 修改 books.html 页面</p>\n</blockquote>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 页面 meta --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>SpringMVC案例<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 引入样式 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../plugins/elementui/index.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../plugins/font-awesome/css/font-awesome.min.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../css/style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hold-transition<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>图书管理<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filter-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名称<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filter-item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dalfBut<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查询<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>butT<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>openSave()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>新建<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>small<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">current-row-key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stripe</span> <span class=\"token attr-name\">highlight-current-row</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>序号<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书类别<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名称<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>描述<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>操作<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot-scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scope<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>编辑<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-pagination</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                            <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagiantion<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                            <span class=\"token attr-name\">@current-change</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleCurrentChange<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                            <span class=\"token attr-name\">:current-page</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination.currentPage<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                            <span class=\"token attr-name\">:page-size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination.pageSize<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                            <span class=\"token attr-name\">layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>total, prev, pager, next, jumper<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                            <span class=\"token attr-name\">:total</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagination.total<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-pagination</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token comment\">&lt;!-- 新增标签弹层 --></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add-form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-dialog</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>新增图书<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:visible.sync</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dialogFormVisible<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataAddForm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formData<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:rules</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rules<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label-position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100px<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-row</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-col</span> <span class=\"token attr-name\">:span</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>12<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书类别<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formData.type<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-col</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-col</span> <span class=\"token attr-name\">:span</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>12<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名称<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formData.name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-col</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-row</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-row</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-col</span> <span class=\"token attr-name\">:span</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>24<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>描述<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formData.description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>textarea<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-col</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-row</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dialog-footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dialogFormVisible = false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>取消<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>saveBook()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>确定<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-dialog</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入组件库 --></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../plugins/elementui/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/jquery.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/axios-0.18.0.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">var</span> vue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t\t<span class=\"token literal-property property\">dataList</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 当前页要展示的分页列表数据</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token literal-property property\">formData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 表单数据</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token literal-property property\">dialogFormVisible</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 增加表单是否可见</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token literal-property property\">dialogFormVisible4Edit</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 编辑表单是否可见</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token literal-property property\">pagination</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 分页模型数据，暂时弃用</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token comment\">// 钩子函数，VUE 对象初始化完成后自动执行</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token comment\">// 重置表单</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                <span class=\"token function\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                    <span class=\"token comment\">// 清空输入框</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">formData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                <span class=\"token comment\">// 弹出添加窗口</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                <span class=\"token function\">openSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dialogFormVisible</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                <span class=\"token function\">saveBook</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                    axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">formData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                <span class=\"token comment\">// 主页列表查询</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                    axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dataList</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>由于按钮的事件都绑定好了，所以我们重点只关注 <code>saveBook()</code>  和 <code>getAll()</code>  这两个函数就行</p>\n<ul>\n<li>当调用 <code>getAll()</code>  函数时，我们需要将响应的 JSON 数据赋给 dataList 即可，而响应 JSON 数据我们在上一小节已经完成了</li>\n<li>当调用 <code>saveBook()</code>  函数时，发送 POST 请求，并将 formData 的数据响应给后台，我们这里的操作只是在控制台输出了一下</li>\n</ul>\n",
            "tags": [
                "spring复习",
                "JAVA"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/13/MySQL/",
            "url": "https://zyakmd.github.io/2024/03/13/MySQL/",
            "title": "MySQL",
            "date_published": "2024-03-13T11:27:28.000Z",
            "content_html": "<p>内容来自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtyNHkxaTdydQ==\">黑马教程</span>，分为三篇，学习了前两篇，运维篇还没学<br />\n该资源由<a href=\"%5Bhttps://github.com/Buildings-Lei/mysql_note/blob/main/README.md%5D(https://github.com/Buildings-Lei/mysql_note/blob/main/README.md)\">该参考</a>以及上面教程视频下的诸多评论资源整合。复习请回看黑马的 pdf 教程很详细</p>\n<h1 id=\"mysql连接使用\"><a class=\"anchor\" href=\"#mysql连接使用\">#</a> mysql 连接使用</h1>\n<p>安装 mysql 和配置环境变量自不必多说<br />\n在 cmd 下 <code>mysql -u root -p</code>  输入密码进入即可操作<br />\n更推荐是用 DG 连接，数据可视化，console 执行命令也方便<br />\n tips: 别忘了开服务</p>\n<h1 id=\"基础篇\"><a class=\"anchor\" href=\"#基础篇\">#</a> 基础篇</h1>\n<h2 id=\"通用语法及分类\"><a class=\"anchor\" href=\"#通用语法及分类\">#</a> 通用语法及分类</h2>\n<ul>\n<li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li>\n<li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li>\n<li>DQL: 数据查询语言，用来查询数据库中表的记录</li>\n<li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li>\n</ul>\n<h3 id=\"ddl数据定义语言\"><a class=\"anchor\" href=\"#ddl数据定义语言\">#</a> DDL（数据定义语言）</h3>\n<p>数据定义语言</p>\n<h4 id=\"数据库操作\"><a class=\"anchor\" href=\"#数据库操作\">#</a> 数据库操作</h4>\n<p>查询所有数据库：<br />\n <code>SHOW DATABASES;</code> <br />\n 查询当前数据库：<br />\n <code>SELECT DATABASE();</code> <br />\n 创建数据库：<br />\n <code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code> <br />\n 删除数据库：<br />\n <code>DROP DATABASE [ IF EXISTS ] 数据库名;</code> <br />\n 使用数据库：<br />\n <code>USE 数据库名;</code></p>\n<h5 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h5>\n<ul>\n<li>UTF8 字符集长度为 3 字节，有些符号占 4 字节，所以推荐用 utf8mb4 字符集</li>\n</ul>\n<h4 id=\"表操作\"><a class=\"anchor\" href=\"#表操作\">#</a> 表操作</h4>\n<p>查询当前数据库所有表：<br />\n <code>SHOW TABLES;</code> <br />\n 查询表结构：<br />\n <code>DESC 表名;</code> <br />\n 查询指定表的建表语句：<br />\n <code>SHOW CREATE TABLE 表名;</code></p>\n<p>创建表：</p>\n<pre><code class=\"language-mysql\">CREATE TABLE 表名(\n\t字段1 字段1类型 [COMMENT 字段1注释],\n\t字段2 字段2类型 [COMMENT 字段2注释],\n\t字段3 字段3类型 [COMMENT 字段3注释],\n\t...\n\t字段n 字段n类型 [COMMENT 字段n注释]\n)[ COMMENT 表注释 ];\n</code></pre>\n<p><strong>最后一个字段后面没有逗号</strong></p>\n<p>添加字段：<br />\n <code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code> <br />\n 例： <code>ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';</code></p>\n<p>修改数据类型：<br />\n <code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code> <br />\n 修改字段名和字段类型：<br />\n <code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code> <br />\n 例：将 emp 表的 nickname 字段修改为 username，类型为 varchar (30)<br />\n <code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';</code></p>\n<p>删除字段：<br />\n <code>ALTER TABLE 表名 DROP 字段名;</code></p>\n<p>修改表名：<br />\n <code>ALTER TABLE 表名 RENAME TO 新表名</code></p>\n<p>删除表：<br />\n <code>DROP TABLE [IF EXISTS] 表名;</code> <br />\n 删除表，并重新创建该表：<br />\n <code>TRUNCATE TABLE 表名;</code></p>\n<h3 id=\"dml数据操作语言\"><a class=\"anchor\" href=\"#dml数据操作语言\">#</a> DML（数据操作语言）</h3>\n<h4 id=\"添加数据\"><a class=\"anchor\" href=\"#添加数据\">#</a> 添加数据</h4>\n<p>指定字段：<br />\n <code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code> <br />\n 全部字段：<br />\n <code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p>\n<p>批量添加数据：<br />\n <code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code> <br />\n <code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p>\n<h5 id=\"注意事项-2\"><a class=\"anchor\" href=\"#注意事项-2\">#</a> 注意事项</h5>\n<ul>\n<li>字符串和日期类型数据应该包含在引号中</li>\n<li>插入的数据大小应该在字段的规定范围内</li>\n</ul>\n<h4 id=\"更新和删除数据\"><a class=\"anchor\" href=\"#更新和删除数据\">#</a> 更新和删除数据</h4>\n<p>修改数据：<br />\n <code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code> <br />\n 例：<br />\n <code>UPDATE emp SET name = 'Jack' WHERE id = 1;</code></p>\n<p>删除数据：<br />\n <code>DELETE FROM 表名 [ WHERE 条件 ];</code></p>\n<h3 id=\"dql数据查询语言\"><a class=\"anchor\" href=\"#dql数据查询语言\">#</a> DQL（数据查询语言）</h3>\n<p>语法：</p>\n<pre><code class=\"language-mysql\">SELECT\n\t字段列表\nFROM\n\t表名字段\nWHERE\n\t条件列表\nGROUP BY\n\t分组字段列表\nHAVING\n\t分组后的条件列表\nORDER BY\n\t排序字段列表\nLIMIT\n\t分页参数\n</code></pre>\n<h4 id=\"基础查询\"><a class=\"anchor\" href=\"#基础查询\">#</a> 基础查询</h4>\n<p>查询多个字段：<br />\n <code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code> <br />\n <code>SELECT * FROM 表名;</code></p>\n<p>设置别名：<br />\n <code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code> <br />\n <code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p>\n<p>去除重复记录：<br />\n <code>SELECT DISTINCT 字段列表 FROM 表名;</code></p>\n<p>转义：<br />\n <code>SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'</code> <br />\n/ 之后的_不作为通配符</p>\n<h4 id=\"条件查询\"><a class=\"anchor\" href=\"#条件查询\">#</a> 条件查询</h4>\n<p>语法：<br />\n <code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p>\n<p>条件：</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;&gt; 或！=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>BETWEEN ... AND ...</td>\n<td>在某个范围内（含最小、最大值）</td>\n</tr>\n<tr>\n<td>IN(...)</td>\n<td>在 in 之后的列表中的值，多选一</td>\n</tr>\n<tr>\n<td>LIKE 占位符</td>\n<td>模糊匹配（_匹配单个字符，% 匹配任意个字符）</td>\n</tr>\n<tr>\n<td>IS NULL</td>\n<td>是 NULL</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>逻辑运算符</td>\n<td>功能</td>\n</tr>\n<tr>\n<td>------------------</td>\n<td>----------------------------</td>\n</tr>\n<tr>\n<td>AND 或 &amp;&amp;</td>\n<td>并且（多个条件同时成立）</td>\n</tr>\n<tr>\n<td>OR 或 ||</td>\n<td>或者（多个条件任意一个成立）</td>\n</tr>\n<tr>\n<td>NOT 或！</td>\n<td>非，不是</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 年龄等于30\nselect * from employee where age = 30;\n-- 年龄小于30\nselect * from employee where age &lt; 30;\n-- 小于等于\nselect * from employee where age &lt;= 30;\n-- 没有身份证\nselect * from employee where idcard is null or idcard = '';\n-- 有身份证\nselect * from employee where idcard;\nselect * from employee where idcard is not null;\n-- 不等于\nselect * from employee where age != 30;\n-- 年龄在20到30之间\nselect * from employee where age between 20 and 30;\nselect * from employee where age &gt;= 20 and age &lt;= 30;\n-- 下面语句不报错，但查不到任何信息\nselect * from employee where age between 30 and 20;\n-- 性别为女且年龄小于30\nselect * from employee where age &lt; 30 and gender = '女';\n-- 年龄等于25或30或35\nselect * from employee where age = 25 or age = 30 or age = 35;\nselect * from employee where age in (25, 30, 35);\n-- 姓名为两个字\nselect * from employee where name like '__';\n-- 身份证最后为X\nselect * from employee where idcard like '%X';\n</code></pre>\n<h4 id=\"聚合查询聚合函数\"><a class=\"anchor\" href=\"#聚合查询聚合函数\">#</a> 聚合查询（聚合函数）</h4>\n<p>常见聚合函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>count</td>\n<td>统计数量</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>avg</td>\n<td>平均值</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>求和</td>\n</tr>\n</tbody>\n</table>\n<p>语法：<br />\n <code>SELECT 聚合函数(字段列表) FROM 表名;</code> <br />\n 例：<br />\n <code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p>\n<h4 id=\"分组查询\"><a class=\"anchor\" href=\"#分组查询\">#</a> 分组查询</h4>\n<p>语法：<br />\n <code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p>\n<p>where 和 having 的区别：</p>\n<ul>\n<li>执行时机不同：where 是分组之前进行过滤，不满足 where 条件不参与分组；having 是分组后对结果进行过滤。</li>\n<li>判断条件不同：where 不能对聚合函数进行判断，而 having 可以。</li>\n</ul>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）\nselect count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性数量\nselect gender, count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性的平均年龄\nselect gender, avg(age) from employee group by gender;\n-- 年龄小于45，并根据工作地址分组\nselect workaddress, count(*) from employee where age &lt; 45 group by workaddress;\n-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址\nselect workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;\n</code></pre>\n<h5 id=\"注意事项-3\"><a class=\"anchor\" href=\"#注意事项-3\">#</a> 注意事项</h5>\n<ul>\n<li>执行顺序：where &gt; 聚合函数 &gt; having</li>\n<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li>\n</ul>\n<h4 id=\"排序查询\"><a class=\"anchor\" href=\"#排序查询\">#</a> 排序查询</h4>\n<p>语法：<br />\n <code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p>\n<p>排序方式：</p>\n<ul>\n<li>ASC: 升序（默认）</li>\n<li>DESC: 降序</li>\n</ul>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 根据年龄升序排序\nSELECT * FROM employee ORDER BY age ASC;\nSELECT * FROM employee ORDER BY age;\n-- 两字段排序，根据年龄升序排序，入职时间降序排序\nSELECT * FROM employee ORDER BY age ASC, entrydate DESC;\n</code></pre>\n<h5 id=\"注意事项-4\"><a class=\"anchor\" href=\"#注意事项-4\">#</a> 注意事项</h5>\n<p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>\n<h4 id=\"分页查询\"><a class=\"anchor\" href=\"#分页查询\">#</a> 分页查询</h4>\n<p>语法：<br />\n <code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 查询第一页数据，展示10条\nSELECT * FROM employee LIMIT 0, 10;\n-- 查询第二页\nSELECT * FROM employee LIMIT 10, 10;\n</code></pre>\n<h5 id=\"注意事项-5\"><a class=\"anchor\" href=\"#注意事项-5\">#</a> 注意事项</h5>\n<ul>\n<li>起始索引从 0 开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li>\n<li>分页查询是数据库的方言，不同数据库有不同实现，MySQL 是 LIMIT</li>\n<li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li>\n</ul>\n<h4 id=\"dql执行顺序\"><a class=\"anchor\" href=\"#dql执行顺序\">#</a> DQL 执行顺序</h4>\n<p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p>\n<h3 id=\"dcl\"><a class=\"anchor\" href=\"#dcl\">#</a> DCL</h3>\n<h4 id=\"管理用户\"><a class=\"anchor\" href=\"#管理用户\">#</a> 管理用户</h4>\n<p>查询用户：</p>\n<pre><code class=\"language-mysql\">USE mysql;\nSELECT * FROM user;\n</code></pre>\n<p>创建用户:<br />\n <code>CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';</code></p>\n<p>修改用户密码：<br />\n <code>ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';</code></p>\n<p>删除用户：<br />\n <code>DROP USER '用户名'@'主机名';</code></p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 创建用户test，只能在当前主机localhost访问\ncreate user 'test'@'localhost' identified by '123456';\n-- 创建用户test，能在任意主机访问\ncreate user 'test'@'%' identified by '123456';\ncreate user 'test' identified by '123456';\n-- 修改密码\nalter user 'test'@'localhost' identified with mysql_native_password by '1234';\n-- 删除用户\ndrop user 'test'@'localhost';\n</code></pre>\n<h5 id=\"注意事项-6\"><a class=\"anchor\" href=\"#注意事项-6\">#</a> 注意事项</h5>\n<ul>\n<li>主机名可以使用 % 通配</li>\n</ul>\n<h4 id=\"权限控制\"><a class=\"anchor\" href=\"#权限控制\">#</a> 权限控制</h4>\n<p>常用权限：</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ALL, ALL PRIVILEGES</td>\n<td>所有权限</td>\n</tr>\n<tr>\n<td>SELECT</td>\n<td>查询数据</td>\n</tr>\n<tr>\n<td>INSERT</td>\n<td>插入数据</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>修改数据</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>ALTER</td>\n<td>修改表</td>\n</tr>\n<tr>\n<td>DROP</td>\n<td>删除数据库 / 表 / 视图</td>\n</tr>\n<tr>\n<td>CREATE</td>\n<td>创建数据库 / 表</td>\n</tr>\n</tbody>\n</table>\n<p>更多权限请看<a href=\"#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8\" title=\"权限一览表\">权限一览表</a></p>\n<p>查询权限：<br />\n <code>SHOW GRANTS FOR '用户名'@'主机名';</code></p>\n<p>授予权限：<br />\n <code>GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';</code></p>\n<p>撤销权限：<br />\n <code>REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';</code></p>\n<h5 id=\"注意事项-7\"><a class=\"anchor\" href=\"#注意事项-7\">#</a> 注意事项</h5>\n<ul>\n<li>多个权限用逗号分隔</li>\n<li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li>\n</ul>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<ul>\n<li>字符串函数</li>\n<li>数值函数</li>\n<li>日期函数</li>\n<li>流程函数</li>\n</ul>\n<h3 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h3>\n<p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CONCAT(s1, s2, ..., sn)</td>\n<td>字符串拼接，将 s1, s2, ..., sn 拼接成一个字符串</td>\n</tr>\n<tr>\n<td>LOWER(str)</td>\n<td>将字符串全部转为小写</td>\n</tr>\n<tr>\n<td>UPPER(str)</td>\n<td>将字符串全部转为大写</td>\n</tr>\n<tr>\n<td>LPAD(str, n, pad)</td>\n<td>左填充，用字符串 pad 对 str 的左边进行填充，达到 n 个字符串长度</td>\n</tr>\n<tr>\n<td>RPAD(str, n, pad)</td>\n<td>右填充，用字符串 pad 对 str 的右边进行填充，达到 n 个字符串长度</td>\n</tr>\n<tr>\n<td>TRIM(str)</td>\n<td>去掉字符串头部和尾部的空格</td>\n</tr>\n<tr>\n<td>SUBSTRING(str, start, len)</td>\n<td>返回从字符串 str 从 start 位置起的 len 个长度的字符串</td>\n</tr>\n<tr>\n<td>REPLACE(column, source, replace)</td>\n<td>替换字符串</td>\n</tr>\n</tbody>\n</table>\n<p>使用示例：</p>\n<pre><code class=\"language-mysql\">-- 拼接\nSELECT CONCAT('Hello', 'World');\n-- 小写\nSELECT LOWER('Hello');\n-- 大写\nSELECT UPPER('Hello');\n-- 左填充\nSELECT LPAD('01', 5, '-');\n-- 右填充\nSELECT RPAD('01', 5, '-');\n-- 去除空格\nSELECT TRIM(' Hello World ');\n-- 切片（起始索引为1）\nSELECT SUBSTRING('Hello World', 1, 5);\n</code></pre>\n<h3 id=\"数值函数\"><a class=\"anchor\" href=\"#数值函数\">#</a> 数值函数</h3>\n<p>常见函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CEIL(x)</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>FLOOR(x)</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>MOD(x, y)</td>\n<td>返回 x/y 的模</td>\n</tr>\n<tr>\n<td>RAND()</td>\n<td>返回 0~1 内的随机数</td>\n</tr>\n<tr>\n<td>ROUND(x, y)</td>\n<td>求参数 x 的四舍五入值，保留 y 位小数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"日期函数\"><a class=\"anchor\" href=\"#日期函数\">#</a> 日期函数</h3>\n<p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CURDATE()</td>\n<td>返回当前日期</td>\n</tr>\n<tr>\n<td>CURTIME()</td>\n<td>返回当前时间</td>\n</tr>\n<tr>\n<td>NOW()</td>\n<td>返回当前日期和时间</td>\n</tr>\n<tr>\n<td>YEAR(date)</td>\n<td>获取指定 date 的年份</td>\n</tr>\n<tr>\n<td>MONTH(date)</td>\n<td>获取指定 date 的月份</td>\n</tr>\n<tr>\n<td>DAY(date)</td>\n<td>获取指定 date 的日期</td>\n</tr>\n<tr>\n<td>DATE_ADD(date, INTERVAL expr type)</td>\n<td>返回一个日期 / 时间值加上一个时间间隔 expr 后的时间值</td>\n</tr>\n<tr>\n<td>DATEDIFF(date1, date2)</td>\n<td>返回起始时间 date1 和结束时间 date2 之间的天数</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- DATE_ADD\nSELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);\n</code></pre>\n<h3 id=\"流程函数\"><a class=\"anchor\" href=\"#流程函数\">#</a> 流程函数</h3>\n<p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IF(value, t, f)</td>\n<td>如果 value 为 true，则返回 t，否则返回 f</td>\n</tr>\n<tr>\n<td>IFNULL(value1, value2)</td>\n<td>如果 value1 不为空，返回 value1，否则返回 value2</td>\n</tr>\n<tr>\n<td>CASE WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END</td>\n<td>如果 val1 为 true，返回 res1，... 否则返回 default 默认值</td>\n</tr>\n<tr>\n<td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END</td>\n<td>如果 expr 的值等于 val1，返回 res1，... 否则返回 default 默认值</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">select\n\tname,\n\t(case when age &gt; 30 then '中年' else '青年' end)\nfrom employee;\nselect\n\tname,\n\t(case workaddress when '北京市' then '一线城市' when '上海市' then '一线城市' else '二线城市' end) as '工作地址'\nfrom employee;\n</code></pre>\n<h2 id=\"约束\"><a class=\"anchor\" href=\"#约束\">#</a> 约束</h2>\n<p>分类：</p>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>描述</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>非空约束</td>\n<td>限制该字段的数据不能为 null</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一约束</td>\n<td>保证该字段的所有数据都是唯一、不重复的</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>主键约束</td>\n<td>主键是一行数据的唯一标识，要求非空且唯一</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>默认约束</td>\n<td>保存数据时，如果未指定该字段的值，则采用默认值</td>\n<td>DEFAULT</td>\n</tr>\n<tr>\n<td>检查约束（8.0.1 版本后）</td>\n<td>保证字段值满足某一个条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>外键约束</td>\n<td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td>\n<td>FOREIGN KEY</td>\n</tr>\n</tbody>\n</table>\n<p>约束是作用于表中字段上的，可以再创建表 / 修改表的时候添加约束。</p>\n<h3 id=\"常用约束\"><a class=\"anchor\" href=\"#常用约束\">#</a> 常用约束</h3>\n<table>\n<thead>\n<tr>\n<th>约束条件</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主键</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>自动增长</td>\n<td>AUTO_INCREMENT</td>\n</tr>\n<tr>\n<td>不为空</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>逻辑条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>默认值</td>\n<td>DEFAULT</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">create table user(\n\tid int primary key auto_increment,\n\tname varchar(10) not null unique,\n\tage int check(age &gt; 0 and age &lt; 120),\n\tstatus char(1) default '1',\n\tgender char(1)\n);\n</code></pre>\n<h3 id=\"外键约束\"><a class=\"anchor\" href=\"#外键约束\">#</a> 外键约束</h3>\n<p>添加外键：</p>\n<pre><code class=\"language-mysql\">CREATE TABLE 表名(\n\t字段名 字段类型,\n\t...\n\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)\n);\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);\n\n-- 例子\nalter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);\n</code></pre>\n<p>删除外键：<br />\n <code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p>\n<h4 id=\"删除更新行为\"><a class=\"anchor\" href=\"#删除更新行为\">#</a> 删除 / 更新行为</h4>\n<table>\n<thead>\n<tr>\n<th>行为</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NO ACTION</td>\n<td>当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除 / 更新（与 RESTRICT 一致）</td>\n</tr>\n<tr>\n<td>RESTRICT</td>\n<td>当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除 / 更新（与 NO ACTION 一致）</td>\n</tr>\n<tr>\n<td>CASCADE</td>\n<td>当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除 / 更新外键在子表中的记录</td>\n</tr>\n<tr>\n<td>SET NULL</td>\n<td>当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为 null（要求该外键允许为 null）</td>\n</tr>\n<tr>\n<td>SET DEFAULT</td>\n<td>父表有变更时，子表将外键设为一个默认值（Innodb 不支持）</td>\n</tr>\n</tbody>\n</table>\n<p>更改删除 / 更新行为：<br />\n <code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p>\n<h2 id=\"多表查询\"><a class=\"anchor\" href=\"#多表查询\">#</a> 多表查询</h2>\n<h3 id=\"多表关系\"><a class=\"anchor\" href=\"#多表关系\">#</a> 多表关系</h3>\n<ul>\n<li>一对多（多对一）</li>\n<li>多对多</li>\n<li>一对一</li>\n</ul>\n<h4 id=\"一对多\"><a class=\"anchor\" href=\"#一对多\">#</a> 一对多</h4>\n<p>案例：部门与员工<br />\n关系：一个部门对应多个员工，一个员工对应一个部门<br />\n实现：在多的一方建立外键，指向一的一方的主键</p>\n<h4 id=\"多对多\"><a class=\"anchor\" href=\"#多对多\">#</a> 多对多</h4>\n<p>案例：学生与课程<br />\n关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br />\n实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>\n<h4 id=\"一对一\"><a class=\"anchor\" href=\"#一对一\">#</a> 一对一</h4>\n<p>案例：用户与用户详情<br />\n关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br />\n实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p>\n<h3 id=\"查询\"><a class=\"anchor\" href=\"#查询\">#</a> 查询</h3>\n<p>合并查询（笛卡尔积，会展示所有组合结果）：<br />\n <code>select * from employee, dept;</code></p>\n<blockquote>\n<p>笛卡尔积：两个集合 A 集合和 B 集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p>\n</blockquote>\n<p>消除无效笛卡尔积：<br />\n <code>select * from employee, dept where employee.dept = dept.id;</code></p>\n<h3 id=\"内连接查询\"><a class=\"anchor\" href=\"#内连接查询\">#</a> 内连接查询</h3>\n<p>内连接查询的是两张表交集的部分</p>\n<p>隐式内连接：<br />\n <code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p>\n<p>显式内连接：<br />\n <code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p>\n<p>显式性能比隐式高</p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 查询员工姓名，及关联的部门的名称\n-- 隐式\nselect e.name, d.name from employee as e, dept as d where e.dept = d.id;\n-- 显式\nselect e.name, d.name from employee as e inner join dept as d on e.dept = d.id;\n</code></pre>\n<h3 id=\"外连接查询\"><a class=\"anchor\" href=\"#外连接查询\">#</a> 外连接查询</h3>\n<p>左外连接：<br />\n查询左表所有数据，以及两张表交集部分数据<br />\n <code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code> <br />\n 相当于查询表 1 的所有数据，包含表 1 和表 2 交集部分数据</p>\n<p>右外连接：<br />\n查询右表所有数据，以及两张表交集部分数据<br />\n <code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 左\nselect e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;\nselect d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样\n-- 右\nselect d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;\n</code></pre>\n<p>左连接可以查询到没有 dept 的 employee，右连接可以查询到没有 employee 的 dept</p>\n<h3 id=\"自连接查询\"><a class=\"anchor\" href=\"#自连接查询\">#</a> 自连接查询</h3>\n<p>当前表与自身的连接查询，自连接必须使用表别名</p>\n<p>语法：<br />\n <code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p>\n<p>自连接查询，可以是内连接查询，也可以是外连接查询</p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 查询员工及其所属领导的名字\nselect a.name, b.name from employee a, employee b where a.manager = b.id;\n-- 没有领导的也查询出来\nselect a.name, b.name from employee a left join employee b on a.manager = b.id;\n</code></pre>\n<h3 id=\"联合查询-union-union-all\"><a class=\"anchor\" href=\"#联合查询-union-union-all\">#</a> 联合查询 union, union all</h3>\n<p>把多次查询的结果合并，形成一个新的查询集</p>\n<p>语法：</p>\n<pre><code class=\"language-mysql\">SELECT 字段列表 FROM 表A ...\nUNION [ALL]\nSELECT 字段列表 FROM 表B ...\n</code></pre>\n<h4 id=\"注意事项-8\"><a class=\"anchor\" href=\"#注意事项-8\">#</a> 注意事项</h4>\n<ul>\n<li>UNION ALL 会有重复结果，UNION 不会</li>\n<li>联合查询比使用 or 效率高，不会使索引失效</li>\n</ul>\n<h3 id=\"子查询\"><a class=\"anchor\" href=\"#子查询\">#</a> 子查询</h3>\n<p>SQL 语句中嵌套 SELECT 语句，称谓嵌套查询，又称子查询。<br />\n <code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code> <br />\n<strong> 子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p>\n<p>根据子查询结果可以分为：</p>\n<ul>\n<li>标量子查询（子查询结果为单个值）</li>\n<li>列子查询（子查询结果为一列）</li>\n<li>行子查询（子查询结果为一行）</li>\n<li>表子查询（子查询结果为多行多列）</li>\n</ul>\n<p>根据子查询位置可分为：</p>\n<ul>\n<li>WHERE 之后</li>\n<li>FROM 之后</li>\n<li>SELECT 之后</li>\n</ul>\n<h4 id=\"标量子查询\"><a class=\"anchor\" href=\"#标量子查询\">#</a> 标量子查询</h4>\n<p>子查询返回的结果是单个值（数字、字符串、日期等）。<br />\n常用操作符：- &lt;&gt;&gt; &gt;= &lt; &lt;=</p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 查询销售部所有员工\nselect id from dept where name = '销售部';\n-- 根据销售部部门ID，查询员工信息\nselect * from employee where dept = 4;\n-- 合并（子查询）\nselect * from employee where dept = (select id from dept where name = '销售部');\n\n-- 查询xxx入职之后的员工信息\nselect * from employee where entrydate &gt; (select entrydate from employee where name = 'xxx');\n</code></pre>\n<h4 id=\"列子查询\"><a class=\"anchor\" href=\"#列子查询\">#</a> 列子查询</h4>\n<p>返回的结果是一列（可以是多行）。</p>\n<p>常用操作符：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IN</td>\n<td>在指定的集合范围内，多选一</td>\n</tr>\n<tr>\n<td>NOT IN</td>\n<td>不在指定的集合范围内</td>\n</tr>\n<tr>\n<td>ANY</td>\n<td>子查询返回列表中，有任意一个满足即可</td>\n</tr>\n<tr>\n<td>SOME</td>\n<td>与 ANY 等同，使用 SOME 的地方都可以使用 ANY</td>\n</tr>\n<tr>\n<td>ALL</td>\n<td>子查询返回列表的所有值都必须满足</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 查询销售部和市场部的所有员工信息\nselect * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');\n-- 查询比财务部所有人工资都高的员工信息\nselect * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = '财务部'));\n-- 查询比研发部任意一人工资高的员工信息\nselect * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = '研发部'));\n</code></pre>\n<h4 id=\"行子查询\"><a class=\"anchor\" href=\"#行子查询\">#</a> 行子查询</h4>\n<p>返回的结果是一行（可以是多列）。<br />\n常用操作符：=, &lt;,&gt;, IN, NOT IN</p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 查询与xxx的薪资及直属领导相同的员工信息\nselect * from employee where (salary, manager) = (12500, 1);\nselect * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');\n</code></pre>\n<h4 id=\"表子查询\"><a class=\"anchor\" href=\"#表子查询\">#</a> 表子查询</h4>\n<p>返回的结果是多行多列<br />\n常用操作符：IN</p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">-- 查询与xxx1，xxx2的职位和薪资相同的员工\nselect * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');\n-- 查询入职日期是2006-01-01之后的员工，及其部门信息\nselect e.*, d.* from (select * from employee where entrydate &gt; '2006-01-01') as e left join dept as d on e.dept = d.id;\n</code></pre>\n<h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<p>基本操作：</p>\n<pre><code class=\"language-mysql\">-- 1. 查询张三账户余额\nselect * from account where name = '张三';\n-- 2. 将张三账户余额-1000\nupdate account set money = money - 1000 where name = '张三';\n-- 此语句出错后张三钱减少但是李四钱没有增加\n模拟sql语句错误\n-- 3. 将李四账户余额+1000\nupdate account set money = money + 1000 where name = '李四';\n\n-- 查看事务提交方式\nSELECT @@AUTOCOMMIT;\n-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效\nSET @@AUTOCOMMIT = 0;\n-- 提交事务\nCOMMIT;\n-- 回滚事务\nROLLBACK;\n\n-- 设置手动提交后上面代码改为：\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n</code></pre>\n<p>操作方式二：</p>\n<p>开启事务：<br />\n <code>START TRANSACTION 或 BEGIN TRANSACTION;</code> <br />\n 提交事务：<br />\n <code>COMMIT;</code> <br />\n 回滚事务：<br />\n <code>ROLLBACK;</code></p>\n<p>操作实例：</p>\n<pre><code class=\"language-mysql\">start transaction;\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n</code></pre>\n<h3 id=\"四大特性acid\"><a class=\"anchor\" href=\"#四大特性acid\">#</a> 四大特性 ACID</h3>\n<ul>\n<li>原子性 (Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li>\n<li>一致性 (Consistency)：事务完成时，必须使所有数据都保持一致状态</li>\n<li>隔离性 (Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>\n<li>持久性 (Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li>\n</ul>\n<h3 id=\"并发事务\"><a class=\"anchor\" href=\"#并发事务\">#</a> 并发事务</h3>\n<table>\n<thead>\n<tr>\n<th>问题</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>脏读</td>\n<td>一个事务读到另一个事务还没提交的数据</td>\n</tr>\n<tr>\n<td>不可重复读</td>\n<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>\n</tr>\n<tr>\n<td>幻读</td>\n<td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这三个问题的详细演示：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtyNHkxaTdydT9wPTU1Y2Q=\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</span></p>\n</blockquote>\n<p>并发事务隔离级别：</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read uncommitted</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Read committed</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Repeatable Read (默认)</td>\n<td>×</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>√表示在当前隔离级别下该问题会出现</li>\n<li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li>\n</ul>\n<p>查看事务隔离级别：<br />\n <code>SELECT @@TRANSACTION_ISOLATION;</code> <br />\n 设置事务隔离级别：<br />\n <code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code> <br />\nSESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p>\n<h1 id=\"进阶篇\"><a class=\"anchor\" href=\"#进阶篇\">#</a> 进阶篇</h1>\n<h2 id=\"存储引擎\"><a class=\"anchor\" href=\"#存储引擎\">#</a> 存储引擎</h2>\n<p>MySQL 体系结构：</p>\n<p><img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png\" alt=\"结构图\" title=\"结构图\" /><br />\n<img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png\" alt=\"层级描述\" title=\"层级描述\" /></p>\n<p>存储引擎就是存储数据、建立索引、更新 / 查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br />\n默认存储引擎是 InnoDB。</p>\n<p>相关操作：</p>\n<pre><code class=\"language-mysql\">-- 查询建表语句\nshow create table account;\n-- 建表时指定存储引擎\nCREATE TABLE 表名(\n\t...\n) ENGINE=INNODB;\n-- 查看当前数据库支持的存储引擎\nshow engines;\n</code></pre>\n<h3 id=\"innodb\"><a class=\"anchor\" href=\"#innodb\">#</a> InnoDB</h3>\n<p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p>\n<p>特点：</p>\n<ul>\n<li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li>\n<li><strong>行级锁</strong>，提高并发访问性能</li>\n<li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.ibd: xxx 代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li>\n</ul>\n<p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p>\n<p>知识点：</p>\n<p>查看 Mysql 变量：<br />\n <code>show variables like 'innodb_file_per_table';</code></p>\n<p>从 idb 文件提取表结构数据：<br />\n（在 cmd 运行）<br />\n <code>ibd2sdi xxx.ibd</code></p>\n<p>InnoDB 逻辑存储结构：<br />\n<img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png\" alt=\"InnoDB逻辑存储结构\" title=\"InnoDB逻辑存储结构\" /></p>\n<h3 id=\"myisam\"><a class=\"anchor\" href=\"#myisam\">#</a> MyISAM</h3>\n<p>MyISAM 是 MySQL 早期的默认存储引擎。</p>\n<p>特点：</p>\n<ul>\n<li>不支持事务，不支持外键</li>\n<li>支持表锁，不支持行锁</li>\n<li>访问速度快</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n<li>xxx.MYD: 存储数据</li>\n<li>xxx.MYI: 存储索引</li>\n</ul>\n<h3 id=\"memory\"><a class=\"anchor\" href=\"#memory\">#</a> Memory</h3>\n<p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p>\n<p>特点：</p>\n<ul>\n<li>存放在内存中，速度快</li>\n<li>hash 索引（默认）</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n</ul>\n<h3 id=\"存储引擎特点\"><a class=\"anchor\" href=\"#存储引擎特点\">#</a> 存储引擎特点</h3>\n<table>\n<thead>\n<tr>\n<th>特点</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>事务安全</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>锁机制</td>\n<td>行锁</td>\n<td>表锁</td>\n<td>表锁</td>\n</tr>\n<tr>\n<td>B+tree 索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash 索引</td>\n<td>-</td>\n<td>-</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>支持（5.6 版本之后）</td>\n<td>支持</td>\n<td>-</td>\n</tr>\n<tr>\n<td>空间使用</td>\n<td>高</td>\n<td>低</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>内存使用</td>\n<td>高</td>\n<td>低</td>\n<td>中等</td>\n</tr>\n<tr>\n<td>批量插入速度</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n<tr>\n<td>支持外键</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"存储引擎的选择\"><a class=\"anchor\" href=\"#存储引擎的选择\">#</a> 存储引擎的选择</h3>\n<p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p>\n<ul>\n<li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li>\n<li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li>\n<li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li>\n</ul>\n<p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p>\n<h2 id=\"性能分析\"><a class=\"anchor\" href=\"#性能分析\">#</a> 性能分析</h2>\n<h3 id=\"查看执行频次\"><a class=\"anchor\" href=\"#查看执行频次\">#</a> 查看执行频次</h3>\n<p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br />\n <code>SHOW GLOBAL STATUS LIKE 'Com_______';</code>  或者  <code>SHOW SESSION STATUS LIKE 'Com_______';</code> <br />\n 例： <code>show global status like 'Com_______'</code></p>\n<h3 id=\"慢查询日志\"><a class=\"anchor\" href=\"#慢查询日志\">#</a> 慢查询日志</h3>\n<p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认 10 秒）的所有 SQL 语句的日志。<br />\nMySQL 的慢查询日志默认没有开启，需要在 MySQL 的配置文件（/etc/my.cnf）中配置如下信息：<br />\n# 开启慢查询日志开关<br />\n slow_query_log=1<br />\n# 设置慢查询日志的时间为 2 秒，SQL 语句执行时间超过 2 秒，就会视为慢查询，记录慢查询日志<br />\n long_query_time=2<br />\n 更改后记得重启 MySQL 服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p>\n<p>查看慢查询日志开关状态：<br />\n <code>show variables like 'slow_query_log';</code></p>\n<h3 id=\"profile\"><a class=\"anchor\" href=\"#profile\">#</a> profile</h3>\n<p>show profile 能在做 SQL 优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br />\n <code>SELECT @@have_profiling;</code> <br />\nprofiling 默认关闭，可以通过 set 语句在 session/global 级别开启 profiling：<br />\n <code>SET profiling = 1;</code> <br />\n 查看所有语句的耗时：<br />\n <code>show profiles;</code> <br />\n 查看指定 query_id 的 SQL 语句各个阶段的耗时：<br />\n <code>show profile for query query_id;</code> <br />\n 查看指定 query_id 的 SQL 语句 CPU 的使用情况<br />\n <code>show profile cpu for query query_id;</code></p>\n<h3 id=\"explain\"><a class=\"anchor\" href=\"#explain\">#</a> explain</h3>\n<p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br />\n语法：<br />\n# 直接在 select 语句之前加上关键字 explain /desc<br />\nEXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件；</p>\n<p>EXPLAIN 各字段含义：</p>\n<ul>\n<li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id 相同，执行顺序从上到下；id 不同，值越大越先执行）</li>\n<li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE 之后包含了子查询）等</li>\n<li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li>\n<li>possible_key：可能应用在这张表上的索引，一个或多个</li>\n<li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li>\n<li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li>\n<li>rows：MySQL 认为必须要执行的行数，在 InnoDB 引擎的表中，是一个估计值，可能并不总是准确的</li>\n<li>filtered：表示返回结果的行数占需读取行数的百分比，filtered 的值越大越好</li>\n</ul>\n<h2 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h2>\n<p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p>\n<p>优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>提高数据检索效率，降低数据库的 IO 成本</li>\n<li>通过索引列对数据进行排序，降低数据排序的成本，降低 CPU 的消耗</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>索引列也是要占用空间的</li>\n<li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li>\n</ul>\n<h3 id=\"索引结构\"><a class=\"anchor\" href=\"#索引结构\">#</a> 索引结构</h3>\n<table>\n<thead>\n<tr>\n<th>索引结构</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B+Tree</td>\n<td>最常见的索引类型，大部分引擎都支持 B + 树索引</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td>\n</tr>\n<tr>\n<td>R-Tree (空间索引)</td>\n<td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>\n</tr>\n<tr>\n<td>Full-Text (全文索引)</td>\n<td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>索引</td>\n<td>InnoDB</td>\n<td>MyISAM</td>\n<td>Memory</td>\n</tr>\n<tr>\n<td>------------</td>\n<td>------------</td>\n<td>------------</td>\n<td>------------</td>\n</tr>\n<tr>\n<td>B+Tree 索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash 索引</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>R-Tree 索引</td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>Full-text</td>\n<td>5.6 版本后支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"b-tree\"><a class=\"anchor\" href=\"#b-tree\">#</a> B-Tree</h4>\n<p><img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png\" alt=\"二叉树\" title=\"二叉树\" /></p>\n<p>二叉树的缺点可以用红黑树来解决：<br />\n<img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png\" alt=\"红黑树\" title=\"红黑树\" /><br />\n红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p>\n<p>为了解决上述问题，可以使用 B-Tree 结构。<br />\nB-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为 5（5 阶）的 b-tree 为例（每个节点最多存储 4 个 key，5 个指针）</p>\n<p><img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png\" alt=\"B-Tree结构\" title=\"B-Tree结构\" /></p>\n<blockquote>\n<p>B-Tree 的数据插入过程动画参照：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtyNHkxaTdydT9wPTY4\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</span><br />\n 演示地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9CVHJlZS5odG1s\">https://www.cs.usfca.edu/~galles/visualization/BTree.html</span></p>\n</blockquote>\n<h4 id=\"btree\"><a class=\"anchor\" href=\"#btree\">#</a> B+Tree</h4>\n<p>结构图：</p>\n<p><img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png\" alt=\"B+Tree结构图\" title=\"B+Tree结构图\" /></p>\n<blockquote>\n<p>演示地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9CUGx1c1RyZWUuaHRtbA==\">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</span></p>\n</blockquote>\n<p>与 B-Tree 的区别：</p>\n<ul>\n<li>所有的数据都会出现在叶子节点</li>\n<li>叶子节点形成一个单向链表</li>\n</ul>\n<p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p>\n<p><img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png\" alt=\"MySQL B+Tree 结构图\" title=\"MySQL B+Tree 结构图\" /></p>\n<h4 id=\"hash\"><a class=\"anchor\" href=\"#hash\">#</a> Hash</h4>\n<p>哈希索引就是采用一定的 hash 算法，将键值换算成新的 hash 值，映射到对应的槽位上，然后存储在 hash 表中。<br />\n如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了 hash 冲突（也称为 hash 碰撞），可以通过链表来解决。</p>\n<p><img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png\" alt=\"Hash索引原理图\" title=\"Hash索引原理图\" /></p>\n<p>特点：</p>\n<ul>\n<li>Hash 索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、...）</li>\n<li>无法利用索引完成排序操作</li>\n<li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li>\n</ul>\n<p>存储引擎支持：</p>\n<ul>\n<li>Memory</li>\n<li>InnoDB: 具有自适应 hash 功能，hash 索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li>\n</ul>\n<h4 id=\"面试题\"><a class=\"anchor\" href=\"#面试题\">#</a> 面试题</h4>\n<ol>\n<li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li>\n</ol>\n<ul>\n<li>相对于二叉树，层级更少，搜索效率高</li>\n<li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li>\n<li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li>\n</ul>\n<h3 id=\"索引分类\"><a class=\"anchor\" href=\"#索引分类\">#</a> 索引分类</h3>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主键索引</td>\n<td>针对于表中主键创建的索引</td>\n<td>默认自动创建，只能有一个</td>\n<td>PRIMARY</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td>避免同一个表中某数据列中的值重复</td>\n<td>可以有多个</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>常规索引</td>\n<td>快速定位特定数据</td>\n<td>可以有多个</td>\n<td></td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td>\n<td>可以有多个</td>\n<td>FULLTEXT</td>\n</tr>\n</tbody>\n</table>\n<p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>聚集索引 (Clustered Index)</td>\n<td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td>\n<td>必须有，而且只有一个</td>\n</tr>\n<tr>\n<td>二级索引 (Secondary Index)</td>\n<td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>\n<td>可以存在多个</td>\n</tr>\n</tbody>\n</table>\n<p>演示图：</p>\n<p><img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png\" alt=\"大致原理\" title=\"大致原理\" /><br />\n<img data-src=\"https://learning-logs-1253130399.cos.ap-guangzhou.myqcloud.com/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png\" alt=\"演示图\" title=\"演示图\" /></p>\n<p>聚集索引选取规则：</p>\n<ul>\n<li>如果存在主键，主键索引就是聚集索引</li>\n<li>如果不存在主键，将使用第一个唯一 (UNIQUE) 索引作为聚集索引</li>\n<li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li>\n</ul>\n<h4 id=\"思考题\"><a class=\"anchor\" href=\"#思考题\">#</a> 思考题</h4>\n<p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p>\n<pre><code class=\"language-mysql\">select * from user where id = 10;\nselect * from user where name = 'Arm';\n-- 备注：id为主键，name字段创建的有索引\n</code></pre>\n<p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p>\n<p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p>\n<p>答：假设一行数据大小为 1k，一页中可以存储 16 行这样的数据。InnoDB 的指针占用 6 个字节的空间，主键假设为 bigint，占用字节数为 8.<br />\n 可得公式： <code>n * 8 + (n + 1) * 6 = 16 * 1024</code> ，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的 key 的数量，(n + 1) 表示指针数量（比 key 多一个）。算出 n 约为 1170。</p>\n<p>如果树的高度为 2，那么他能存储的数据量大概为： <code>1171 * 16 = 18736</code> ；<br />\n如果树的高度为 3，那么他能存储的数据量大概为： <code>1171 * 1171 * 16 = 21939856</code> 。</p>\n<p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p>\n<h3 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h3>\n<p>创建索引：<br />\n <code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code> <br />\n 如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p>\n<p>查看索引：<br />\n <code>SHOW INDEX FROM table_name;</code></p>\n<p>删除索引：<br />\n <code>DROP INDEX index_name ON table_name;</code></p>\n<p>案例：</p>\n<pre><code class=\"language-mysql\">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引\ncreate index idx_user_name on tb_user(name);\n-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引\ncreate unique index idx_user_phone on tb_user (phone);\n-- 为profession, age, status创建联合索引\ncreate index idx_user_pro_age_stat on tb_user(profession, age, status);\n-- 为email建立合适的索引来提升查询效率\ncreate index idx_user_email on tb_user(email);\n\n-- 删除索引\ndrop index idx_user_email on tb_user;\n</code></pre>\n<h3 id=\"使用规则\"><a class=\"anchor\" href=\"#使用规则\">#</a> 使用规则</h3>\n<h4 id=\"最左前缀法则\"><a class=\"anchor\" href=\"#最左前缀法则\">#</a> 最左前缀法则</h4>\n<p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br />\n如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p>\n<p>联合索引中，出现范围查询（&lt;,&gt;），范围查询右侧的列索引失效。可以用 &gt;= 或者 &lt;= 来规避索引失效问题。</p>\n<h4 id=\"索引失效情况\"><a class=\"anchor\" href=\"#索引失效情况\">#</a> 索引失效情况</h4>\n<ol>\n<li>在索引列上进行运算操作，索引将失效。如： <code>explain select * from tb_user where substring(phone, 10, 2) = '15';</code></li>\n<li>字符串类型字段使用时，不加引号，索引将失效。如： <code>explain select * from tb_user where phone = 17799990015;</code> ，此处 phone 的值没有加引号</li>\n<li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如： <code>explain select * from tb_user where profession like '%工程';</code> ，前后都有 % 也会失效。</li>\n<li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li>\n<li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li>\n</ol>\n<h4 id=\"sql-提示\"><a class=\"anchor\" href=\"#sql-提示\">#</a> SQL 提示</h4>\n<p>是优化数据库的一个重要手段，简单来说，就是在 SQL 语句中加入一些人为的提示来达到优化操作的目的。</p>\n<p>例如，使用索引：<br />\n <code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code> <br />\n 不使用哪个索引：<br />\n <code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code> <br />\n 必须使用哪个索引：<br />\n <code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p>\n<p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force 就是无论如何都强制使用该索引。</p>\n<h4 id=\"覆盖索引回表查询\"><a class=\"anchor\" href=\"#覆盖索引回表查询\">#</a> 覆盖索引 &amp; 回表查询</h4>\n<p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p>\n<p>explain 中 extra 字段含义：<br />\n <code>using index condition</code> ：查找使用了索引，但是需要回表查询数据<br />\n <code>using where; using index;</code> ：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p>\n<p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是 select *；如果在辅助索引中找聚集索引，如 <code>select id, name from xxx where name='xxx';</code> ，也只需要通过辅助索引 (name) 查找到对应的 id，返回 name 和 name 索引对应的 id 即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如 <code>select id, name, gender from xxx where name='xxx';</code></p>\n<p>所以尽量不要用 <code>select *</code> ，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p>\n<p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下 SQL 语句进行优化，该如何进行才是最优方案：<br />\n <code>select id, username, password from tb_user where username='itcast';</code></p>\n<p>解：给 username 和 password 字段建立联合索引，则不需要回表查询，直接覆盖索引</p>\n<h4 id=\"前缀索引\"><a class=\"anchor\" href=\"#前缀索引\">#</a> 前缀索引</h4>\n<p>当字段类型为字符串（varchar, text 等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘 IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p>\n<p>语法： <code>create index idx_xxxx on table_name(columnn(n));</code> <br />\n 前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是 1，这是最好的索引选择性，性能也是最好的。<br />\n求选择性公式：</p>\n<pre><code class=\"language-mysql\">select count(distinct email) / count(*) from tb_user;\nselect count(distinct substring(email, 1, 5)) / count(*) from tb_user;\n</code></pre>\n<p>show index 里面的 sub_part 可以看到接取的长度</p>\n<h4 id=\"单列索引联合索引\"><a class=\"anchor\" href=\"#单列索引联合索引\">#</a> 单列索引 &amp; 联合索引</h4>\n<p>单列索引：即一个索引只包含单个列<br />\n联合索引：即一个索引包含了多个列<br />\n在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p>\n<p>单列索引情况：<br />\n <code>explain select id, phone, name from tb_user where phone = '17799990010' and name = '韩信';</code> <br />\n 这句只会用到 phone 索引字段</p>\n<h5 id=\"注意事项-9\"><a class=\"anchor\" href=\"#注意事项-9\">#</a> 注意事项</h5>\n<ul>\n<li>多条件联合查询时，MySQL 优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li>\n</ul>\n<h3 id=\"设计原则\"><a class=\"anchor\" href=\"#设计原则\">#</a> 设计原则</h3>\n<ol>\n<li>针对于数据量较大，且查询比较频繁的表建立索引</li>\n<li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li>\n<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li>\n<li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li>\n<li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li>\n<li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li>\n<li>如果索引列不能存储 NULL 值，请在创建表时使用 NOT NULL 约束它。当优化器知道每列是否包含 NULL 值时，它可以更好地确定哪个索引最有效地用于查询</li>\n</ol>\n<h2 id=\"sql-优化\"><a class=\"anchor\" href=\"#sql-优化\">#</a> SQL 优化</h2>\n<h3 id=\"插入数据\"><a class=\"anchor\" href=\"#插入数据\">#</a> 插入数据</h3>\n<p>普通插入：</p>\n<ol>\n<li>采用批量插入（一次插入的数据不建议超过 1000 条）</li>\n<li>手动提交事务</li>\n<li>主键顺序插入</li>\n</ol>\n<p>大批量插入：<br />\n如果一次性需要插入大批量数据，使用 insert 语句插入性能较低，此时可以使用 MySQL 数据库提供的 load 指令插入。</p>\n<pre><code class=\"language-mysql\"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）\nmysql --local-infile -u root -p\n# 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关\nset global local_infile = 1;\nselect @@local_infile;\n# 执行load指令将准备好的数据，加载到表结构中\nload data local infile '/root/sql1.log' into table 'tb_user' fields terminated by ',' lines terminated by '\\n';\n</code></pre>\n<h3 id=\"主键优化\"><a class=\"anchor\" href=\"#主键优化\">#</a> 主键优化</h3>\n<p>数据组织方式：在 InnoDB 存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p>\n<p>页分裂：页可以为空，也可以填充一般，也可以填充 100%，每个页包含了 2-N 行数据（如果一行数据过大，会行溢出），根据主键排列。<br />\n页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的 50%），InnoDB 会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p>\n<p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p>\n<blockquote>\n<p>文字说明不够清晰明了，具体可以看视频里的 PPT 演示过程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtyNHkxaTdydT9wPTkw\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</span></p>\n</blockquote>\n<p>主键设计原则：</p>\n<ul>\n<li>满足业务需求的情况下，尽量降低主键的长度</li>\n<li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li>\n<li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li>\n<li>业务操作时，避免对主键的修改</li>\n</ul>\n<h3 id=\"order-by优化\"><a class=\"anchor\" href=\"#order-by优化\">#</a> order by 优化</h3>\n<ol>\n<li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li>\n<li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li>\n</ol>\n<p>如果 order by 字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain 的 extra 信息显示的是 <code>Using index, Using filesort</code> ，如果要优化掉 Using filesort，则需要另外再创建一个索引，如： <code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code> ，此时使用 <code>select id, age, phone from tb_user order by age asc, phone desc;</code>  会全部走索引</p>\n<p>总结：</p>\n<ul>\n<li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li>\n<li>尽量使用覆盖索引</li>\n<li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li>\n<li>如果不可避免出现 filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认 256k）</li>\n</ul>\n<h3 id=\"group-by优化\"><a class=\"anchor\" href=\"#group-by优化\">#</a> group by 优化</h3>\n<ul>\n<li>在分组操作时，可以通过索引来提高效率</li>\n<li>分组操作时，索引的使用也是满足最左前缀法则的</li>\n</ul>\n<p>如索引为 <code>idx_user_pro_age_stat</code> ，则句式可以是 <code>select ... where profession order by age</code> ，这样也符合最左前缀法则</p>\n<h3 id=\"limit优化\"><a class=\"anchor\" href=\"#limit优化\">#</a> limit 优化</h3>\n<p>常见的问题如 <code>limit 2000000, 10</code> ，此时需要 MySQL 排序前 2000000 条记录，但仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大。<br />\n优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p>\n<p>例如：</p>\n<pre><code class=\"language-mysql\">-- 此语句耗时很长\nselect * from tb_sku limit 9000000, 10;\n-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询\nselect id from tb_sku order by id limit 9000000, 10;\n-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit\n-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);\n-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度\nselect * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;\n</code></pre>\n<h3 id=\"count优化\"><a class=\"anchor\" href=\"#count优化\">#</a> count 优化</h3>\n<p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count (*) 的时候会直接返回这个数，效率很高（前提是不适用 where）；<br />\nInnoDB 在执行 count (*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br />\n优化方案：自己计数，如创建 key-value 表存储在内存或硬盘，或者是用 redis</p>\n<p>count 的几种用法：</p>\n<ul>\n<li>如果 count 函数的参数（count 里面写的那个字段）不是 NULL（字段值不为 NULL），累计值就加一，最后返回累计值</li>\n<li>用法：count (*)、count (主键)、count (字段)、count (1)</li>\n<li>count (主键) 跟 count (*) 一样，因为主键不能为空；count (字段) 只计算字段值不为 NULL 的行；count (1) 引擎会为每行添加一个 1，然后就 count 这个 1，返回结果也跟 count (*) 一样；count (null) 返回 0</li>\n</ul>\n<p>各种用法的性能：</p>\n<ul>\n<li>count (主键)：InnoDB 引擎会遍历整张表，把每行的主键 id 值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li>\n<li>count (字段)：没有 not null 约束的话，InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为 null，不为 null，计数累加；有 not null 约束的话，InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li>\n<li>count (1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li>\n<li>count (*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li>\n</ul>\n<p>按效率排序：count (字段) &lt; count (主键) &lt; count (1) &lt; count (*)，所以尽量使用 count (*)</p>\n<h3 id=\"update优化避免行锁升级为表锁\"><a class=\"anchor\" href=\"#update优化避免行锁升级为表锁\">#</a> update 优化（避免行锁升级为表锁）</h3>\n<p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p>\n<p>如以下两条语句：<br />\n <code>update student set no = '123' where id = 1;</code> ，这句由于 id 有主键索引，所以只会锁这一行；<br />\n <code>update student set no = '123' where name = 'test';</code> ，这句由于 name 没有索引，所以会把整张表都锁住进行数据更新，解决方法是给 name 字段添加索引</p>\n<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"整型\"><a class=\"anchor\" href=\"#整型\">#</a> 整型</h2>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>取值范围</th>\n<th>大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TINYINT</td>\n<td>-128〜127</td>\n<td>1 个字节</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>-32768〜32767</td>\n<td>2 个宇节</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>-8388608〜8388607</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>INT (INTEGHR)</td>\n<td>-2147483648〜2147483647</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>-9223372036854775808〜9223372036854775807</td>\n<td>8 个字节</td>\n</tr>\n</tbody>\n</table>\n<p>无符号在数据类型后加 unsigned 关键字。</p>\n<h2 id=\"浮点型\"><a class=\"anchor\" href=\"#浮点型\">#</a> 浮点型</h2>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FLOAT</td>\n<td>单精度浮点数</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>双精度浮点数</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>DECIMAL (M, D)，DEC</td>\n<td>压缩的 “严格” 定点数</td>\n<td>M+2 个字节</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"日期和时间\"><a class=\"anchor\" href=\"#日期和时间\">#</a> 日期和时间</h2>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>日期格式</th>\n<th>日期范围</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>YEAR</td>\n<td>YYYY</td>\n<td>1901 ~ 2155</td>\n<td>1 个字节</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>HH:MM:SS</td>\n<td>-838:59:59 ~ 838:59:59</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td>YYYY-MM-DD</td>\n<td>1000-01-01 ~ 9999-12-3</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>\n<td>4 个字节</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CHAR(M)</td>\n<td>固定长度非二进制字符串</td>\n<td>M 字节，1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>VARCHAR(M)</td>\n<td>变长非二进制字符串</td>\n<td>L+1 字节，在此，L&lt; = M 和 1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>TINYTEXT</td>\n<td>非常小的非二进制字符串</td>\n<td>L+1 字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>小的非二进制字符串</td>\n<td>L+2 字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>中等大小的非二进制字符串</td>\n<td>L+3 字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>大的非二进制字符串</td>\n<td>L+4 字节，在此，L&lt;2^32</td>\n</tr>\n<tr>\n<td>ENUM</td>\n<td>枚举类型，只能有一个枚举字符串值</td>\n<td>1 或 2 个字节，取决于枚举值的数目 (最大值为 65535)</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>一个设置，字符串对象可以有零个或 多个 SET 成员</td>\n<td>1、2、3、4 或 8 个字节，取决于集合 成员的数量（最多 64 个成员）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"二进制类型\"><a class=\"anchor\" href=\"#二进制类型\">#</a> 二进制类型</h2>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BIT(M)</td>\n<td>位字段类型</td>\n<td>大约 (M+7)/8 字节</td>\n</tr>\n<tr>\n<td>BINARY(M)</td>\n<td>固定长度二进制字符串</td>\n<td>M 字节</td>\n</tr>\n<tr>\n<td>VARBINARY (M)</td>\n<td>可变长度二进制字符串</td>\n<td>M+1 字节</td>\n</tr>\n<tr>\n<td>TINYBLOB (M)</td>\n<td>非常小的 BLOB</td>\n<td>L+1 字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>BLOB (M)</td>\n<td>小 BLOB</td>\n<td>L+2 字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMBLOB (M)</td>\n<td>中等大小的 BLOB</td>\n<td>L+3 字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGBLOB (M)</td>\n<td>非常大的 BLOB</td>\n<td>L+4 字节，在此，L&lt;2^32</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"权限一览表\"><a class=\"anchor\" href=\"#权限一览表\">#</a> 权限一览表</h1>\n<blockquote>\n<p>具体权限的作用详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL3ByaXZpbGVnZXMtcHJvdmlkZWQuaHRtbA==\">官方文档</span></p>\n</blockquote>\n<p>GRANT 和 REVOKE 允许的静态权限</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Privilege</th>\n<th style=\"text-align:left\">Grant Table Column</th>\n<th style=\"text-align:left\">Context</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all\"> <code>ALL [PRIVILEGES]</code> </a></td>\n<td style=\"text-align:left\">Synonym for “all privileges”</td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter\"> <code>ALTER</code> </a></td>\n<td style=\"text-align:left\"><code>Alter_priv</code></td>\n<td style=\"text-align:left\">Tables</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine\"> <code>ALTER ROUTINE</code> </a></td>\n<td style=\"text-align:left\"><code>Alter_routine_priv</code></td>\n<td style=\"text-align:left\">Stored routines</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create\"> <code>CREATE</code> </a></td>\n<td style=\"text-align:left\"><code>Create_priv</code></td>\n<td style=\"text-align:left\">Databases, tables, or indexes</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role\"> <code>CREATE ROLE</code> </a></td>\n<td style=\"text-align:left\"><code>Create_role_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine\"> <code>CREATE ROUTINE</code> </a></td>\n<td style=\"text-align:left\"><code>Create_routine_priv</code></td>\n<td style=\"text-align:left\">Stored routines</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace\"> <code>CREATE TABLESPACE</code> </a></td>\n<td style=\"text-align:left\"><code>Create_tablespace_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables\"> <code>CREATE TEMPORARY TABLES</code> </a></td>\n<td style=\"text-align:left\"><code>Create_tmp_table_priv</code></td>\n<td style=\"text-align:left\">Tables</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user\"> <code>CREATE USER</code> </a></td>\n<td style=\"text-align:left\"><code>Create_user_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view\"> <code>CREATE VIEW</code> </a></td>\n<td style=\"text-align:left\"><code>Create_view_priv</code></td>\n<td style=\"text-align:left\">Views</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete\"> <code>DELETE</code> </a></td>\n<td style=\"text-align:left\"><code>Delete_priv</code></td>\n<td style=\"text-align:left\">Tables</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop\"> <code>DROP</code> </a></td>\n<td style=\"text-align:left\"><code>Drop_priv</code></td>\n<td style=\"text-align:left\">Databases, tables, or views</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role\"> <code>DROP ROLE</code> </a></td>\n<td style=\"text-align:left\"><code>Drop_role_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event\"> <code>EVENT</code> </a></td>\n<td style=\"text-align:left\"><code>Event_priv</code></td>\n<td style=\"text-align:left\">Databases</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute\"> <code>EXECUTE</code> </a></td>\n<td style=\"text-align:left\"><code>Execute_priv</code></td>\n<td style=\"text-align:left\">Stored routines</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file\"> <code>FILE</code> </a></td>\n<td style=\"text-align:left\"><code>File_priv</code></td>\n<td style=\"text-align:left\">File access on server host</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option\"> <code>GRANT OPTION</code> </a></td>\n<td style=\"text-align:left\"><code>Grant_priv</code></td>\n<td style=\"text-align:left\">Databases, tables, or stored routines</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index\"> <code>INDEX</code> </a></td>\n<td style=\"text-align:left\"><code>Index_priv</code></td>\n<td style=\"text-align:left\">Tables</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert\"> <code>INSERT</code> </a></td>\n<td style=\"text-align:left\"><code>Insert_priv</code></td>\n<td style=\"text-align:left\">Tables or columns</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables\"> <code>LOCK TABLES</code> </a></td>\n<td style=\"text-align:left\"><code>Lock_tables_priv</code></td>\n<td style=\"text-align:left\">Databases</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process\"> <code>PROCESS</code> </a></td>\n<td style=\"text-align:left\"><code>Process_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy\"> <code>PROXY</code> </a></td>\n<td style=\"text-align:left\">See  <code>proxies_priv</code>  table</td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references\"> <code>REFERENCES</code> </a></td>\n<td style=\"text-align:left\"><code>References_priv</code></td>\n<td style=\"text-align:left\">Databases or tables</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload\"> <code>RELOAD</code> </a></td>\n<td style=\"text-align:left\"><code>Reload_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client\"> <code>REPLICATION CLIENT</code> </a></td>\n<td style=\"text-align:left\"><code>Repl_client_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave\"> <code>REPLICATION SLAVE</code> </a></td>\n<td style=\"text-align:left\"><code>Repl_slave_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select\"> <code>SELECT</code> </a></td>\n<td style=\"text-align:left\"><code>Select_priv</code></td>\n<td style=\"text-align:left\">Tables or columns</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases\"> <code>SHOW DATABASES</code> </a></td>\n<td style=\"text-align:left\"><code>Show_db_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view\"> <code>SHOW VIEW</code> </a></td>\n<td style=\"text-align:left\"><code>Show_view_priv</code></td>\n<td style=\"text-align:left\">Views</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown\"> <code>SHUTDOWN</code> </a></td>\n<td style=\"text-align:left\"><code>Shutdown_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super\"> <code>SUPER</code> </a></td>\n<td style=\"text-align:left\"><code>Super_priv</code></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger\"> <code>TRIGGER</code> </a></td>\n<td style=\"text-align:left\"><code>Trigger_priv</code></td>\n<td style=\"text-align:left\">Tables</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update\"> <code>UPDATE</code> </a></td>\n<td style=\"text-align:left\"><code>Update_priv</code></td>\n<td style=\"text-align:left\">Tables or columns</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage\"> <code>USAGE</code> </a></td>\n<td style=\"text-align:left\">Synonym for “no privileges”</td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n</tbody>\n</table>\n<p>GRANT 和 REVOKE 允许的动态权限</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Privilege</th>\n<th style=\"text-align:left\">Context</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin\"> <code>APPLICATION_PASSWORD_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Dual password administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt\"> <code>AUDIT_ABORT_EXEMPT</code> </a></td>\n<td style=\"text-align:left\">Allow queries blocked by audit log filter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin\"> <code>AUDIT_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Audit log administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin\"> <code>AUTHENTICATION_POLICY_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Authentication administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin\"> <code>BACKUP_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Backup administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin\"> <code>BINLOG_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Backup and Replication administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin\"> <code>BINLOG_ENCRYPTION_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Backup and Replication administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin\"> <code>CLONE_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Clone administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin\"> <code>CONNECTION_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin\"> <code>ENCRYPTION_KEY_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin\"> <code>FIREWALL_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Firewall administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt\"> <code>FIREWALL_EXEMPT</code> </a></td>\n<td style=\"text-align:left\">Firewall administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user\"> <code>FIREWALL_USER</code> </a></td>\n<td style=\"text-align:left\">Firewall administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs\"> <code>FLUSH_OPTIMIZER_COSTS</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status\"> <code>FLUSH_STATUS</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables\"> <code>FLUSH_TABLES</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources\"> <code>FLUSH_USER_RESOURCES</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin\"> <code>GROUP_REPLICATION_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Replication administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream\"> <code>GROUP_REPLICATION_STREAM</code> </a></td>\n<td style=\"text-align:left\">Replication administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive\"> <code>INNODB_REDO_LOG_ARCHIVE</code> </a></td>\n<td style=\"text-align:left\">Redo log archiving administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user\"> <code>NDB_STORED_USER</code> </a></td>\n<td style=\"text-align:left\">NDB Cluster</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin\"> <code>PASSWORDLESS_USER_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Authentication administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin\"> <code>PERSIST_RO_VARIABLES_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier\"> <code>REPLICATION_APPLIER</code> </a></td>\n<td style=\"text-align:left\"><code>PRIVILEGE_CHECKS_USER</code>  for a replication channel</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin\"> <code>REPLICATION_SLAVE_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Replication administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin\"> <code>RESOURCE_GROUP_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Resource group administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user\"> <code>RESOURCE_GROUP_USER</code> </a></td>\n<td style=\"text-align:left\">Resource group administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin\"> <code>ROLE_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin\"> <code>SESSION_VARIABLES_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id\"> <code>SET_USER_ID</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine\"> <code>SHOW_ROUTINE</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user\"> <code>SYSTEM_USER</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin\"> <code>SYSTEM_VARIABLES_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin\"> <code>TABLE_ENCRYPTION_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin\"> <code>VERSION_TOKEN_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin\"> <code>XA_RECOVER_ADMIN</code> </a></td>\n<td style=\"text-align:left\">Server administration</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"图形化界面工具\"><a class=\"anchor\" href=\"#图形化界面工具\">#</a> 图形化界面工具</h1>\n<ul>\n<li>DataGrip (有破解脚本): <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9kYXRhZ3JpcC8=\">https://www.jetbrains.com/datagrip/</span></li>\n<li>Workbench (免费): <span class=\"exturl\" data-url=\"aHR0cDovL2Rldi5teXNxbC5jb20vZG93bmxvYWRzL3dvcmtiZW5jaC8=\">http://dev.mysql.com/downloads/workbench/</span></li>\n<li>navicat (收费，试用版 30 天): <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmF2aWNhdC5jb20vZW4vZG93bmxvYWQvbmF2aWNhdC1mb3ItbXlzcWw=\">https://www.navicat.com/en/download/navicat-for-mysql</span></li>\n<li>Sequel Pro (开源免费，仅支持 Mac OS): <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zZXF1ZWxwcm8uY29tLw==\">http://www.sequelpro.com/</span></li>\n<li>HeidiSQL (免费): <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5oZWlkaXNxbC5jb20v\">http://www.heidisql.com/</span></li>\n<li>phpMyAdmin (免费): <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGhwbXlhZG1pbi5uZXQv\">https://www.phpmyadmin.net/</span></li>\n<li>SQLyog: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcWx5b2cuZW4uc29mdG9uaWMuY29tLw==\">https://sqlyog.en.softonic.com/</span></li>\n</ul>\n<h1 id=\"小技巧\"><a class=\"anchor\" href=\"#小技巧\">#</a> 小技巧</h1>\n<ol>\n<li>在 SQL 语句之后加上 <code>\\G</code>  会将结果的表格形式转换成行文本形式</li>\n<li>查看 Mysql 数据库占用空间：</li>\n</ol>\n<pre><code class=\"language-mysql\">SELECT table_schema &quot;Database Name&quot;\n     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;\nFROM information_schema.TABLES\nGROUP BY table_schema;\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/11/spring%E5%A4%8D%E4%B9%A0/Spring%20framework/",
            "url": "https://zyakmd.github.io/2024/03/11/spring%E5%A4%8D%E4%B9%A0/Spring%20framework/",
            "title": "Spring framework",
            "date_published": "2024-03-11T05:56:18.000Z",
            "content_html": "<p>Spring 框架主要的优势是在 <code>简化开发</code> 和 <code>框架整合</code> 上，至于如何实现就是学习 Spring 框架的主要内容：</p>\n<ul>\n<li>简化开发: Spring 框架中提供了两个大的核心技术，分别是:\n<ul>\n<li><mark>IOC</mark></li>\n<li><mark>AOP</mark></li>\n<li><mark>事务处理</mark></li>\n</ul>\n</li>\n<li>框架整合: Spring 在框架整合这块已经做到了极致，它可以整合市面上几乎所有主流框架，比如:\n<ul>\n<li><mark>MyBatis</mark></li>\n<li>MyBatis-plus</li>\n<li>Struts</li>\n<li>Struts2</li>\n<li>Hibernate</li>\n<li>……<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUZpNHkxUzdpeC8/dmRfc291cmNlPThmNjc0NTk4N2Y2ZDljNGEzMzM1NzA4NTJlNDMzZDZj\"> 参考黑马教程</span></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"spring-介绍\"><a class=\"anchor\" href=\"#spring-介绍\">#</a> spring 介绍</h1>\n<p>基于 java web 的升级，很久以前学的来，挺多忘了，这部分不完整的整理了，参考下别人的 javaweb 内容的博客快速过下：</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeWJvcmcyMDc3LmdpdGh1Yi5pby8yMDIyLzA4LzExL0phdmFXZWIwMS8=\">maven+mybatis</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeWJvcmcyMDc3LmdpdGh1Yi5pby8yMDIyLzA4LzE2L0phdmFXZWIwNC8=\">HTTP&amp;Tomcat&amp;Servlet</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeWJvcmcyMDc3LmdpdGh1Yi5pby8yMDIyLzA4LzE3L0phdmFXZWIwNS8=\">Request&amp;Response</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeWJvcmcyMDc3LmdpdGh1Yi5pby8yMDIyLzA4LzE4L0phdmFXZWIwNi8=\">MVC 与三层架构</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\" /><label for=\"cbx_4\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeWJvcmcyMDc3LmdpdGh1Yi5pby8yMDIyLzA4LzIwL0phdmFXZWIwNy8=\">会话技术 - cookie、session</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\" /><label for=\"cbx_5\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeWJvcmcyMDc3LmdpdGh1Yi5pby8yMDIyLzA4LzIxL0phdmFXZWIwOC8=\">Filter&amp;Listener-Servlet 外的三大 JW 的组件</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\" /><label for=\"cbx_6\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeWJvcmcyMDc3LmdpdGh1Yi5pby8yMDIyLzA4LzI0L0phdmFXZWIxMC8=\">JW 综合案例</span></label></li>\n</ul>\n<p>发现这个佬↑用了图床，有些教程里的图片可以直接白嫖！</p>\n<h2 id=\"学什么\"><a class=\"anchor\" href=\"#学什么\">#</a> 学什么</h2>\n<ul>\n<li>\n<p>简化开发: Spring 框架中提供了两个大的核心技术，分别是:</p>\n<ul>\n<li><mark>IOC</mark></li>\n<li><mark>AOP</mark></li>\n<li><mark>事务处理</mark></li>\n</ul>\n<ol>\n<li>Spring 的简化操作都是基于这两块内容，所以这也是 Spring 学习中最为重要的两个知识点。</li>\n<li>事务处理属于 Spring 中 AOP 的具体应用，可以简化项目中的事务管理，也是 Spring 技术中的一大亮点。</li>\n</ol>\n</li>\n<li>\n<p>框架整合: Spring 在框架整合这块已经做到了极致，它可以整合市面上几乎所有主流框架，比如:</p>\n<ul>\n<li><mark>MyBatis</mark></li>\n<li>MyBatis-plus</li>\n<li>Struts</li>\n<li>Struts2</li>\n<li>Hibernate</li>\n<li>……</li>\n</ul>\n<p>这些框架中，我们目前只学习了 MyBatis，所以在 Spring 框架的学习中，主要是学习如何整合 MyBatis。</p>\n<p>综上所述，对于 Spring 的学习，主要学习四块内容:</p>\n<ol>\n<li>IOC</li>\n<li>整合 Mybatis (IOC 的具体应用)</li>\n<li>AOP</li>\n<li>声明式事务 (AOP 的具体应用)</li>\n</ol>\n</li>\n</ul>\n<p><strong>方法</strong></p>\n<ul>\n<li>学习 Spring 框架设计思想\n<ul>\n<li>对于 Spring 来说，它能迅速占领全球市场，不只是说它的某个功能比较强大，更重要是在它的 <code>思想</code> 上。</li>\n</ul>\n</li>\n<li>学习基础操作，思考操作与思想间的联系\n<ul>\n<li>掌握了 Spring 的设计思想，然后就需要通过一些基础操作来思考操作与思想之间的关联关系</li>\n</ul>\n</li>\n<li>学习案例，熟练应用操作的同时，体会思想\n<ul>\n<li>会了基础操作后，就需要通过大量案例来熟练掌握框架的具体应用，加深对设计思想的理解。</li>\n</ul>\n</li>\n</ul>\n<p><em>Spring 的学习主线是 IOC、AOP、声明式事务和整合 MyBais</em></p>\n<h1 id=\"spring-framework\"><a class=\"anchor\" href=\"#spring-framework\">#</a> spring framework</h1>\n<ol>\n<li>核心层 Core Container: 核心容器，这个模块是 Spring 最核心的模块，其他的都需要依赖该模块</li>\n<li>AOP 层 AOP: 面向切面编程，它依赖核心层容器，目的是在不改变原有代码的前提下对其进行功能增强 Aspects: AOP 是思想，Aspects 是对 AOP 思想的具体实现</li>\n<li>数据层 Data Access: 数据访问，Spring 全家桶中有对数据访问的具体实现技术 Data Integration: 数据集成，Spring 支持整合其他的数据层解决方案，比如 Mybatis Transactions: 事务，Spring 中事务管理是 Spring AOP 的一个具体实现，也是后期学习的 重点内容</li>\n<li>Web 层 这一层的内容将在 SpringMVC 框架具体学习</li>\n<li>Test 层 Spring 主要整合了 Junit 来完成单元测试和集成测试</li>\n</ol>\n<p>例如：业务层需要调用数据层的方法，就需要在业务层 new 数据层的对象。如果数据层的实现类发生变化，那么业务层的代码也需要跟着改变，发生变更后，都需要进行编译 打包和重部署。总而言之就是<em><strong>耦合度高</strong></em>。</p>\n<p>解决方案 / 核心思想: <em>使用对象时，在程序中不要主动使用 new 产生对象，转换为由外部提供对象</em></p>\n<h2 id=\"ioc-ioc容器-bean-di\"><a class=\"anchor\" href=\"#ioc-ioc容器-bean-di\">#</a> IOC、IOC 容器、Bean、DI</h2>\n<h3 id=\"iocinversion-of-control控制反转\"><a class=\"anchor\" href=\"#iocinversion-of-control控制反转\">#</a> IOC（Inversion of Control）控制反转</h3>\n<p>(1) 什么是控制反转呢？</p>\n<ul>\n<li>\n<p>使用对象时，由主动 new 产生对象转换为由<mark>外部</mark>提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转。</p>\n<ul>\n<li>\n<p>业务层要用数据层的类对象，以前是自己 <code>new</code>  的</p>\n</li>\n<li>\n<p>现在自己不 new 了，交给 <code>别人[外部]</code>  来创建对象</p>\n</li>\n<li>\n<p><code>别人[外部]</code>  就反转控制了数据层对象的创建权</p>\n</li>\n<li>\n<p>这种思想就是控制反转</p>\n</li>\n<li>\n<p>别人 [外部] 指定是什么呢？继续往下学</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>(2) Spring 和 IOC 之间的关系是什么呢？</p>\n<ul>\n<li>\n<p>Spring 技术对 IOC 思想进行了实现</p>\n</li>\n<li>\n<p>Spring 提供了一个容器，称为<strong> IOC 容器</strong>，用来充当 IOC 思想中的 &quot;外部&quot;</p>\n</li>\n<li>\n<p>IOC 思想中的 <code>别人[外部]</code>  指的就是 Spring 的 IOC 容器</p>\n</li>\n</ul>\n<p>(3) IOC 容器的作用以及内部存放的是什么？</p>\n<ul>\n<li>\n<p>IOC 容器负责对象的创建、初始化等一系列工作，其中包含了数据层和业务层的类对象</p>\n</li>\n<li>\n<p>被创建或被管理的<strong>对象</strong>在 IOC 容器中统称为<strong> Bean</strong></p>\n</li>\n<li>\n<p>IOC 容器中放的就是一个个的 Bean 对象</p>\n</li>\n</ul>\n<p>(4) 当 IOC 容器中创建好 service 和 dao 对象后，程序能正确执行么？</p>\n<ul>\n<li>\n<p><em>不行，因为 service 运行需要依赖 dao 对象</em></p>\n</li>\n<li>\n<p>IOC 容器中虽然有 service 和 dao 对象</p>\n</li>\n<li>\n<p>但是 service 对象和 dao 对象没有任何关系</p>\n</li>\n<li>\n<p>需要把 dao 对象交给 service, 也就是说<em>要绑定 service 和 dao 对象之间的关系</em></p>\n</li>\n</ul>\n<p>像这种在容器中建立对象与对象之间的绑定关系就要用到 DI:</p>\n<h3 id=\"didependency-injection依赖注入\"><a class=\"anchor\" href=\"#didependency-injection依赖注入\">#</a> DI（Dependency Injection）依赖注入</h3>\n<ol>\n<li>什么是依赖注入呢？</li>\n</ol>\n<ul>\n<li>在容器中建立 bean 与 bean 之间的依赖关系的整个过程，称为依赖注入\n<ul>\n<li>业务层要用数据层的类对象，以前是自己 <code>new</code>  的</li>\n<li>现在自己不 new 了，靠 <code>别人[外部其实指的就是IOC容器]</code>  来给注入进来</li>\n<li>这种思想就是依赖注入</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>IOC 容器中哪些 bean 之间要建立依赖关系呢？</li>\n</ol>\n<ul>\n<li>这个需要程序员根据业务需求提前建立好关系，如业务层需要依赖数据层，service 就要和 dao 建立依赖关系</li>\n</ul>\n<p>IOC 和 DI 的最终目标就是: <strong>充分解耦</strong>，具体实现靠:</p>\n<ul>\n<li>使用 IOC 容器管理 bean（IOC)</li>\n<li>在 IOC 容器内将有依赖关系的 bean 进行关系绑定（DI）<br />\n最终结果为：使用对象时不仅可以直接从 IOC 容器中获取，并且获取到的 bean 已经绑定了所有的依赖关系.</li>\n</ul>\n<h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<ol>\n<li>什么 IOC/DI 思想？</li>\n</ol>\n<ul>\n<li>IOC: 控制反转，控制反转的是对象的创建权</li>\n<li>DI: 依赖注入，绑定对象与对象之间的依赖关系</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>什么是 IOC 容器？<br />\nSpring 创建了一个容器用来存放所创建的对象，这个容器就叫 IOC 容器</p>\n</li>\n<li>\n<p>什么是 Bean?<br />\n 容器中所存放的一个个对象就叫 Bean 或 Bean 对象</p>\n</li>\n</ol>\n<h1 id=\"iocdi配置入门案例\"><a class=\"anchor\" href=\"#iocdi配置入门案例\">#</a> IOC/DI 配置入门案例</h1>\n<h2 id=\"本地化\"><a class=\"anchor\" href=\"#本地化\">#</a> 本地化</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUzMzg1L2FydGljbGUvZGV0YWlscy8xMjk0ODMyMjE=\">https://blog.csdn.net/qq_39653385/article/details/129483221</span></p>\n<ol>\n<li>调整项目的 jdk 版本为 1.8</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>调整 spring-context 为版本为 5.3.23</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.23<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>另一个文章找到的换版本</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-compiler-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t    <span class=\"token comment\">&lt;!-- 根据个人需要自己修改 --></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span><span class=\"token punctuation\">></span></span>16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>source</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>target</span><span class=\"token punctuation\">></span></span>16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>target</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><mark>记得刷新 maven</mark>，最终选择 2、3 结合起来一整段更换</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.23<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"ioc案例\"><a class=\"anchor\" href=\"#ioc案例\">#</a> IOC 案例</h2>\n<h3 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析</h3>\n<ol>\n<li>Spring 是使用容器来管理 bean 对象的，那么管什么？</li>\n</ol>\n<ul>\n<li>主要管理项目中所使用到的类对象，比如 (Service 和 Dao)</li>\n</ul>\n<ol start=\"2\">\n<li>如何将被管理的对象告知 IOC 容器？</li>\n</ol>\n<ul>\n<li>使用配置文件</li>\n</ul>\n<ol start=\"3\">\n<li>被管理的对象交给 IOC 容器，要想从容器中获取对象，就先得思考如何获取到 IOC 容器？</li>\n</ol>\n<ul>\n<li>Spring 框架提供相应的接口</li>\n</ul>\n<ol start=\"4\">\n<li>IOC 容器得到后，如何从容器中获取 bean?</li>\n</ol>\n<ul>\n<li>调用 Spring 框架提供对应接口中的方法</li>\n</ul>\n<ol start=\"5\">\n<li>使用 Spring 导入哪些坐标？</li>\n</ol>\n<ul>\n<li>用别人的东西，就需要在 pom.xml 添加对应的依赖</li>\n</ul>\n<p><strong>需求：</strong> 将实现类交给 Spring 管理，并从容器中获取对应的 bean 对象进行方法调用。</p>\n<h3 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h3>\n<ol>\n<li>创建 Maven 的 java 项目<br />\n<img data-src=\"image-20240311204656859.png\" alt=\"\" /></li>\n<li>pom.xml 添加 Spring 的依赖 jar 包</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--  添加 Spring 的依赖 jar 包 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建 BookService,BookServiceImpl，BookDao 和 BookDaoImpl 四个类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>resources 下添加 spring 配置文件 (applicationContext.xml)，并完成 bean 的配置</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">&lt;!-- 上面的自动生成 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!--bean 标签标示配置 bean</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \tid 属性标示给 bean 起名字</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \tclass 属性表示给 bean 定义类型</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t--></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.service.impl.BookServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 Spring 提供的接口完成 IOC 容器的创建</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 Spring 提供的接口完成 IOC 容器的创建，创建 App 类，编写 main 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 1. 获取 IOC 容器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 2. 从容器中获取对象，并进行方法调用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// BookDao bookDao = (BookDao) ctx.getBean(\"bookDao\");</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// bookDao.save();</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">BookService</span> bookService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookService</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        bookService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Spring 的 IOC 入门案例已经完成，但是在 <code>BookServiceImpl</code>  的类中依然存在 <code>BookDaoImpl</code>  对象的 new 操作，它们之间的耦合度还是比较高，这块该如何解决，就需要用到下面的 <code>DI:依赖注入</code> 。</p>\n<h2 id=\"di案例\"><a class=\"anchor\" href=\"#di案例\">#</a> DI 案例</h2>\n<h3 id=\"思路分析-2\"><a class=\"anchor\" href=\"#思路分析-2\">#</a> 思路分析</h3>\n<ol>\n<li>要想实现依赖注入，必须要基于 IOC 管理 Bean</li>\n</ol>\n<ul>\n<li>DI 的入门案例要依赖于前面 IOC 的入门案例</li>\n</ul>\n<ol start=\"2\">\n<li>Service 中使用 new 形式创建的 Dao 对象是否保留？</li>\n</ol>\n<ul>\n<li>需要删除掉，最终要使用 IOC 容器中的 bean 对象</li>\n</ul>\n<ol start=\"3\">\n<li>Service 中需要的 Dao 对象如何进入到 Service 中？</li>\n</ol>\n<ul>\n<li>在 Service 中提供方法，让 Spring 的 IOC 容器可以通过该方法传入 bean 对象</li>\n</ul>\n<ol start=\"4\">\n<li>Service 与 Dao 间的关系如何描述？</li>\n</ol>\n<ul>\n<li>使用配置文件</li>\n</ul>\n<h3 id=\"实现-2\"><a class=\"anchor\" href=\"#实现-2\">#</a> 实现</h3>\n<ol>\n<li>删除业务层中使用 new 的方式创建的 dao 对象</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 删除业务层中使用 new 的方式创建的 dao 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>为属性提供 setter 方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 删除业务层中使用 new 的方式创建的 dao 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 提供对应的 set 方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBookDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bookDao <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>在配置文件中添加依赖注入的配置 (添加 property)</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.service.impl.BookServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">&lt;!-- 配置 server 与 dao 的关系 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">&lt;!--property 标签表示配置当前 bean 的属性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tname 属性表示配置哪一个具体的属性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tref 属性表示参照哪一个 bean</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><mark>注意：配置中的两个 bookDao 的含义是不一样的</mark></p>\n<ul>\n<li>name=&quot;bookDao&quot; 中 <code>bookDao</code>  的作用是让 Spring 的 IOC 容器在获取到名称后，将首字母大写，前面加 set 找对应的 <code>setBookDao()</code>  方法进行对象注入</li>\n<li>ref=&quot;bookDao&quot; 中 <code>bookDao</code>  的作用是让 Spring 能在 IOC 容器中找到 id 为 <code>bookDao</code>  的 Bean 对象给 <code>bookService</code>  进行注入</li>\n<li>综上所述，对应关系如下:<br />\n<img data-src=\"image-20240311212320948.png\" alt=\"\" /></li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU4MDU4NjUzL2FydGljbGUvZGV0YWlscy8xMjExNTM5ODI=\">补充</span><br />\n xml 中 bean 的顺序无关，给属性赋值看的是<mark> set 方法</mark>，与属性名无关，<mark> 与有没有属性无关</mark>，看的只是 set 方法，有 set 就是正确的</p>\n<h2 id=\"ioc相关内容\"><a class=\"anchor\" href=\"#ioc相关内容\">#</a> IOC 相关内容</h2>\n<h3 id=\"bean基础配置\"><a class=\"anchor\" href=\"#bean基础配置\">#</a> bean 基础配置</h3>\n<p>对于 bean 的配置中，主要包括 <code>bean基础配置</code> ， <code>bean的别名配置</code> ， <code>bean的作用范围配置</code> <mark> (重点)</mark>, 这三部分内容：</p>\n<ol>\n<li><strong>bean 基础配置</strong></li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ul>\n<li>class 属性能不能写接口如 <code>BookDao</code>  的类全名呢？<br />\n 答案肯定是不行，因为接口是没办法创建对象的。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>bean 的别名配置</strong></li>\n</ol>\n<ul>\n<li>前面提过为 bean 设置 id 时，id 必须唯一，但是如果由于命名习惯而产生了分歧后，该如何解决？<br />\n<mark> 使用别名</mark></li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--name: 为 bean 指定别名，别名可以有多个，使用逗号，分号，空格进行分隔 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>service service4 bookEbi<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.service.impl.BookServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!--scope：为 bean 设置作用范围，可选值为单例 singloton，非单例 prototype--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>实现类中可以用别名 (name) 实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppForName</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 此处根据 bean 标签的 id 属性和 name 属性的任意一个值来获取 bean 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BookService</span> bookService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookService</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"service4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        bookService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>别名 (name) 还可以用作别的 bean 中依赖注入的 ref，<strong>必须存在</strong></p>\n<ol start=\"3\">\n<li><strong>bean 的作用范围配置</strong><br />\n <code>&lt;bean id=&quot;bookDao&quot; name=&quot;dao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot; scope=&quot;singleton&quot;/&gt;</code>  bean 的 scope 属性中设置<br />\n<img data-src=\"image-20240311213433499.png\" alt=\"\" /></li>\n</ol>\n<p>同一个 bean 获取两次，将对象打印到控制台，看打印出的地址值是否一致？</p>\n<ul>\n<li>默认情况下，Spring 创建的 bean 对象都是单例的<br />\n即下面会得到相同的结果</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppForScope</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookDao1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookDao2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>&lt;bean id=&quot;bookDao&quot; name=&quot;dao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot; scope=&quot;prototype&quot;/&gt;</code> <br />\n 后会得到不同的结果</p>\n<h4 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h4>\n<ul>\n<li>\n<p>为什么 bean 默认为单例？</p>\n<ul>\n<li>bean 为单例的意思是在 Spring 的 IOC 容器中只会有该类的一个对象</li>\n<li>bean 对象只有一个就避免了对象的频繁创建与销毁，达到了 bean 对象的复用，性能高</li>\n</ul>\n</li>\n<li>\n<p>bean 在容器中是单例的，会不会产生线程安全问题？</p>\n<ul>\n<li>如果对象是有状态对象，即该对象有成员变量可以用来存储数据的，</li>\n<li>因为所有请求线程共用一个 bean 对象，所以会存在线程安全问题。</li>\n<li>如果对象是无状态对象，即该对象没有成员变量没有进行数据存储的，</li>\n<li>因方法中的局部变量在方法调用完成后会被销毁，所以不会存在线程安全问题。</li>\n</ul>\n</li>\n<li>\n<p>哪些 bean 对象适合交给容器进行管理？</p>\n<ul>\n<li>表现层对象</li>\n<li>业务层对象</li>\n<li>数据层对象</li>\n<li>工具对象</li>\n</ul>\n</li>\n<li>\n<p>哪些 bean 对象不适合交给容器进行管理？</p>\n<ul>\n<li>封装实例的域对象（有状态），因为会引发线程安全问题，所以不适合。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"bean实例化\"><a class=\"anchor\" href=\"#bean实例化\">#</a> bean 实例化</h3>\n<ul>\n<li>bean 是如何创建的</li>\n<li>实例化 bean 的三种方式， <code>构造方法</code> ， <code>静态工厂</code> 和 <code>实例工厂</code></li>\n</ul>\n<h4 id=\"构造方法\"><a class=\"anchor\" href=\"#构造方法\">#</a> 构造方法</h4>\n<p><em><strong>bean 本质上就是对象，对象在 new 的时候会使用构造方法完成，那创建 bean 也是使用构造方法完成的。</strong></em></p>\n<p>构造一个无参构造函数，且设置为私有类，能访问到，显而易见<mark> Spring 底层用的是反射</mark>。<br />\n构造一个有参狗在函数，则程序会报错，说明 Spring 底层使用的是类的<mark>无参构造方法</mark>。</p>\n<pre><code>tips:为了不让外界访问到有的属性和方法的private可以用反射访问。或者编译时不知道的意思，如类的名称放在XML文件中，属性和属性值放在XML文件中，需要在运行时读取XML文件，动态获取类的信息\n</code></pre>\n<h4 id=\"静态工厂\"><a class=\"anchor\" href=\"#静态工厂\">#</a> 静态工厂</h4>\n<p>兼容早期老系统</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>orderDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.factory.OrderDaoFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getOrderDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p><code>class</code> : 工厂类的类全名<br />\n <code>factory-mehod</code> : 具体工厂类中创建对象的方法名</p>\n<p><img data-src=\"image-20240311235827552.png\" alt=\"\" /></p>\n<p>此时从容器中获取 bean，还是在工厂类中 new 对象，意义是？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppForInstanceOrder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">OrderDao</span> orderDao <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderDao</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orderDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        orderDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>在工厂的静态方法中，我们除了 new 对象还可以做其他的一些业务操作，这些操作必不可少，如:</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderDaoFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">OrderDao</span> <span class=\"token function\">getOrderDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"factory setup....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 模拟必要的业务操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><mark>原本的因为 static 不能加？</mark></p>\n<h4 id=\"实例工厂\"><a class=\"anchor\" href=\"#实例工厂\">#</a> 实例工厂</h4>\n<p>相比于静态工厂就是少了工厂类中的 static，工厂本身也需要被 new</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDao</span> <span class=\"token function\">getUserDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppForInstanceUser</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 创建实例工厂对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">UserDaoFactory</span> userDaoFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDaoFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 通过实例工厂对象创建对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">UserDao</span> userDao <span class=\"token operator\">=</span> userDaoFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getUserDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>交给 spring 进行 bean 实例化，多了个 <code>factory-bean</code>  要指定：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.factory.UserDaoFactory<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getUserDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userFactory<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ul>\n<li>创建实例化工厂对象，对应的是第一行配置</li>\n<li>调用对象中的方法来创建 bean，对应的是第二行配置<br />\n<img data-src=\"image-20240312101230127.png\" alt=\"\" /><br />\n从 IOC 容器中获取 bean 的方法</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppForInstanceUser</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">UserDao</span> userDao <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实例工厂实例化比较复杂，Spring 为了简化这种配置方式就提供了一种叫 <code>FactoryBean</code>  (泛型) 的方式来简化开发。</p>\n<div class=\"tab\" data-id=\"fanxing\" data-title=\"泛型方法\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 泛型补充</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 泛型方法：调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericMethodTest</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 泛型方法 printArray                         </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span> <span class=\"token class-name\">E</span> <span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inputArray <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 输出数组元素            </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">E</span> element <span class=\"token operator\">:</span> inputArray <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span> element <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 创建不同类型数组： Integer, Double 和 Character</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> doubleArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Character</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token char\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'O'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"整型数组元素为:\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span> intArray  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传递一个整型数组</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\n双精度型数组元素为:\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span> doubleArray <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传递一个双精度型数组</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\n字符型数组元素为:\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span> charArray <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传递一个字符型数组</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 结果</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>整型数组元素为<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>双精度型数组元素为<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token number\">1.1</span> <span class=\"token number\">2.2</span> <span class=\"token number\">3.3</span> <span class=\"token number\">4.4</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>字符型数组元素为<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token class-name\">H</span> <span class=\"token class-name\">E</span> <span class=\"token class-name\">L</span> <span class=\"token class-name\">L</span> <span class=\"token class-name\">O</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"fanxing\" data-title=\"泛型类\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 泛型类：泛型方法一样，泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Box</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> integerBox <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Box</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Box</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringBox <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Box</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    integerBox<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    stringBox<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"菜鸟教程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"整型值为 :%d\\n\\n\"</span><span class=\"token punctuation\">,</span> integerBox<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串为 :%s\\n\"</span><span class=\"token punctuation\">,</span> stringBox<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 结果</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>整型值为 <span class=\"token operator\">:</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>字符串为 <span class=\"token operator\">:</span>菜鸟教程</pre></td></tr></table></figure></div>\n<p>有两个方法要重写，单例模式默认 true<br />\n<img data-src=\"image-20240312104055573.png\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FactoryBean的使用</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个 UserDaoFactoryBean 的类，实现 FactoryBean 接口，重写接口的方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoFactoryBean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FactoryBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 代替原始实例工厂中创建对象的方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDao</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 返回所创建类的 Class 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时 bean 配置为：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.factory.UserDaoFactoryBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h4 id=\"小结-2\"><a class=\"anchor\" href=\"#小结-2\">#</a> 小结</h4>\n<p>3.5 种 bean 实例方法，对应 xml 配置</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 方式一：构造方法实例化 bean--></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">&lt;!-- 方式二：使用静态工厂实例化 bean--></span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>orderDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.factory.OrderDaoFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getOrderDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- 方式三：使用实例工厂实例化 bean--></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.factory.UserDaoFactory<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getUserDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userFactory<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">&lt;!-- 方式四：使用 FactoryBean 实例化 bean--></span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.factory.UserDaoFactoryBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ol>\n<li>\n<p>bean 是如何创建的呢？<br />\n 构造方法</p>\n</li>\n<li>\n<p>Spring 的 IOC 实例化对象的三种方式分别是:</p>\n<ul>\n<li>构造方法 (常用)</li>\n<li>静态工厂 (了解)</li>\n<li>实例工厂 (了解)\n<ul>\n<li>FactoryBean (实用)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>这些方式中，重点掌握 <code>构造方法</code> 和 <code>FactoryBean</code>  即可。</p>\n<p><span class=\"label warning\">warning</span> 需要注意的一点是，构造方法在类中默认会提供，但是如果重写了构造方法，默认的就会消失，在使用的过程中需要注意，如果需要重写构造方法，最好把默认的构造方法也重写下。</p>\n<h3 id=\"bean的生命周期\"><a class=\"anchor\" href=\"#bean的生命周期\">#</a> bean 的生命周期</h3>\n<p>思考的是如何在 bean 的创建之后和销毁之前把我们需要添加的内容添加进去</p>\n<ol>\n<li>环境准备：添加 BookDao、BookDaoImpl、BookService 和 BookServiceImpl 类</li>\n</ol>\n<div class=\"tab\" data-id=\"smzq_environment\" data-title=\"BookDao\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"smzq_environment\" data-title=\"BookDaoImpl\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 表示 bean 初始化对应的操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 表示 bean 销毁前对应的操作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"destory...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"smzq_environment\" data-title=\"BookService\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"smzq_environment\" data-title=\"BookServiceImpl\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBookDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bookDao <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"smzq_environment\" data-title=\"spring的xml\">\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>init<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">destroy-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>destory<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"smzq_environment\" data-title=\"运行类\">\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 加载Spring的IOC容器，并从中获取对应的bean对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class AppForLifeCycle &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    public static void main( String[] args ) &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ApplicationContext ctx = new </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        \tClassPathXmlApplicationContext(\"applicationContext.xml\");</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        BookDao bookDao = (BookDao) ctx.getBean(\"bookDao\");</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        bookDao.save();</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr></table></figure></div>\n<p>增添了 <code>init-method</code>  和 <code>destroy-method</code>  进行 bean 周期前后的操作<br />\n<span class=\"label warning\"> warning</span> 运行会发现 init 方法执行了，但是 destroy 方法却未执行</p>\n<ul>\n<li>Spring 的 IOC 容器是运行在 JVM 中</li>\n<li>运行 main 方法后，JVM 启动，Spring 加载配置文件生成 IOC 容器，从容器获取 bean 对象，然后调方法执行</li>\n<li>main 方法执行完后，JVM 退出，这个时候 IOC 容器中的 bean 还没有来得及销毁就已经结束了</li>\n<li>所以没有调用对应的 destroy 方法</li>\n</ul>\n<p>要执行销毁操作则主动销毁，退出前 close / 注册钩子 <strong>关闭容器</strong></p>\n<div class=\"tab\" data-id=\"bean_xiaohui\" data-title=\"close\">\n<ul>\n<li>ApplicationContext 中没有 close 方法</li>\n<li>需要将 ApplicationContext 更换成 ClassPathXmlApplicationContext<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ClassPathXmlApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ......</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 调用 ctx 的 close () 方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>运行程序，就能执行 destroy 方法的内容</li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"bean_xiaohui\" data-title=\"注册钩子\">\n<ul>\n<li>registerShutdownHook 在 ApplicationContext 中也没有</li>\n<li>设置好回调函数，让 JVM 在退出之前回调此函数来关闭容器<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ClassPathXmlApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">registerShutdownHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// ......</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 注册了就不用 close</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// ctx.close();</span></pre></td></tr></table></figure></li>\n</ul>\n</div>\n<p><span class=\"label info\">相同点</span>：这两种都能用来关闭容器</p>\n<p><span class=\"label info\">不同点</span> : close () 是在调用的时候关闭，registerShutdownHook () 是在 JVM 退出前调用关闭。</p>\n<p>Spring 提供了两个接口来完成生命周期的控制，添加两个接口 <code>InitializingBean</code> ，  <code>DisposableBean</code>  并实现接口中的两个方法 <code>afterPropertiesSet</code>  和 <code>destroy</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DisposableBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBookDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bookDao <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"service destroy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"service init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image-20240312113146415.png\" alt=\"\" /><br />\n= 先生成并且后销毁 注入的依赖 =</p>\n<p><span class=\"label warning\">warning</span></p>\n<ul>\n<li>对于 InitializingBean 接口中的 afterPropertiesSet 方法，翻译过来为 <code>属性设置之后</code> 。</li>\n<li>对于 BookServiceImpl 来说，bookDao 是它的一个属性</li>\n<li>setBookDao 方法是 Spring 的 IOC 容器为其注入属性的方法</li>\n<li>思考:afterPropertiesSet 和 setBookDao 谁先执行？\n<ul>\n<li>从方法名分析，猜想应该是 setBookDao 方法先执行</li>\n<li>验证思路，在 setBookDao 方法中添加一句话<br />\n <code>public void setBookDao(BookDao bookDao) &#123;     \t\tSystem.out.println(&quot;set .....&quot;);     \t\tthis.bookDao = bookDao;     \t&#125;  </code></li>\n<li>重新运行 AppForLifeCycle，打印结果如下:<br />\n 验证的结果和我们猜想的结果是一致的，所以初始化方法会在类中属性设置之后执行。<br />\n<img data-src=\"image-20240312113606247.png\" alt=\"\" /></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"小结-3\"><a class=\"anchor\" href=\"#小结-3\">#</a> 小结</h4>\n<ol>\n<li>关于 Spring 中对 bean 生命周期控制提供了两种方式:</li>\n</ol>\n<ul>\n<li>在配置文件中的 bean 标签中添加 <code>init-method</code>  和 <code>destroy-method</code>  属性</li>\n<li>类实现 <code>InitializingBean</code>  与 <code>DisposableBean</code>  接口，这种方式了解下即可。</li>\n</ul>\n<ol start=\"2\">\n<li>对于 bean 的生命周期控制在 bean 的整个生命周期中所处的位置如下:</li>\n</ol>\n<ul>\n<li>初始化容器\n<ul>\n<li>1. 创建对象 (内存分配)</li>\n<li>2. 执行构造方法</li>\n<li>3. 执行属性注入 (set 操作)</li>\n<li><mark>4. 执行 bean 初始化方法</mark></li>\n</ul>\n</li>\n<li>使用 bean\n<ul>\n<li>1. 执行业务操作</li>\n</ul>\n</li>\n<li>关闭 / 销毁容器\n<ul>\n<li><mark>1. 执行 bean 销毁方法</mark></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>关闭容器的两种方式:</li>\n</ol>\n<ul>\n<li>ConfigurableApplicationContext 是 ApplicationContext 的子类\n<ul>\n<li>close () 方法</li>\n<li>registerShutdownHook () 方法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"di相关内容\"><a class=\"anchor\" href=\"#di相关内容\">#</a> DI 相关内容</h2>\n<h3 id=\"依赖注入方式\"><a class=\"anchor\" href=\"#依赖注入方式\">#</a> 依赖注入方式</h3>\n<h4 id=\"setter\"><a class=\"anchor\" href=\"#setter\">#</a> setter</h4>\n<p>对于多个引用数据注入，都要实现 set 方法和 xml 设置 ref</p>\n<div class=\"tab\" data-id=\"set_yinyong\" data-title=\"set方法\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUserDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDao <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBookDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bookDao <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"set_yinyong\" data-title=\"xml配置\">\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.service.impl.BookServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div>\n<p>对于简单数据（string、int 等）也要实现 set，但 xml 不用 <code>ref</code> （ref 是指向 Spring 的 IOC 容器中的另一个 bean 对象的），而是 <code>value</code></p>\n<div class=\"tab\" data-id=\"set_simple\" data-title=\"set方法\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> databaseName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> connectionNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setConnectionNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> connectionNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connectionNum <span class=\"token operator\">=</span> connectionNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDatabaseName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> databaseName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>databaseName <span class=\"token operator\">=</span> databaseName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span><span class=\"token operator\">+</span>databaseName<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>connectionNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"set_simple\" data-title=\"xml配置\">\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>databaseName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mysql<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connectionNum<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.service.impl.BookServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div>\n<ul>\n<li>对于引用数据类型使用的是 <code>&lt;property name=&quot;&quot; ref=&quot;&quot;/&gt;</code></li>\n<li>对于简单数据类型使用的是 <code>&lt;property name=&quot;&quot; value=&quot;&quot;/&gt;</code></li>\n</ul>\n<h4 id=\"构造器函数注入\"><a class=\"anchor\" href=\"#构造器函数注入\">#</a> 构造器（函数）注入</h4>\n<p>以 BookServiceImpl 为例，类似 set，还是要实现 <code>this.bookDao = bookDao;</code>  在构造函数中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">BookServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span> bookDao1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bookDao <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//    public void setBookDao(BookDao bookDao) &#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//        this.bookDao = bookDao;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//    &#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>区别在于 xml 中不用 <code>property</code>  而是  <code>constructor-arg</code>  且此时 name 中的是形参名，这会导致耦合</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.service.impl.BookServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>多属性</p>\n<div class=\"tab\" data-id=\"constructor_lei\" data-title=\"类引用java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BookServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">,</span><span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bookDao <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDao <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"constructor_lei\" data-title=\"类引用xml\">\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.service.impl.BookServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"constructor_simple\" data-title=\"简单参数java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> databaseName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> connectionNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BookDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> databaseName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> connectionNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>databaseName <span class=\"token operator\">=</span> databaseName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connectionNum <span class=\"token operator\">=</span> connectionNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span><span class=\"token operator\">+</span>databaseName<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>connectionNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"constructor_simple\" data-title=\"简单参数xml\">\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>databaseName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mysql<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connectionNum<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>666<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.service.impl.BookServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div>\n<p><code>&lt;contructor-arg&gt;</code>  的配置顺序可以任意 name 要跟着形参名变化，存在紧耦合，具体该如何解决？</p>\n<ol>\n<li>删除 name 属性，添加 type 属性，按照类型注入</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>int<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.String<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mysql<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>但是如果构造方法参数中有类型相同的参数，这种方式就不太好实现了</li>\n</ul>\n<ol start=\"2\">\n<li>删除 type 属性，添加 index 属性，按照索引下标注入，下标从 0 开始</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mysql<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>这种方式可以解决参数类型重复问题</li>\n<li>但是如果构造方法参数顺序发生变化后，这种方式又带来了耦合问题</li>\n</ul>\n<p>如何选择呢？</p>\n<ol>\n<li>强制依赖使用构造器进行，使用<mark> setter 注入有概率不进行注入</mark>导致 null 对象出现\n<ul>\n<li>强制依赖指对象在创建的过程中必须要注入指定的参数（不然报错）</li>\n</ul>\n</li>\n<li>可选依赖使用 setter 注入进行，灵活性强\n<ul>\n<li>可选依赖指对象在创建过程中注入的参数可有可无</li>\n</ul>\n</li>\n<li>Spring 框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨</li>\n<li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用 setter 注入完成可选依赖的注入</li>\n<li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供 setter 方法就必须使用构造器注入</li>\n<li><strong><mark>自己开发的模块推荐使用 setter 注入</mark></strong></li>\n</ol>\n<h3 id=\"自动装配\"><a class=\"anchor\" href=\"#自动装配\">#</a> 自动装配</h3>\n<ul>\n<li>IoC 容器根据 bean 所依赖的资源在容器中自动查找并注入到 bean 中的过程称为自动装配</li>\n</ul>\n<p>有哪些？</p>\n<ul>\n<li><mark>按类型（常用）</mark></li>\n<li>按名称</li>\n<li>按构造方法</li>\n<li>不启用自动装配</li>\n</ul>\n<h4 id=\"按类型\"><a class=\"anchor\" href=\"#按类型\">#</a> 按类型</h4>\n<p><strong><mark>set 方法必须要有，对应的 bean 也必须要有，bean 不唯一也不行</mark></strong><br />\n xml 中：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--autowire 属性：开启自动装配，通常使用按类型装配 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.service.impl.BookServiceImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autowire</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>byType<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h4 id=\"按名称\"><a class=\"anchor\" href=\"#按名称\">#</a> 按名称</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--autowire 属性：开启自动装配，通常使用按类型装配 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.service.impl.BookServiceImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autowire</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>byName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ul>\n<li>bookDao 是 private 修饰的，外部类无法直接方法\n<ul>\n<li>外部类只能通过属性的 set 方法进行访问</li>\n<li>对外部类来说，setBookDao 方法名，去掉 set 后首字母小写是其属性名\n<ul>\n<li>为什么是去掉 set 首字母小写？</li>\n<li>这个规则是 set 方法生成的默认规则，set 方法的生成是把属性名首字母大写前面加 set 形成的方法名</li>\n</ul>\n</li>\n<li>所以按照名称注入，其实是和对应的 set 方法有关，但是如果按照标准起名称，属性名和 set 对应的名是一致的</li>\n</ul>\n</li>\n<li>如果按照名称去找对应的 bean 对象，找不到则注入 Null</li>\n<li>当某一个类型在 IOC 容器中有多个对象，按照名称注入只找其指定名称对应的 bean 对象，不会报错</li>\n</ul>\n<p><span class=\"label warning\">warning</span></p>\n<ol>\n<li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li>\n<li>使用按类型装配时（byType）必须保障容器中相同类型的 bean 唯一，推荐使用</li>\n<li>使用按名称装配时（byName）必须保障容器中具有指定名称的 bean，因变量名与配置耦合，不推荐使用</li>\n<li>自动装配优先级低于 setter 注入与构造器注入，同时出现时自动装配配置失效</li>\n</ol>\n<h3 id=\"集合注入\"><a class=\"anchor\" href=\"#集合注入\">#</a> 集合注入</h3>\n<p>前面我们已经能完成引入数据类型和简单数据类型的注入，但是还有一种数据类型<mark>集合</mark>，集合中既可以装简单数据类型也可以装引用数据类型，对于集合，在 Spring 中该如何注入呢？</p>\n<ul>\n<li>数组</li>\n<li>List</li>\n<li>Set</li>\n<li>Map</li>\n<li>Properties</li>\n</ul>\n<p>以 BookDao、BookDaoImpl 类和其 xml 为例</p>\n<div class=\"tab\" data-id=\"zhuru_jihe\" data-title=\"BookDao\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"zhuru_jihe\" data-title=\"BookDaoImpl\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Properties</span> properties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"遍历数组:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"遍历List\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"遍历Set\"</span> <span class=\"token operator\">+</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"遍历Map\"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"遍历Properties\"</span> <span class=\"token operator\">+</span> properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">//setter.... 方法省略，自己使用工具生成</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"zhuru_jihe\" data-title=\"xml\">\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>array<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>array</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>100<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>200<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>300<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>array</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>itcast<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>boxuegu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>chuanzhihui<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>set<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>itcast<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>boxuegu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>boxuegu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>map</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>country<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>china<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>henan<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>kaifeng<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>map</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>props</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>country<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>china<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>henan<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>kaifeng<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>props</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div>\n<ul>\n<li>property 标签表示 setter 方式注入，构造方式注入 constructor-arg 标签内部也可以写 <code>&lt;array&gt;</code> 、 <code>&lt;list&gt;</code> 、 <code>&lt;set&gt;</code> 、 <code>&lt;map&gt;</code> 、 <code>&lt;props&gt;</code>  标签</li>\n<li>List 的底层也是通过数组实现的，所以 <code>&lt;list&gt;</code>  和 <code>&lt;array&gt;</code>  标签是可以混用</li>\n<li>集合中要添加引用类型，只需要把 <code>&lt;value&gt;</code>  标签改成 <code>&lt;ref&gt;</code>  标签，这种方式用的比较少</li>\n</ul>\n<h1 id=\"iocdi配置管理第三方bean\"><a class=\"anchor\" href=\"#iocdi配置管理第三方bean\">#</a> IOC/DI 配置管理第三方 bean</h1>\n<p>前面所讲的知识点都是基于我们自己写的类，现在如果有需求让我们去管理第三方 jar 包中的类，该如何管理？</p>\n<h2 id=\"环境准备\"><a class=\"anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<p>依旧是创建 Maven 项目、添加依赖、在配置中注入依赖、运行类引入，再记录下全流程</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>resources 下添加 spring 的配置文件 applicationContext.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>编写一个运行类 App</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"思路分析-3\"><a class=\"anchor\" href=\"#思路分析-3\">#</a> 思路分析</h2>\n<p>需求：使用 Spring 的 IOC 容器来管理 Druid 连接池对象</p>\n<ol>\n<li>使用第三方的技术，需要在 pom.xml 添加依赖</li>\n<li>在配置文件中将【第三方的类】制作成一个 bean，让 IOC 容器进行管理</li>\n<li>数据库连接需要基础的四要素 <code>驱动</code> 、 <code>连接</code> 、 <code>用户名</code> 和 <code>密码</code> ，【如何注入】到对应的 bean 中</li>\n<li>从 IOC 容器中获取对应的 bean 对象，将其打印到控制台查看结果</li>\n</ol>\n<ul>\n<li>第三方的类指的是什么？</li>\n<li>如何注入数据库连接四要素？</li>\n</ul>\n<blockquote>\n<p>步骤 1: 导入 <code>druid</code>  的依赖，pom.xml 中添加</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 配置第三方 bean</p>\n</blockquote>\n<p>在 applicationContext.xml 配置文件中添加 <code>DruidDataSource</code>  的配置</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">&lt;!-- 管理 DruidDataSource 对象 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.alibaba.druid.pool.DruidDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/spring_db<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>driverClassName: 数据库驱动</li>\n<li>url: 数据库连接地址</li>\n<li>username: 数据库连接用户名</li>\n<li>password: 数据库连接密码</li>\n<li>数据库连接的四要素要和自己使用的数据库信息一致。</li>\n</ul>\n<p>tips: maven -search 插件</p>\n<ul>\n<li>\n<p>第三方的类指的是什么？<br />\nDruidDataSource</p>\n</li>\n<li>\n<p>如何注入数据库连接四要素？<br />\nsetter 注入</p>\n</li>\n</ul>\n<blockquote>\n<p>另一个例子，管理 <code>C3P0</code>  数据源<br />\n步骤 1: 导入 <code>C3P0</code>  的依赖</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>c3p0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>c3p0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.9.1.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>对于新的技术，不知道具体的坐标该如何查找？</strong></p>\n<ul>\n<li>直接百度搜索</li>\n<li>从 mvn 的仓库 <code>https://mvnrepository.com/</code>  中进行搜索</li>\n</ul>\n<blockquote>\n<p>步骤 2: 配置第三方 bean</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClass<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcUrl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/spring_db<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxPoolSize<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>\n<p>ComboPooledDataSource 的属性是通过 setter 方式进行注入</p>\n</li>\n<li>\n<p>想注入属性就需要在 ComboPooledDataSource 类或其上层类中有提供属性对应的 setter 方法</p>\n</li>\n<li>\n<p>C3P0 的四个属性和 Druid 的四个属性是不一样的</p>\n</li>\n<li>\n<p>数据连接池在配置属性的时候，除了可以注入数据库连接四要素外还可以配置很多其他的属性，具体都有哪些属性用到的时候再去查，一般配置基础的四个，其他都有自己的默认值</p>\n</li>\n<li>\n<p>Druid 和 C3P0 在没有导入 mysql 驱动包的前提下，一个没报错一个报错，说明 Druid 在初始化的时候没有去加载驱动，而 C3P0 刚好相反</p>\n</li>\n<li>\n<p>Druid 程序运行虽然没有报错，但是当调用 DruidDataSource 的 getConnection () 方法获取连接的时候，也会报找不到驱动类的错误</p>\n</li>\n</ul>\n<h2 id=\"属性优化\"><a class=\"anchor\" href=\"#属性优化\">#</a> 属性优化</h2>\n<p>上面的样例有些问题:</p>\n<ul>\n<li>这两个数据源中都使用到了一些固定的常量如数据库连接四要素，把这些值写在 Spring 的配置文件中不利于后期维护</li>\n<li>需要将这些值提取到一个外部的 properties 配置文件中</li>\n<li>Spring 框架如何从配置文件中读取属性值来配置就是接下来要解决的问题。</li>\n</ul>\n<p>问题提出来后，具体该如何实现？</p>\n<ol>\n<li>在 resources 下创建一个 jdbc.properties (文件的名称可以任意)</li>\n<li>将数据库连接四要素配置到配置文件中</li>\n<li><mark>在 Spring 的配置文件中加载 properties 文件</mark></li>\n<li><mark>使用加载到的值实现属性注入</mark></li>\n</ol>\n<blockquote>\n<p>步骤 1: 准备 properties 配置文件</p>\n</blockquote>\n<p>resources 下创建一个 jdbc.properties 文件，并添加对应的属性键值对</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">jdbc.driver</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">jdbc.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://127.0.0.1:3306/spring_db</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">jdbc.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">jdbc.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 开启 <code>context</code>  命名空间</p>\n</blockquote>\n<p>在 applicationContext.xml 中开 <code>context</code>  命名空间<br />\n xmlns (xml name space):&lt;spacename&gt;=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zcHJpbmdmcmFtZXdvcmsub3JnL3NjaGVtYS8=\">http://www.springframework.org/schema/</span>&lt;spacename&gt;&quot;<br />\n 要添加第 4 行和 8、9 行。将 beans（spacename）都换成新的</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            http://www.springframework.org/schema/beans/spring-beans.xsd</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            http://www.springframework.org/schema/context</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            http://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 加载 properties 配置文件 ( <code>&lt;sn:property-placeholder location=&quot;file&quot;/&gt;</code> )<br />\n 步骤 4: 完成属性注入 ( <code>$&#123;key&#125;</code> )</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            http://www.springframework.org/schema/beans/spring-beans.xsd</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            http://www.springframework.org/schema/context</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            http://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.alibaba.druid.pool.DruidDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>作为单个属性读取注入<br />\n步骤 1: 在项目中添对应的类</p>\n</blockquote>\n<p>BookDao 和 BookDaoImpl 类，并在 BookDaoImpl 类中添加 <code>name</code>  属性与 setter 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>​  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 完成配置文件的读取与注入</p>\n</blockquote>\n<p>在 applicationContext.xml 添加配置， <code>bean的配置管理</code> 、 <code>读取外部properties</code> 、 <code>依赖注入</code> :</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            http://www.springframework.org/schema/beans/spring-beans.xsd</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            http://www.springframework.org/schema/context</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            http://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 运行程序</p>\n</blockquote>\n<p>在 App 类中，从 IOC 容器中获取 bookDao 对象，调用方法，查看值是否已经被获取到并打印控制台</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label warning\">warning</span><br />\n<strong> 问题一：键值对的 key 为 <code>username</code>  引发的问题</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>运行后，在控制台打印的却不是 <code>root666</code> ，而是自己电脑的用户名</p>\n<ul>\n<li>出现问题的原因是 <code>&lt;context:property-placeholder/&gt;</code>  标签会加载系统的环境变量，而且环境变量的值会被优先加载，如何查看系统的环境变量？</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> env <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解决方法</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">system-properties-mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NEVER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>当然还有一个解决方案就是避免使用 <code>username</code>  作为属性的 <code>key</code> 。</p>\n<p><strong>问题二：当有多个 properties 配置文件需要被加载，该如何配置？</strong><br />\n 假如有多个配置 jdbc1.properties， jdbc2.properties</p>\n<div class=\"tab\" data-id=\"properties\" data-title=\"jdbc1.properties\">\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">jdbc.driver</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">jdbc.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://127.0.0.1:3306/spring_db</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">jdbc.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">jdbc.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"properties\" data-title=\"jdbc2.properties\">\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root666</span></pre></td></tr></table></figure></div>\n<p>对应的 xml 文件中</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 方式一 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties,jdbc2.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">system-properties-mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NEVER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 方式二 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">system-properties-mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NEVER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 方式三 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classpath:*.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">system-properties-mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NEVER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 方式四 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classpath*:*.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">system-properties-mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NEVER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ul>\n<li>方式一：可以实现，如果配置文件多的话，每个都需要配置</li>\n<li>方式二: <code>*.properties</code>  代表所有以 properties 结尾的文件都会被加载，可以解决方式一的问题，但是不标准</li>\n<li>方式三：标准的写法， <code>classpath:</code>  代表的是从根路径下开始查找，但是只能查询当前项目的根路径</li>\n<li>方式四：不仅可以加载当前项目还可以加载当前项目所依赖的所有项目的根路径下的 properties 配置文件</li>\n</ul>\n<p>掌握：</p>\n<ol>\n<li>如何开启 <code>context</code>  命名空间（xmlns 相关内容更改）</li>\n<li>如何加载 properties 配置文件（）<br />\n <code>&lt;context:property-placeholder location=&quot;&quot; system-properties-mode=&quot;NEVER&quot;/&gt;</code></li>\n<li>如何在 applicationContext.xml 引入 properties 配置文件中的值 ( <code>$&#123;key&#125;</code> )</li>\n</ol>\n<h1 id=\"核心容器\"><a class=\"anchor\" href=\"#核心容器\">#</a> 核心容器</h1>\n<p>前面已经完成 bean 与依赖注入的相关知识学习，接下来学习的是 IOC 容器中的<mark>核心容器</mark>。<br />\n可以把它简单的理解为 <code>ApplicationContext</code> ，前面虽然已经用到过，但是并没有系统的学习，接下来咱们从以下几个问题入手来学习下容器的相关知识:</p>\n<ul>\n<li>如何创建容器？</li>\n<li>创建好容器后，如何从容器中获取 bean 对象？</li>\n<li>容器类的层次结构是什么？</li>\n<li>BeanFactory 是什么？</li>\n</ul>\n<p>与上述的环境类似包括：pom.xml、applicationContext.xml、BookDao、BookDaoImpl 为例</p>\n<h2 id=\"容器创建\"><a class=\"anchor\" href=\"#容器创建\">#</a> 容器创建</h2>\n<ol>\n<li>类路径下的 XML 配置文件<br />\n <code>ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</code></li>\n<li>文件系统下的 XML 配置文件<br />\n <code>ApplicationContext ctx = new FileSystemXmlApplicationContext(&quot;applicationContext.xml&quot;);</code></li>\n</ol>\n<p>其中 2 是从项目路径下开始查找 <code>applicationContext.xml</code>  配置文件的，需要指定绝对路径，耦合度较高，不推荐使用<br />\n <code>ApplicationContext ctx = new FileSystemXmlApplicationContext(&quot;D:\\\\workspace\\\\spring\\\\spring_10_container\\\\src\\\\main\\\\resources\\\\applicationContext.xml&quot;); </code></p>\n<h2 id=\"bean的获取\"><a class=\"anchor\" href=\"#bean的获取\">#</a> bean 的获取</h2>\n<ol>\n<li>方式一，就是目前案例中获取的方式:  <code>BookDao bookDao = (BookDao) ctx.getBean(&quot;bookDao&quot;);</code></li>\n</ol>\n<p>这种方式存在的问题是每次获取的时候都需要进行类型转换，有没有更简单的方式呢？</p>\n<ol start=\"2\">\n<li>\n<p>方式二： <code>BookDao bookDao = ctx.getBean(&quot;bookDao&quot;，BookDao.class); </code> <br />\n这种方式可以解决类型强转问题，但是参数又多加了一个，相对来说没有简化多少。</p>\n</li>\n<li>\n<p>方式三: <code>BookDao bookDao = ctx.getBean(BookDao.class);</code></p>\n</li>\n</ol>\n<p>这种方式就类似我们之前所学习依赖注入中的按类型注入。必须要确保 IOC 容器中该类型对应的 bean 对象只能有一个</p>\n<h2 id=\"容器类层次结构\"><a class=\"anchor\" href=\"#容器类层次结构\">#</a> 容器类层次结构</h2>\n<ol>\n<li>在 IDEA 中双击 <code>shift</code> , 输入 BeanFactory</li>\n</ol>\n<p><img data-src=\"image-20240312192216910.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>点击进入 BeanFactory 类，ctrl+h, 就能查看到如下结构的层次关系<br />\n<img data-src=\"image-20240312192338994.png\" alt=\"\" /><br />\n从图中可以看出，容器类也是从无到有根据需要一层层叠加上来的，重点理解下这种设计思想。</li>\n</ol>\n<h2 id=\"beanfactory的使用\"><a class=\"anchor\" href=\"#beanfactory的使用\">#</a> BeanFactory 的使用</h2>\n<p>使用 BeanFactory 来创建 IOC 容器的具体实现方式为:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppForBeanFactory</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Resource</span> resources <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BeanFactory</span> bf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">(</span>resources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> bf<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了更好的看出 <code>BeanFactory</code>  和 <code>ApplicationContext</code>  之间的区别，在 BookDaoImpl 添加如下构造函数:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BookDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"constructor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果不去获取 bean 对象，打印会发现：</p>\n<ul>\n<li>BeanFactory 是延迟加载，只有在获取 bean 对象的时候才会去创建</li>\n<li>ApplicationContext 是立即加载，容器加载的时候就会创建 bean 对象</li>\n<li>ApplicationContext 要想成为延迟加载，只需要按照如下方式进行配置<br />\n <code>&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;  lazy-init=&quot;true&quot;/&gt;</code></li>\n</ul>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>BeanFactory 是 IoC 容器的顶层接口，初始化 BeanFactory 对象时，加载的 bean 延迟加载</li>\n<li>ApplicationContext 接口是 Spring 容器的核心接口，初始化时 bean 立即加载</li>\n<li>ApplicationContext 接口提供基础的 bean 操作相关方法，通过其他接口扩展其功能</li>\n<li>ApplicationContext 接口常用初始化类\n<ul>\n<li><strong><mark>ClassPathXmlApplicationContext (常用)</mark></strong></li>\n<li>FileSystemXmlApplicationContext</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"image-20240312192706131.png\" alt=\"\" /><br />\n最常用的就两个属性<mark> id</mark> 和<mark> class</mark>。</p>\n<p><img data-src=\"image-20240312192738210.png\" alt=\"\" /></p>\n<h1 id=\"iocdi注解开发\"><a class=\"anchor\" href=\"#iocdi注解开发\">#</a> IOC/DI 注解开发</h1>\n<p>Spring 的 IOC/DI 对应的配置了解完了，但是使用起来相对来说还是比较复杂的，复杂的地方在<mark>配置文件</mark><br />\n所以 Spring 到底是如何简化代码开发的呢？需要用到 Spring 的注解开发</p>\n<ul>\n<li>2.0 版开始支持注解</li>\n<li>2.5 版注解功能趋于完善</li>\n<li>3.0 版支持纯注解开发</li>\n</ul>\n<p>有两块内容 <code>注解开发定义bean</code>  和 <code>纯注解开发</code></p>\n<p>同上面一样，用 BookDao、BookDaoImpl、BookService、BookServiceImpl 四个类为例</p>\n<h2 id=\"注解开发定义bean\"><a class=\"anchor\" href=\"#注解开发定义bean\">#</a> 注解开发定义 bean</h2>\n<p>不再 xml 中写 &lt;bean&gt; 依赖<br />\n<s> <code>&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;</code> </s><br />\n 而是在 BookDaoImpl 类上添加 <code>@Component</code>  注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label danger\">💔danger</span><br />\n@Component 注解不可以添加在接口上，因为接口是无法创建对象的即 BookDao 这种接口类不能用</p>\n<p><img data-src=\"image-20240312204854420.png\" alt=\"\" /></p>\n<p><mark>为了让 Spring 框架能够扫描到写在类上的注解，需要在配置文件上进行包扫描</mark></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>component-scan</strong></p>\n<ul>\n<li>component: 组件，Spring 将管理的 bean 视作自己的一个组件</li>\n<li>scan: 扫描<br />\n base-package 指定 Spring 框架扫描的包路径，它会扫描指定包及其子包中的所有类上的注解</li>\n<li>包路径越多 [如:com.itheima.dao.impl]，扫描的范围越小速度越快</li>\n<li>包路径越少 [如:com.itheima], 扫描的范围越大速度越慢</li>\n<li>一般扫描到项目的组织名称即 Maven 的 groupId 下 [如:com.itheima] 即可</li>\n</ul>\n<p>在 BookServiceImpl 类上也添加 <code>@Component</code>  交给 Spring 框架管理</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBookDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bookDao <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 App 类中，从 IOC 容器中获取 BookServiceImpl 对应的 bean 对象，打印。测试为默认单例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookDao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 按类型获取 bean</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">BookService</span> bookService <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>BookServiceImpl 类没有起名称，所以在 App 中是按照类型来获取 bean 对象</li>\n<li>@Component 注解如果不起名称，会有一个默认值就是 <code>当前类名首字母小写</code> ，所以也可以按照名称获取，如</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BookService</span> bookService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookService</span><span class=\"token punctuation\">)</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookServiceImpl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对于 @Component 注解，还衍生出了其他三个注解 <code>@Controller</code> 、 <code>@Service</code> 、 <code>@Repository</code> <br />\n 这三个注解和 @Component 注解的作用是一样的，为什么要衍生出这三个呢？<br />\n 方便我们后期在编写类的时候能很好的区分出这个类是属于 <code>表现层</code> 、 <code>业务层</code> 还是 <code>数据层</code> 的类。</p>\n<h2 id=\"纯注解开发模式\"><a class=\"anchor\" href=\"#纯注解开发模式\">#</a> 纯注解开发模式</h2>\n<p>上面已经可以使用注解来配置 bean, 但是依然有用到配置文件，在配置文件中对包进行了扫描，Spring 在 3.0 版已经支持纯注解开发</p>\n<ul>\n<li>Spring3.0 开启了纯注解开发模式，使用 Java 类替代配置文件，开启了 Spring 快速开发赛道</li>\n</ul>\n<blockquote>\n<p>1：创建配置类、标识该类为配置类<br />\n 2：创建一个配置类 <code>SpringConfig</code> <br />\n3：在配置类上添加 <code>@Configuration</code>  注解<br />\n 4：将其标识为一个配置类，替换 <code>applicationContext.xml</code> <br />\n5：在配置类上添加包扫描注解 <code>@ComponentScan</code>  替换 <code>&lt;context:component-scan base-package=&quot;&quot;/&gt;</code> <br />\n6：创建一个新的运行类 <code>AppForAnnotation</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppForAnnotation</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppForAnnotation</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookDao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">BookService</span> bookService <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>@Configuration 注解用于设定当前类为配置类</li>\n<li>@ComponentScan 注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式<br />\n <code>@ComponentScan(&#123;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</code></li>\n<li>读取 Spring 核心配置文件初始化容器对象切换为读取 Java 配置类初始化容器对象</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 加载配置文件初始化容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 加载配置类初始化容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"小结-4\"><a class=\"anchor\" href=\"#小结-4\">#</a> 小结</h3>\n<ul>\n<li>记住 @Component、@Controller、@Service、@Repository 这四个注解</li>\n<li>applicationContext.xml 中 <code>&lt;context:component-san/&gt;</code>  的作用是指定扫描包路径，注解为 @ComponentScan</li>\n<li>@Configuration 标识该类为配置类，使用类替换 applicationContext.xml 文件</li>\n<li>ClassPathXmlApplicationContext 是加载 XML 配置文件</li>\n<li>AnnotationConfigApplicationContext 是加载配置类</li>\n</ul>\n<h2 id=\"注解范围及生命周期\"><a class=\"anchor\" href=\"#注解范围及生命周期\">#</a> 注解范围及生命周期</h2>\n<p>首先注解加载 bean 也是默认单例模式。更改的话在对应的 bean 上面添加 <code>@Scope</code>  注解</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Scope</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>类注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置该类创建对象的作用范围 &lt;br/&gt; 可用于设置创建出的 bean 是否为单例对象</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>value（默认）：定义 bean 作用范围，&lt;br/&gt;<mark> 默认值 singleton（单例），可选值 prototype（非单例）</mark></td>\n</tr>\n</tbody>\n</table>\n<p>对于初始化和销毁对应的注解是： <code>@PostConstruct</code>  和 <code>@PreDestroy</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostConstruct</span> <span class=\"token comment\">// 在构造方法之后执行，替换 init-method</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@PreDestroy</span> <span class=\"token comment\">// 在销毁方法之前执行，替换 destroy-method</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"destroy ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao1 <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao2 <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookDao1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookDao2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//`destroy` 只有在容器关闭的时候，才会执行</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><mark><strong>注意:</strong>@PostConstruct 和 @PreDestroy 注解如果找不到，需要导入下面的 jar 包</mark></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.annotation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.annotation-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>找不到的原因是，从 JDK9 以后 jdk 中的 javax.annotation 包被移除了，这两个注解刚好就在这个包中。</p>\n<p><img data-src=\"image-20240313154231688.png\" alt=\"\" /></p>\n<h2 id=\"注解依赖注入\"><a class=\"anchor\" href=\"#注解依赖注入\">#</a> 注解依赖注入</h2>\n<p>虽然已经通过注解实现了 bean 的控制，但如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBookDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bookDao <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">BookService</span> bookService <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        bookService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行 app 类则会报错 <code>Cannot invoke &quot;com.itheima.dao.BookDao.save()&quot; because &quot;this.bookDao&quot; is null</code> <br />\n 这是因为还没尽兴依赖注入，虽然 bookService 创建没问题，要调用 bookDao 时则会报错。删除 get 注入方式，通过注解 <code>@Autowired</code>  即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>@Autowired 可以写在属性上，也可也写在 setter 方法上，最简单的处理方式是 <code>写在属性上并将setter方法删除掉</code></li>\n<li>为什么 setter 方法可以删除呢？\n<ul>\n<li>自动装配基于反射设计创建对象并通过暴力反射为私有属性进行设值</li>\n<li>普通反射只能获取 public 修饰的内容</li>\n<li>暴力反射除了获取 public 修饰的内容还可以获取 private 修改的内容</li>\n<li>所以此处无需提供 setter 方法</li>\n</ul>\n</li>\n</ul>\n<p><span class=\"label warning\">warning</span> 但如果对应 BookDao 接口如果有多个实现类，如 <code>public class BookDaoImpl2 implements BookDao &#123;...&#125;</code> ，则又会报错<br />\n此时，按照类型注入就无法区分到底注入哪个对象，解决方案: <code>按照名称注入</code> <br />\n给两个 dao 类起别名</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...2\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时就可以注入成功，但是得思考个问题:</p>\n<ul>\n<li>@Autowired 是按照类型注入的，给 BookDao 的两个实现起了名称，它还是有两个 bean 对象，为什么不报错？</li>\n<li>@Autowired 默认按照类型自动装配，如果 IOC 容器中同类的 Bean 找到多个，就按照变量名和 Bean 的名称匹配。因为变量名叫 <code>bookDao</code>  而容器中也有一个 <code>booDao</code> ，所以可以成功注入</li>\n</ul>\n<p>相对的，此时按照类型会找到多个 bean 对象，此时会按照 <code>bookDao</code>  名称去找，因为 IOC 容器只有名称叫 <code>bookDao1</code>  和 <code>bookDao2</code> , 所以找不到，会报 <code>NoUniqueBeanDefinitionException</code> <br />\n<img data-src=\"image-20240313155232173.png\" alt=\"\" /></p>\n<p>当根据类型在容器中找到多个 bean, 注入参数的属性名又和容器中 bean 的名称不一致，这个时候该如何解决，就需要使用到 <code>@Qualifier</code>  来指定注入哪个名称的 bean 对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book service save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>@Qualifier 注解后的值就是需要注入的 bean 的名称。</p>\n<p><mark>注意:@Qualifier 不能独立使用，必须和 @Autowired 一起使用</mark></p>\n<blockquote>\n<p>简单数据的注入</p>\n</blockquote>\n<p>使用 <code>@Value</code> ，如果类型不对应则会报错</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了统一管理，可以使用到之前的 <code>properties配置文件</code> ，可见<a href=\"#%E5%B1%9E%E6%80%A7%E4%BC%98%E5%8C%96\">属性优化</a>，区别在于要改为注解读取 properties 配置文件</p>\n<blockquote>\n<p>resource 下准备 properties 文件，如：jdbc.properties<br />\n 使用注解加载 properties 配置文件（在配置类上添加 <code>@PropertySource</code>  注解）<br />\n使用 @Value 读取配置文件中的内容（${name}）</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>样例</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 假设在 jdbc.properties 下有个属性 name=zy</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;name&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 结果：book dao save zy</span></pre></td></tr></table></figure><ul>\n<li>如果读取的 properties 配置文件有多个，可以使用 <code>@PropertySource</code>  的属性来指定多个<br />\n <code>@PropertySource(&#123;&quot;jdbc.properties&quot;,&quot;xxx.properties&quot;&#125;)</code></li>\n<li><code>@PropertySource</code>  注解属性中不支持使用通配符 <code>*</code> , 运行会报错<br />\n <code>@PropertySource(&#123;&quot;*.properties&quot;&#125;)</code></li>\n<li><code>@PropertySource</code>  注解属性中可以把 <code>classpath:</code>  加上，代表从当前项目的根路径找文件<br />\n <code>@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</code></li>\n</ul>\n<h3 id=\"小结-5\"><a class=\"anchor\" href=\"#小结-5\">#</a> 小结</h3>\n<p><code>@Autowired</code>  自动装配依赖<br />\n <code>@Qualifier</code>  依赖类有多个 bean 时，指定 id 注入<br />\n <code>@Value</code>  简单数据注入的注解<br />\n <code>@PropertySource</code>  注入 properties 文件（管理简单数据 / 特定数据：数据库账号密码等），搭配 <code>@Value</code>  和 ${&lt;name&gt;} 使用</p>\n<h1 id=\"iocdi注解开发管理第三方bean\"><a class=\"anchor\" href=\"#iocdi注解开发管理第三方bean\">#</a> IOC/DI 注解开发管理第三方 bean</h1>\n<p>前面定义 bean 的时候都是在自己开发的类上面写个注解就完成了，但如果是第三方的类，这些类都是在 jar 包中，我们没有办法在类上面添加注解，这个时候该怎么办？</p>\n<ul>\n<li>我们就需要有一种更加灵活的方式来定义 bean, 这种方式不能在原始代码上面书写注解，一样能定义 bean, 这就用到了一个全新的注解 ==@Bean==。</li>\n</ul>\n<p>以导入 druid 为例，可见<a href=\"#IOC/DI%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E7%AC%AC%E4%B8%89%E6%96%B9bean\"> IOC/DI 配置管理第三方 bean</a> 中在 xml 中设置 bean，现在通过注解在 config 类中配置</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在配置类中添加一个方法，该方法的返回值就是要创建的 Bean 对象类型，<mark>在方法上添加 <code>@Bean</code>  注解</mark></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/spring_db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意：不能使用 <code>DataSource ds = new DruidDataSource()</code> </strong> ，因为 DataSource 接口中没有对应的 setter 方法来设置属性。</p>\n<p>此时就可以从 IOC 容器中获取对象并打印：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">DataSource</span> dataSource <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果有多个 bean 要被 Spring 管理，直接在配置类中多些几个方法，方法上添加 @Bean 注解即可</p>\n<h2 id=\"多配置处理\"><a class=\"anchor\" href=\"#多配置处理\">#</a> 多配置处理</h2>\n<p>如果把所有的第三方 bean 都配置到 Spring 的配置类 <code>SpringConfig</code>  中，虽然可以，但是不利于代码阅读和分类管理，所有我们就想能不能按照类别将这些 bean 配置到不同的配置类中？</p>\n<p>对于数据源的 bean, 我们新建一个 <code>JdbcConfig</code>  配置类，并把数据源配置到该类下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>JdbcConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/spring_db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个配置类如何能被 Spring 配置类加载到，并创建 DataSource 对象在 IOC 容器中？</p>\n<ol>\n<li>包扫描</li>\n<li>@Import 引入</li>\n</ol>\n<p>对于包扫描：</p>\n<blockquote>\n<p>步骤 1: 在 Spring 的配置类上添加包扫描<br />\n步骤 2: 在 JdbcConfig 上添加配置注解</p>\n</blockquote>\n<p>在 dao 层同级的 config 目录下创建配置类 SpringConfig 为例，在跟配置类 SpringConfig 指定 <code>@ComponentScan()</code>  扫描对应的目录。JdbcConfig 依然要声明 <code>@Configuration</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.config\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/spring_db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 <code>@Import</code>  引入：<br />\n这种方案可以不用加 <code>@Configuration</code>  注解，但是必须在 Spring 配置类上使用 <code>@Import</code>  注解手动引入需要加载的配置类</p>\n<blockquote>\n<p>步骤 1: 去除 JdbcConfig 类上的注解<br />\n步骤 2: 在 Spring 配置类中引入</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//@ComponentScan(\"com.itheima.config\")</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">JdbcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/spring_db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>扫描注解可以移除</li>\n<li>@Import 参数需要的是一个<mark>数组</mark>，可以引入多个配置类</li>\n<li>@Import 注解在配置类中只能写一次，多个则会报错</li>\n</ul>\n<h2 id=\"第三方的依赖注入\"><a class=\"anchor\" href=\"#第三方的依赖注入\">#</a> 第三方的依赖注入</h2>\n<ul>\n<li>对于简单数据，类似<a href=\"#%E6%B3%A8%E8%A7%A3%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5\">注解依赖注入</a>中的 properties 处理</li>\n<li>对于类，在 SpringConfig 中扫描该类，纳入 Spring 管理即可</li>\n</ul>\n<p><em><strong>简单数据</strong></em>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:jdbc.properties\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">JdbcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//1. 定义一个方法获得要管理的对象  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.driver&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driver<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.url&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.username&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.password&#125;\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//2. 添加 @Bean，表示当前方法的返回值是一个 bean  </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//@Bean 修饰的方法，形参根据类型自动装配  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookDao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">DataSource</span> dataSource <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>jdbc.properties 文件放在 main 目录下的 resources 资源文件夹，可以右键 make directory as ：Sources root 就会自动找到了</p>\n<p><em><strong>类注入</strong></em><br />\n假设在构建 DataSource 对象的时候，需要用到 BookDao 对象，该如何把 BookDao 对象注入进方法内让其使用呢？</p>\n<blockquote>\n<p>步骤 1: 在 SpringConfig 中扫描 BookDao<br />\n 步骤 2: 在 JdbcConfig 类的方法上添加参数</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.dao\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">JdbcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookDao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">DruidDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><mark>引用类型注入只需要为 bean 定义方法设置形参即可，容器会根据类型自动装配对象</mark></p>\n<h1 id=\"注解开发总结\"><a class=\"anchor\" href=\"#注解开发总结\">#</a> 注解开发总结</h1>\n<p>前文包括了 XML 配置和注解的开发实现，两者之间的差异见图<br />\n<img data-src=\"image-20240313170908374.png\" alt=\"\" /></p>\n<h1 id=\"spring整合\"><a class=\"anchor\" href=\"#spring整合\">#</a> Spring 整合</h1>\n<p>Spring 有一个容器，叫做 IoC 容器，里面保存 bean。在进行企业级开发的时候，其实除了将自己写的类让 Spring 管理之外，还有一部分重要的工作就是使用第三方的技术。前面已经讲了如何管理第三方 bean 了，下面结合 IoC 和 DI，整合 2 个常用技术 <code>Mybatis</code> , <code>Junit</code> ，进一步加深对 Spring 的使用理解。</p>\n<h2 id=\"mybatis\"><a class=\"anchor\" href=\"#mybatis\">#</a> mybatis</h2>\n<h3 id=\"独立开发流程\"><a class=\"anchor\" href=\"#独立开发流程\">#</a> 独立开发流程</h3>\n<blockquote>\n<p>步骤 1: 准备数据库表</p>\n</blockquote>\n<p>Mybatis 是来操作数据库表，所以先创建一个数据库及表</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> spring_db <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">use</span> spring_db<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tbl_account<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    money <span class=\"token keyword\">double</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>小小的复习下 mysql<br />\n 打开服务、进入终端  <code>mysql -u root -p</code> / DG、</p>\n<blockquote>\n<p>步骤 2: 创建项目导入 jar 包</p>\n</blockquote>\n<p>项目的 pom.xml 添加相关依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.47<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 根据表创建模型类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Double</span> <span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> money<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMoney</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Account&#123;\"</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token string\">\"id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token string\">\", money=\"</span> <span class=\"token operator\">+</span> money <span class=\"token operator\">+</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 创建 Dao 接口</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into tbl_account(name,money)values(#&#123;name&#125;,#&#123;money&#125;)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from tbl_account where id = #&#123;id&#125; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update tbl_account set name = #&#123;name&#125; , money = #&#123;money&#125; where id = #&#123;id&#125; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_account\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_account where id = #&#123;id&#125; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Account</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 5: 创建 Service 接口和实现类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Account</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 6: 添加 jdbc.properties 文件</p>\n</blockquote>\n<p>resources 目录下添加，用于配置数据库连接四要素</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">jdbc.driver</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">jdbc.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">jdbc.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 根据自身 mysql 环境账号密码设置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">jdbc.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123456</span></pre></td></tr></table></figure><p>useSSL: 关闭 MySQL 的 SSL 连接</p>\n<blockquote>\n<p>步骤 7: 添加 Mybatis 核心配置文件</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 读取外部 properties 配置文件 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 别名扫描的包路径 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.domain<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 数据源 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mysql<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mysql<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transactionManager</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 映射文件扫描包路径 --></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>package</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 8: 编写应用程序</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 1. 创建 SqlSessionFactoryBuilder 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 2. 加载 SqlMapConfig.xml 配置文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SqlMapConfig.xml.bak\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 3. 创建 SqlSessionFactory 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span> sqlSessionFactoryBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 4. 获取 SqlSession</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 5. 执行 SqlSession 对象执行查询，获取结果 User</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">AccountDao</span> accountDao <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Account</span> ac <span class=\"token operator\">=</span> accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 6. 释放资源</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"用spring的流程\"><a class=\"anchor\" href=\"#用spring的流程\">#</a> 用 Spring 的流程</h3>\n<p>Mybatis 的基础环境我们已经准备好了，接下来就得分析下在上述的内容中，哪些对象可以交给 Spring 来管理？</p>\n<ul>\n<li>Mybatis 程序核心对象分析<br />\n<img data-src=\"image-20240313194410603.png\" alt=\"\" /></li>\n<li>从图中可以获取到，真正需要交给 Spring 管理的是<mark> SqlSessionFactory</mark>，SqlSession 是由 SqlSessionFactory 造好的</li>\n<li>整合 Mybatis，就是将 Mybatis 用到的内容交给 Spring 管理，分析下配置文件<br />\n<img data-src=\"1630137388717.png\" alt=\"\" /></li>\n<li>第一行读取外部 properties 配置文件，Spring 有提供具体的解决方案 <code>@PropertySource</code> , 需要交给 Spring</li>\n<li>第二行起别名包扫描，为 SqlSessionFactory 服务的，需要交给 Spring</li>\n<li>第三行主要用于做连接池，Spring 之前我们已经整合了 Druid 连接池，这块也需要交给 Spring</li>\n<li>前面三行一起都是为了创建 SqlSession 对象用的，那么用 Spring 管理 SqlSession 对象吗？回忆下 SqlSession 是由 SqlSessionFactory 创建出来的，所以只需要将 SqlSessionFactory 交给 Spring 管理即可。</li>\n<li>第四行是 Mapper 接口和映射文件 [如果使用注解就没有该映射文件]，这个是在获取到 SqlSession 以后执行具体操作的时候用，所以它和 SqlSessionFactory 创建的时机都不在同一个时间，可能需要单独管理。</li>\n</ul>\n<p>因此大体需要做两件事：</p>\n<ol>\n<li>Spring 要管理 MyBatis 中的 SqlSessionFactory</li>\n<li>Spring 要管理 Mapper 接口的扫描</li>\n</ol>\n<blockquote>\n<p>步骤 1: 项目中导入整合需要的 jar 包</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!--Spring 操作数据库需要该 jar 包 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tSpring 与 Mybatis 整合的 jar 包</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t这个 jar 包 mybatis 在前面，是 Mybatis 提供的</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t--></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 创建 Spring 的主配置类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 配置类注解</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 包扫描，主要扫描的是项目中的 AccountServiceImpl 类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 创建数据源的配置类</p>\n</blockquote>\n<p>在配置类中完成数据源的创建</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.driver&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driver<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.url&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.username&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.password&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 主配置类中读 properties 并引入数据源配置类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:jdbc.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 或者在 JdbcConfig 上添加 @Configuration</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 5: 创建 Mybatis 配置类并配置 SqlSessionFactory</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 定义 bean，SqlSessionFactoryBean，用于产生 SqlSessionFactory 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactoryBean</span> <span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactoryBean</span> ssfb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 设置模型类的别名扫描</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ssfb<span class=\"token punctuation\">.</span><span class=\"token function\">setTypeAliasesPackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.domain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 设置数据源</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ssfb<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> ssfb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 定义 bean，返回 MapperScannerConfigurer 对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MapperScannerConfigurer</span> <span class=\"token function\">mapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">MapperScannerConfigurer</span> msc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        msc<span class=\"token punctuation\">.</span><span class=\"token function\">setBasePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.dao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> msc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em><strong>说明：</strong></em></p>\n<ul>\n<li>\n<p>使用 SqlSessionFactoryBean 封装 SqlSessionFactory 需要的环境信息<br />\n<img data-src=\"image-20240313195717288.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>SqlSessionFactoryBean 是前面我们讲解 FactoryBean 的一个子类，在该类中将 SqlSessionFactory 的创建进行了封装，简化 bean 的创建，我们只需要将其需要的内容设置即可。</p>\n</li>\n<li>\n<p>DataSource 读取配置文件生成 bean，然后注入进来的</p>\n</li>\n<li>\n<p>方法中有一个参数为 dataSource，当前 Spring 容器中已经创建了 Druid 数据源，类型刚好是 DataSource 类型，此时在初始化 SqlSessionFactoryBean 这个对象的时候，发现需要使用 DataSource 对象，而容器中刚好有这么一个对象，就自动加载了 DruidDataSource 对象。</p>\n</li>\n<li>\n<p>使用 MapperScannerConfigurer 加载 Dao 接口，创建代理对象保存到 IOC 容器中<br />\n<img data-src=\"image-20240313200424505.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>这个 MapperScannerConfigurer 对象也是 MyBatis 提供的专用于整合的 jar 包中的类，用来处理原始配置文件中的 mappers 相关配置，加载数据层的 Mapper 接口类</p>\n</li>\n<li>\n<p>MapperScannerConfigurer 有一个核心属性 basePackage，就是用来设置所扫描的包路径</p>\n</li>\n</ul>\n<blockquote>\n<p>步骤 6: 主配置类中引入 Mybatis 配置类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:jdbc.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">JdbcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">MybatisConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 7: 编写运行类</p>\n</blockquote>\n<p>在运行类中，从 IOC 容器中获取 Service 对象，调用方法获取结果</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">AccountService</span> accountService <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Account</span> ac <span class=\"token operator\">=</span> accountService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>支持 Spring 与 Mybatis 的整合就已经完成了，其中主要用到的两个类分别是:</p>\n<ul>\n<li><mark>SqlSessionFactoryBean</mark> ( <code>ssfb.setTypeAliasesPackage(&quot;com.itheima.domain&quot;);</code> )</li>\n</ul>\n<ul>\n<li><mark>MapperScannerConfigurer</mark> ( <code>msc.setBasePackage(&quot;com.itheima.dao&quot;);</code> )<br />\n 就是动态的管理这两个，模型类，和与数据库对应属性的对象类。<br />\n至于 Mapper 接口怎么注入 Spring 容器，相关的扩展学习：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIwNjAwMzMvYXJ0aWNsZS9kZXRhaWxzLzEwODQ1MzI5OA==\">原理详解</span></li>\n</ul>\n<h2 id=\"junit\"><a class=\"anchor\" href=\"#junit\">#</a> Junit</h2>\n<p>代码和其他环境跟<a href=\"#mybatis\"> mybatis</a> 一样<br />\n JUnit 是一个编写可重复测试的简单框架。它是单元测试框架的 xUnit 架构的一个实例</p>\n<blockquote>\n<p>步骤 1: 引入依赖<br />\n pom.xml</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 编写测试类</p>\n</blockquote>\n<p>在 test\\java 下创建一个 AccountServiceTest，这个名字任意，配置要测试的 bean 为其属性，测试相应方法即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置类运行器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 设置 Spring 环境对应的配置类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加载配置类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//@ContextConfiguration (locations=&#123;\"classpath:applicationContext.xml\"&#125;)// 加载配置文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 支持自动装配注入 bean</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountService</span> accountService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFindById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>accountService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFindAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>accountService<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><mark>核心就是：</mark></p>\n<ul>\n<li>\n<p>设置类运行器： <code>@RunWith(SpringJUnit4ClassRunner.class)</code></p>\n</li>\n<li>\n<p>加载测试配置</p>\n<ul>\n<li>如果测试的是注解配置类，则使用 <code>@ContextConfiguration(classes = 配置类.class)</code></li>\n<li>如果测试的是配置文件，则使用 <code>@ContextConfiguration(locations=&#123;配置文件名,...&#125;)</code></li>\n</ul>\n</li>\n<li>\n<p>Junit 运行后是基于 Spring 环境运行的，所以 Spring 提供了一个专用的类运行器，这个务必要设置，这个类运行器就在 Spring 的测试专用包中提供的，导入的坐标就是这个东西 <code>SpringJUnit4ClassRunner</code></p>\n</li>\n<li>\n<p>上面两个配置都是固定格式，当需要测试哪个 bean 时，使用自动装配加载对应的对象，下面的工作就和以前做 Junit 单元测试完全一样了</p>\n</li>\n</ul>\n<h1 id=\"aop\"><a class=\"anchor\" href=\"#aop\">#</a> AOP</h1>\n<p>Spring 有两个核心的概念，一个是 <code>IOC/DI</code> ，一个是 <code>AOP</code></p>\n<ul>\n<li>AOP (Aspect Oriented Programming) 面向切面编程，一种编程范式，指导开发者如何组织程序结构。\n<ul>\n<li>OOP (Object Oriented Programming) 面向对象编程</li>\n</ul>\n</li>\n<li>作用: <mark>在不惊动原始设计的基础上为其进行功能增强</mark>，前面咱们有技术就可以实现这样的功能即代理模式。</li>\n</ul>\n<h2 id=\"核心概念\"><a class=\"anchor\" href=\"#核心概念\">#</a> 核心概念</h2>\n<p>为了能更好的理解 AOP 的相关概念，我们准备了一个环境，整个环境的内容我们暂时可以不用关注，最主要的类为: <code>BookDaoImpl</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 记录程序当前执行执行（开始时间）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 业务执行万次</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 记录程序当前执行时间（结束时间）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Long</span> endTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 计算时间差</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Long</span> totalTime <span class=\"token operator\">=</span> endTime<span class=\"token operator\">-</span>startTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 输出信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行万次消耗时间：\"</span> <span class=\"token operator\">+</span> totalTime <span class=\"token operator\">+</span> <span class=\"token string\">\"ms\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao update ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao delete ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao select ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当在 App 类中从容器中获取 bookDao 对象后，分别执行其 <code>save</code> , <code>delete</code> , <code>update</code>  和 <code>select</code>  方法后会有如下的打印结果:<br />\n<img data-src=\"image-20240313203733902.png\" alt=\"\" /></p>\n<ul>\n<li>对于计算万次执行消耗的时间只有 save 方法有，为什么 delete 和 update 方法也会有呢？</li>\n<li>delete 和 update 方法有，那什么 select 方法为什么又没有呢？</li>\n</ul>\n<p>这个案例中其实就使用了 Spring 的 AOP，在不惊动 (改动) 原有设计 (代码) 的前提下，想给谁添加功能就给谁添加。这个也就是 Spring 的理念：</p>\n<ul>\n<li>无入侵式 / 无侵入式</li>\n</ul>\n<p><img data-src=\"image-20240313203949106.png\" alt=\"\" /></p>\n<ol>\n<li>前面一直在强调，Spring 的 AOP 是对一个类的方法在不进行任何修改的前提下实现增强。对于上面的案例中 BookServiceImpl 中有 <code>save</code> , <code>update</code> , <code>delete</code>  和 <code>select</code>  方法，这些方法我们给起了一个名字叫<mark>连接点</mark> (所有方法)</li>\n<li>在 BookServiceImpl 的四个方法中，update 和 delete 只有打印没有计算万次执行消耗时间，但是在运行的时候已经有该功能，那也就是说 update 和 delete 方法都已经被增强，所以对于需要增强的方法我们给起了一个名字叫<mark>切入点</mark>（需要增强的方法）</li>\n<li>执行 BookServiceImpl 的 update 和 delete 方法的时候都被添加了一个计算万次执行消耗时间的功能，将这个功能抽取到一个方法中，换句话说就是<strong>存放共性功能的方法</strong>，我们给起了个名字叫<strong>通知</strong></li>\n<li>通知是要增强的内容，会有多个，切入点是需要被增强的方法，也会有多个，那哪个切入点需要添加哪个通知，就需要提前将它们之间的关系描述清楚，那么对于通知和切入点之间的关系描述，我们给起了个名字叫<mark>切面</mark></li>\n<li>通知是一个方法，方法不能独立存在需要被写在一个类中，这个类我们也给起了个名字叫<strong>通知类</strong></li>\n</ol>\n<p>至此 AOP 中的核心概念就已经介绍完了，总结下:</p>\n<ul>\n<li>连接点 (JoinPoint)：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等\n<ul>\n<li>在 SpringAOP 中，理解为方法的执行</li>\n</ul>\n</li>\n<li>切入点 (Pointcut): 匹配连接点的式子\n<ul>\n<li>在 SpringAOP 中，一个切入点可以描述一个具体方法，也可也匹配多个方法\n<ul>\n<li>一个具体的方法：如 com.itheima.dao 包下的 BookDao 接口中的无形参无返回值的 save 方法</li>\n<li>匹配多个方法：所有的 save 方法，所有的 get 开头的方法，所有以 Dao 结尾的接口中的任意方法，所有带有一个参数的方法</li>\n</ul>\n</li>\n<li>连接点范围要比切入点范围大，是切入点的方法也一定是连接点，但是是连接点的方法就不一定要被增强，所以可能不是切入点。</li>\n</ul>\n</li>\n<li>通知 (Advice): 在切入点处执行的操作，也就是共性功能\n<ul>\n<li>在 SpringAOP 中，功能最终以方法的形式呈现</li>\n</ul>\n</li>\n<li>通知类：定义通知的类</li>\n<li>切面 (Aspect): 描述通知与切入点的对应关系。</li>\n</ul>\n<details class=\"info\"><summary>提问</summary><div>\n<ul>\n<li>什么是 AOP?</li>\n<li>AOP 的作用是什么？</li>\n<li>AOP 中核心概念分别指的是什么？</li>\n</ul>\n</div></details>\n<h2 id=\"aop入门案例\"><a class=\"anchor\" href=\"#aop入门案例\">#</a> AOP 入门案例</h2>\n<h3 id=\"需求分析\"><a class=\"anchor\" href=\"#需求分析\">#</a> 需求分析</h3>\n<p>案例设定：测算接口执行效率，但是这个案例稍微复杂了点，我们对其进行简化。<br />\n简化设定：在方法执行前输出当前系统时间。<br />\n对于 SpringAOP 的开发有两种方式，XML 和 <mark>注解</mark>，我们使用哪个呢？<br />\n 因为现在注解使用的比较多，所以本次课程就采用注解完成 AOP 的开发。<br />\n总结需求为：使用 SpringAOP 的注解方式完成在方法执行的前打印出当前系统时间。</p>\n<ol>\n<li>导入坐标 (pom.xml)</li>\n<li>制作连接点 (原始操作，Dao 接口与实现类)</li>\n<li>制作共性功能 (通知类与通知)</li>\n<li>定义切入点</li>\n<li>绑定切入点与通知关系 (切面)</li>\n</ol>\n<h3 id=\"环境准备-2\"><a class=\"anchor\" href=\"#环境准备-2\">#</a> 环境准备</h3>\n<p>创建一个 Maven 项目</p>\n<ul>\n<li>\n<p>pom.xml 添加 Spring 依赖 (context 会关联 aop 的包默认导入)</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>添加 BookDao 和 BookDaoImpl 类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao save ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book dao update ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建 Spring 的配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 App 运行类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"aop实现步骤\"><a class=\"anchor\" href=\"#aop实现步骤\">#</a> AOP 实现步骤</h3>\n<blockquote>\n<p>步骤 1: 添加依赖</p>\n</blockquote>\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aspectjweaver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.9.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>因为 <code>spring-context</code>  中已经导入了 <code>spring-aop</code> , 所以不需要再单独导入 <code>spring-aop</code></li>\n<li>导入 AspectJ 的 jar 包，AspectJ 是 AOP 思想的一个具体实现，Spring 有自己的 AOP 实现，但是相比于 AspectJ 来说比较麻烦，所以我们直接采用 Spring 整合 ApsectJ 的方式进行 AOP 开发。</li>\n</ul>\n<blockquote>\n<p>步骤 2: 定义接口与实现类</p>\n</blockquote>\n<pre><code>环境准备的时候，BookDaoImpl已经准备好，不需要做任何修改\n</code></pre>\n<blockquote>\n<p>步骤 3: 定义通知类和通知</p>\n</blockquote>\n<p>通知就是将共性功能抽取出来后形成的方法，共性功能指的就是当前系统时间的打印。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类名和方法名没有要求，可以任意。</p>\n<blockquote>\n<p>步骤 4: 定义切入点</p>\n</blockquote>\n<p>BookDaoImpl 中有两个方法，分别是 save 和 update，我们要增强的是 update 方法，该如何定义呢？ <code>@Pointcut</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(void com.itheima.dao.BookDao.update())\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>说明:</strong></p>\n<ul>\n<li>切入点定义依托一个不具有实际意义的方法进行，即无参数、无返回值、方法体无实际逻辑。</li>\n<li>execution 及后面编写的内容，后面会有章节专门去学习。</li>\n</ul>\n<blockquote>\n<p>步骤 5: 制作切面</p>\n</blockquote>\n<p>切面是用来描述通知和切入点之间的关系，如何进行关系的绑定？ <code>@Before</code>  等切面注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(void com.itheima.dao.BookDao.update())\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行<mark>位置</mark></p>\n<p><strong>说明:</strong>@Before 翻译过来是之前，也就是说通知会在切入点方法执行之前执行，除此之前还有其他四种类型，后面会讲。</p>\n<blockquote>\n<p>步骤 6: 将通知类配给容器 <code>@Component</code>  并标识其为切面类 <code>@Aspect</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(void com.itheima.dao.BookDao.update())\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 7: 开启注解格式 AOP 功能 <code>@EnableAspectJAutoProxy</code> <br />\n 告诉 spring，有用注解开发的 AOP</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 8: 运行程序</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>看到在执行 update 方法之前打印了系统时间戳，说明对原始方法进行了增强，AOP 编程成功。</p>\n<p><span class=\"label primary\">核心流程</span>  就是告知 spring 用了 AOP 注解 <code>@EnableAspectJAutoProxy</code> ，定义通知类和通知（ <code>@Pointcut</code>  添加切入点（哪些要增强），通知上 <code>@Before</code>  等切面注解（什么时候切入）），最后这个通知类配给容器 <code>@Component</code>  并标识其为切面类 <code>@Aspect</code></p>\n<h3 id=\"aop工作流程\"><a class=\"anchor\" href=\"#aop工作流程\">#</a> AOP 工作流程</h3>\n<blockquote>\n<p>流程 1:Spring 容器启动</p>\n</blockquote>\n<ul>\n<li>容器启动就需要去加载 bean, 哪些类需要被加载呢？</li>\n<li>需要被增强的类，如：BookServiceImpl</li>\n<li>通知类，如：MyAdvice</li>\n<li>注意此时 bean 对象还没有创建成功</li>\n</ul>\n<blockquote>\n<p>流程 2: 读取所有切面配置中的切入点</p>\n</blockquote>\n<p><img data-src=\"image-20240314153401740.png\" alt=\"\" /></p>\n<ul>\n<li>上面这个例子中有两个切入点的配置，但是第一个 <code>ptx()</code>  并没有被使用，所以不会被读取。</li>\n</ul>\n<blockquote>\n<p>流程 3: 初始化 bean，</p>\n</blockquote>\n<p>判定 bean 对应的类中的方法是否匹配到任意切入点</p>\n<ul>\n<li>注意第 1 步在容器启动的时候，bean 对象还没有被创建成功。</li>\n<li>要被实例化 bean 对象的类中的方法和切入点进行匹配<br />\n<img data-src=\"image-20240314153621648.png\" alt=\"\" />\n<ul>\n<li>匹配失败，创建原始对象，如 <code>UserDao</code>\n<ul>\n<li>匹配失败说明不需要增强，直接调用原始对象的方法即可。</li>\n</ul>\n</li>\n<li>匹配成功，创建原始对象（<mark>目标对象</mark>）的<mark>代理</mark>对象，如: <code>BookDao</code>\n<ul>\n<li>匹配成功说明需要对其进行增强</li>\n<li>对哪个类做增强，这个类对应的对象就叫做目标对象</li>\n<li>因为要对目标对象进行功能增强，而采用的技术是动态代理，所以会为其创建一个代理对象</li>\n<li>最终运行的是代理对象的方法，在该方法中会对原始方法进行功能增强</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>流程 4: 获取 bean 执行方法</p>\n</blockquote>\n<ul>\n<li>获取的 bean 是原始对象时，调用方法并执行，完成操作</li>\n<li>获取的 bean 是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li>\n</ul>\n<p>代理成功后输出对象不变，但 class 会变成代理<br />\n <code>System.out.println(bookDao);</code>     <code>com.itheima.dao.impl.BookDaoImpl@279fedbd</code> <br />\n <code>System.out.println(bookDao.getClass());</code></p>\n<ul>\n<li>如果目标对象中的方法会被增强，那么容器中将存入的是目标对象的代理对象（ <code>class com.sun.proxy.$Proxy19</code> ）</li>\n<li>如果目标对象中的方法不被增强，那么容器中将存入的是目标对象本身 ( <code>class com.itheima.dao.impl.BookDaoImpl</code> )</li>\n</ul>\n<p>直接打印对象走的是对象的 toString 方法，不管是不是代理对象打印的结果都是一样的，原因是内部对 toString 方法进行了重写</p>\n<p><span class=\"label warning\">提问</span></p>\n<ul>\n<li>请说出 AOP 的工作流程</li>\n<li>AOP 的核心概念？</li>\n</ul>\n<details class=\"success\"><summary>答案</summary><div>\n<ul>\n<li>目标对象、连接点、切入点</li>\n<li>通知类、通知</li>\n<li>切面</li>\n<li>代理</li>\n</ul>\n</div></details>\n<ul>\n<li>SpringAOP 的本质或者可以说底层实现是？</li>\n</ul>\n<details class=\"success\"><summary>答案</summary><div>\n<ul>\n<li>通过代理模式。</li>\n</ul>\n</div></details>\n<h2 id=\"aop配置管理\"><a class=\"anchor\" href=\"#aop配置管理\">#</a> AOP 配置管理</h2>\n<h3 id=\"aop切入点表达式\"><a class=\"anchor\" href=\"#aop切入点表达式\">#</a> AOP 切入点表达式</h3>\n<p>对于 AOP 中切入点表达式，有三部分，分别是 <code>语法格式</code> 、 <code>通配符</code> 和 <code>书写技巧</code> 。</p>\n<h4 id=\"语法格式\"><a class=\"anchor\" href=\"#语法格式\">#</a> 语法格式</h4>\n<p><code>execution(public User com.itheima.service.UserService.findById(int))</code>  为例：</p>\n<ul>\n<li>execution：动作关键字，描述切入点的行为动作，例如 execution 表示执行到指定切入点</li>\n<li>public: 访问修饰符，还可以是 public，private 等，可以省略</li>\n<li>User：返回值，写返回值类型</li>\n<li>com.itheima.service：包名，多级包使用点连接</li>\n<li>UserService: 类 / 接口名称</li>\n<li>findById：方法名</li>\n<li>int: 参数，直接写参数的类型，多个类型用逗号隔开</li>\n<li>异常名：方法定义中抛出指定异常，可以省略</li>\n</ul>\n<h4 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h4>\n<ul>\n<li>\n<p><code>*</code> : 单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现<br />\n execution（public * com.itheima.*.UserService.find*(*))<br />\n 匹配 com.itheima 包下的任意包中的 UserService 类或接口中所有 find 开头的带有一个参数的方法</p>\n</li>\n<li>\n<p><code>..</code> ：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写<br />\n execution（public User com..UserService.findById (..))<br />\n 匹配 com 包下的任意包中的 UserService 类或接口中所有名称为 findById 的方法</p>\n</li>\n<li>\n<p><code>+</code> ：专用于匹配子类类型<br />\n execution (* *..*Service+.*(..))<br />\n 这个使用率较低，描述子类的，咱们做 JavaEE 开发，继承机会就一次，使用都很慎重，所以很少用它。*Service+，表示所有以 Service 结尾的接口的子类。</p>\n</li>\n</ul>\n<p>样例：<br />\n<img data-src=\"image-20240314155728526.png\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span>BookDao</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>匹配接口，能匹配到</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span></span>BookDaoImpl</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>匹配实现类，能匹配到</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span></span>BookDaoImpl</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>返回值任意，能匹配到</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span></span>BookDaoImpl</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>返回值任意，但是update方法必须要有一个参数，无法匹配，要想匹配需要在update接口和实现类添加参数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> com<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>返回值为<span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>com包下的任意包三层包下的任意类的update方法，匹配到的是实现类，能匹配</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> com<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>返回值为<span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>com包下的任意两层包下的任意类的update方法，匹配到的是接口，能匹配</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>返回值为<span class=\"token keyword\">void</span>，方法名是update的任意包下的任意类，能匹配</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>匹配项目中任意类的任意方法，能匹配，但是不建议使用这种方式，影响范围广</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>u<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>匹配项目中任意包任意类下只要以u开头的方法，update方法能满足，能匹配</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>*<span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>匹配项目中任意包任意类下只要以e结尾的方法，update和save方法能满足，能匹配</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> com<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>返回值为<span class=\"token keyword\">void</span>，com包下的任意包任意类任意方法，能匹配，<span class=\"token operator\">*</span>代表的是方法</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">.</span>*<span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span>find<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>将项目中所有业务层方法的以find开头的方法匹配</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">.</span>*<span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span>save<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>将项目中所有业务层方法的以save开头的方法匹配</pre></td></tr></table></figure><p>后面两种更符合我们平常切入点表达式的编写规则</p>\n<h4 id=\"书写技巧\"><a class=\"anchor\" href=\"#书写技巧\">#</a> 书写技巧</h4>\n<p>对于切入点表达式的编写其实是很灵活的，那么在编写的时候，有没有什么好的技巧让我们用用:</p>\n<ul>\n<li>所有代码按照标准规范开发，否则以下技巧全部失效</li>\n<li>描述切入点通 <strong><mark>常描述接口</mark></strong>，而不描述实现类，如果描述到实现类，就出现紧耦合了</li>\n<li>访问控制修饰符针对接口开发均采用 public 描述（<strong><mark>可省略访问控制修饰符描述</mark></strong>）</li>\n<li>返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用 * 通配快速描述</li>\n<li><strong><mark>包名</mark></strong> 书写 <strong><mark>尽量不使用.. 匹配</mark></strong>，效率过低，常用 * 做单个包描述匹配，或精准匹配</li>\n<li><strong><mark>接口名 / 类名</mark><strong>书写名称与模块相关的</strong><mark>采用 * 匹配</mark></strong>，例如 UserService 书写成 * Service，绑定业务层接口名</li>\n<li><strong><mark>方法名</mark></strong> 书写以 <strong><mark>动词</mark></strong> 进行 <strong><mark>精准匹配</mark></strong>，名词采用_匹配，例如 getById 书写成 getBy_,selectAll 书写成 selectAll</li>\n<li>参数规则较为复杂，根据业务方法灵活调整</li>\n<li>通常 <strong><mark>不使用异常</mark></strong> 作为 <strong><mark>匹配</mark></strong> 规则</li>\n</ul>\n<h3 id=\"aop通知类型\"><a class=\"anchor\" href=\"#aop通知类型\">#</a> AOP 通知类型</h3>\n<p>之前提过的 <code>@Before(&quot;pt()&quot;)</code>  所代表的含义是将 <code>通知</code> 添加到 <code>切入点</code> 方法执行的<mark>前面</mark>。<br />\n包括它还有：</p>\n<ul>\n<li>前置通知  <code>@Before</code></li>\n<li>后置通知  <code>@After</code></li>\n<li><strong><mark>环绕通知 (重点)</mark></strong>  <code>@Around</code></li>\n<li>返回后通知 (了解)  <code>@AfterReturning</code></li>\n<li>抛出异常后通知 (了解)  <code>@AfterThrowing</code></li>\n</ul>\n<p><img data-src=\"image-20240314160606994.png\" alt=\"\" /></p>\n<p>前置、后置看图很好理解，讲下环绕</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>例子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(void com.itheima.dao.BookDao.update())\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"around before advice ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"around after advice ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行后通知的内容打印出来，但是原始方法的内容却没有被执行<br />\n因为环绕通知需要在原始方法的前后进行增强，所以环绕通知就必须要能对原始操作进行调用，具体如何实现？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(void com.itheima.dao.BookDao.update())\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"around before advice ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 表示对原始操作的调用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"around after advice ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>pjp.proceed();</code>  会强制要求抛异常 <code>throws Throwable</code> 。 <code>ProceedingJoinPoint pjp</code>  会代替接入点</p>\n<p>对于切入点<span class=\"label warning\">有返回值的</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt2()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">aroundSelect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"around before advice ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 表示对原始操作的调用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Object</span> ret <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"around after advice ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>必须要返回，否则报错。且能在截取出来的这个方法里进一步操作，但是需要返回值具体类型能匹配，比如要返回值 + 100，还得将 ret 强转 int 匹配。<br />\n<mark><strong>环绕通知注意事项</strong></mark></p>\n<ol>\n<li>环绕通知必须依赖形参 ProceedingJoinPoint 才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知</li>\n<li>通知中如果未使用 ProceedingJoinPoint 对原始方法进行调用将跳过原始方法的执行</li>\n<li>对原始方法的调用可以不接收返回值，通知方法设置成 void 即可，如果接收返回值，最好设定为 Object 类型</li>\n<li>原始方法的返回值如果是 void 类型，通知方法的返回值类型可以设置成 void, 也可以设置成 Object</li>\n<li>由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须要处理 Throwable 异常</li>\n</ol>\n<p><code>@AfterReturning</code>  是需要在原始方法 <code>select</code>  正常执行后才会被执行，如果 <code>select()</code>  方法执行的过程中出现了异常，那么返回后通知是不会被执行。后置通知是不管原始方法有没有抛出异常都会被执行。</p>\n<p><code>@AfterThrowing</code>  是需要原始方法抛出异常，可以在 <code>select()</code>  方法中添加一行代码 <code>int i = 1/0</code>  即可。如果没有抛异常，异常后通知将不会被执行。</p>\n<p><img data-src=\"image-20240314162351601.png\" alt=\"\" /></p>\n<h3 id=\"业务层接口执行效率\"><a class=\"anchor\" href=\"#业务层接口执行效率\">#</a> 业务层接口执行效率</h3>\n<p>任务：使用环绕通知，原始方法如果只执行一次，时间太快，两个时间差可能为 0，所以我们要执行万次来计算时间差。</p>\n<h4 id=\"环境准备-3\"><a class=\"anchor\" href=\"#环境准备-3\">#</a> 环境准备</h4>\n<p>创建一个 Maven 项目</p>\n<ul>\n<li>\n<p>pom.xml 添加 Spring 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aspectjweaver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.9.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.47<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>添加 AccountService、AccountServiceImpl、AccountDao 与 Account 类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Account</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token annotation punctuation\">@Insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into tbl_account(name,money)values(#&#123;name&#125;,#&#123;money&#125;)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@Delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from tbl_account where id = #&#123;id&#125; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token annotation punctuation\">@Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update tbl_account set name = #&#123;name&#125; , money = #&#123;money&#125; where id = #&#123;id&#125; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_account\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tbl_account where id = #&#123;id&#125; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token class-name\">Account</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">//setter..getter..toString 方法省略</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>resources 下提供一个 jdbc.properties</p>\n</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">jdbc.driver</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">jdbc.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">jdbc.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">jdbc.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123456</span></pre></td></tr></table></figure><ul>\n<li>\n<p>创建相关配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Spring 配置类：SpringConfig</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:jdbc.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">JdbcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">MybatisConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//JdbcConfig 配置类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.driver&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driver<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.url&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.username&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.password&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//MybatisConfig 配置类</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactoryBean</span> <span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactoryBean</span> ssfb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ssfb<span class=\"token punctuation\">.</span><span class=\"token function\">setTypeAliasesPackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.domain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        ssfb<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> ssfb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MapperScannerConfigurer</span> <span class=\"token function\">mapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">MapperScannerConfigurer</span> msc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        msc<span class=\"token punctuation\">.</span><span class=\"token function\">setBasePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.dao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> msc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 Spring 整合 Junit 的测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceTestCase</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountService</span> accountService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFindById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Account</span> ac <span class=\"token operator\">=</span> accountService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFindAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">></span></span> all <span class=\"token operator\">=</span> accountService<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"功能实现\"><a class=\"anchor\" href=\"#功能实现\">#</a> 功能实现</h4>\n<blockquote>\n<p>步骤 1: 开启 SpringAOP 的注解功能</p>\n</blockquote>\n<p>在 Spring 的主配置文件 SpringConfig 类中添加注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 创建 AOP 的通知类</p>\n</blockquote>\n<ul>\n<li>该类要被 Spring 管理，需要添加 @Component</li>\n<li>要标识该类是一个 AOP 的切面类，需要添加 @Aspect</li>\n<li>配置切入点表达式，需要添加一个方法，并添加 @Pointcut</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 配置业务层的所有方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.service.*Service.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">servicePt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runSpeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 添加环绕通知</p>\n</blockquote>\n<p>在 runSpeed () 方法上添加 @Around</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 配置业务层的所有方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.service.*Service.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">servicePt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//@Around (\"ProjectAdvice.servicePt ()\") 可以简写为下面的方式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"servicePt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">runSpeed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Object</span> ret <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意:</strong> 目前并没有做任何增强</p>\n<blockquote>\n<p>步骤 4: 完成核心业务，记录万次执行的时间</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 配置业务层的所有方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.service.*Service.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">servicePt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//@Around (\"ProjectAdvice.servicePt ()\") 可以简写为下面的方式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"servicePt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runSpeed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"业务层接口万次执行时间: \"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"ms\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 6: 程序优化</p>\n</blockquote>\n<p>目前程序所面临的问题是，多个方法一起执行测试的时候，控制台都打印的是:<br />\n <code>业务层接口万次执行时间:xxxms</code> <br />\n 我们没有办法区分到底是哪个接口的哪个方法执行的具体时间，具体如何优化？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 配置业务层的所有方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.service.*Service.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">servicePt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//@Around (\"ProjectAdvice.servicePt ()\") 可以简写为下面的方式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"servicePt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runSpeed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 获取执行签名信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Signature</span> signature <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 通过签名获取执行操作名称 (接口名)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringTypeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 通过签名获取执行操作名称 (方法名)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"万次执行：\"</span><span class=\"token operator\">+</span> className<span class=\"token operator\">+</span><span class=\"token string\">\".\"</span><span class=\"token operator\">+</span>methodName<span class=\"token operator\">+</span><span class=\"token string\">\"---->\"</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ms\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image-20240314205902098.png\" alt=\"\" /></p>\n<p>tips: 当前测试的接口执行效率仅仅是一个理论值，并不是一次完整的执行过程</p>\n<h3 id=\"aop通知获取数据\"><a class=\"anchor\" href=\"#aop通知获取数据\">#</a> AOP 通知获取数据</h3>\n<p>目前我们写 AOP 仅仅是在原始方法前后追加一些操作，接下来我们要说说 AOP 中数据相关的内容，我们将从 <code>获取参数</code> 、 <code>获取返回值</code> 和 <code>获取异常</code> 三个方面来研究切入点的相关信息。</p>\n<p>前面我们介绍通知类型的时候总共讲了五种，那么对于这五种类型都会有参数，返回值和异常吗？</p>\n<ul>\n<li>\n<p>获取切入点方法的参数，所有的通知类型都可以获取参数</p>\n<ul>\n<li>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</li>\n<li>ProceedingJoinPoint：适用于环绕通知</li>\n</ul>\n</li>\n<li>\n<p>获取切入点方法返回值，前置和抛出异常后通知是没有返回值，后置通知可有可无，所以不做研究</p>\n<ul>\n<li>返回后通知</li>\n<li>环绕通知</li>\n</ul>\n</li>\n<li>\n<p>获取切入点方法运行异常信息，前置和返回后通知是不会有，后置通知可有可无，所以不做研究</p>\n<ul>\n<li>抛出异常后通知</li>\n<li>环绕通知</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"环境准备-4\"><a class=\"anchor\" href=\"#环境准备-4\">#</a> 环境准备</h4>\n<ul>\n<li>\n<p>创建一个 Maven 项目</p>\n</li>\n<li>\n<p>pom.xml 添加 Spring 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aspectjweaver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.9.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>添加 BookDao 和 BookDaoImpl 类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">findName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">findName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id:\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"itcast\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建 Spring 的配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写通知类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.dao.BookDao.findName(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before advice ...\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after advice ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Object</span> ret <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterReturning advice ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterThrowing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterThrowing advice ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 App 运行类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">findName</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"获取参数\"><a class=\"anchor\" href=\"#获取参数\">#</a> 获取参数</h4>\n<h5 id=\"非环绕通知获取方式\"><a class=\"anchor\" href=\"#非环绕通知获取方式\">#</a> 非环绕通知获取方式</h5>\n<p>在方法上添加 JoinPoint, 通过 JoinPoint 来获取参数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.dao.BookDao.findName(..))\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> jp<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> jp<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before advice ...\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//... 其他的略  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行 App 类，可以获取如下内容，说明参数 100 已经被获取<br />\n<img data-src=\"image-20240314210242378.png\" alt=\"\" /></p>\n<details class=\"info\"><summary>方法的参数只有一个，为什么获取的是一个数组?</summary><div>\n<ul>\n<li>因为参数的个数是不固定的，所以使用数组更通配些</li>\n</ul>\n</div></details>\n<p>使用 JoinPoint 的方式获取参数适用于 <code>前置</code> 、 <code>后置</code> 、 <code>返回后</code> 、 <code>抛出异常后</code> 通知</p>\n<h5 id=\"环绕通知获取方式\"><a class=\"anchor\" href=\"#环绕通知获取方式\">#</a> 环绕通知获取方式</h5>\n<p>环绕通知使用的是 ProceedingJoinPoint，因为 ProceedingJoinPoint 是 JoinPoint 类的子类，所以对于 ProceedingJoinPoint 类中应该也会有对应的 <code>getArgs()</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.dao.BookDao.findName(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Object</span> ret <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 其他的略</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label danger\">tips:</span> pjp.proceed () 方法是有两个构造方法，分别是:<br />\n<img data-src=\"image-20240314210648634.png\" alt=\"\" /></p>\n<ul>\n<li>调用无参数的 proceed，当原始方法有参数，会在调用的过程中自动传入参数</li>\n<li>所以调用这两个方法的任意一个都可以完成功能</li>\n<li>但是当需要修改原始方法的参数时，就只能采用带有参数的方法，如下</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.dao.BookDao.findName(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Object</span> ret <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 其他的略</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有了这个特性后，我们就可以在环绕通知中对原始方法的参数进行拦截过滤，避免由于参数的问题导致程序无法正确运行，保证代码的健壮性</p>\n<h4 id=\"获取返回值\"><a class=\"anchor\" href=\"#获取返回值\">#</a> 获取返回值</h4>\n<p>对于返回值，只有返回后 <code>AfterReturing</code>  和环绕 <code>Around</code>  这两个通知类型可以获取，具体如何获取？</p>\n<h5 id=\"环绕通知获取返回值\"><a class=\"anchor\" href=\"#环绕通知获取返回值\">#</a> 环绕通知获取返回值</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.dao.BookDao.findName(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Object</span> ret <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 其他的略</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述代码中， <code>ret</code>  就是方法的返回值，我们是可以直接获取，不但可以获取，如果需要还可以进行修改。</p>\n<h5 id=\"返回后通知获取返回值\"><a class=\"anchor\" href=\"#返回后通知获取返回值\">#</a> 返回后通知获取返回值</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.dao.BookDao.findName(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">,</span>returning <span class=\"token operator\">=</span> <span class=\"token string\">\"ret\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturning</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterReturning advice ...\"</span><span class=\"token operator\">+</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 其他的略</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image-20240314210956948.png\" alt=\"\" /><br />\n其中参数类型可以写成 String 等具体的，但是为了能匹配更多的参数类型，建议写成 Object 类型<br />\n<img data-src=\"image-20240314211059578.png\" alt=\"\" /></p>\n<h4 id=\"获取异常\"><a class=\"anchor\" href=\"#获取异常\">#</a> 获取异常</h4>\n<p>对于获取抛出的异常，只有抛出异常后 <code>AfterThrowing</code>  和环绕 <code>Around</code>  这两个通知类型可以获取，具体如何获取？</p>\n<h5 id=\"环绕通知获取异常\"><a class=\"anchor\" href=\"#环绕通知获取异常\">#</a> 环绕通知获取异常</h5>\n<p>这块比较简单，以前我们是抛出异常，现在只需要将异常捕获，就可以获取到原始方法的异常信息了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.dao.BookDao.findName(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Object</span> ret <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            ret <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 其他的略</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 catch 方法中就可以获取到异常，至于获取到异常以后该如何处理，这个就和你的业务需求有关了。</p>\n<h5 id=\"抛出异常后通知获取异常\"><a class=\"anchor\" href=\"#抛出异常后通知获取异常\">#</a> 抛出异常后通知获取异常</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.itheima.dao.BookDao.findName(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"pt()\"</span><span class=\"token punctuation\">,</span>throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterThrowing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterThrowing advice ...\"</span><span class=\"token operator\">+</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 其他的略</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同上一小节返回值一样 <code>throwing =</code>  中和形参 <code>Throwable t</code>  名字要保持一致<br />\n如何让原始方法抛出异常，方式有很多，</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">findName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id:\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"itcast\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>至此，AOP 通知如何获取数据就已经讲解完了，数据中包含 <code>参数</code> 、 <code>返回值</code> 、 <code>异常(了解)</code></p>\n<h3 id=\"百度网盘密码数据兼容处理案例\"><a class=\"anchor\" href=\"#百度网盘密码数据兼容处理案例\">#</a> 百度网盘密码数据兼容处理案例</h3>\n<p>需求：对百度网盘分享链接输入密码时尾部多输入的空格做兼容处理。<br />\n很多输入都有对尾部空格做处理</p>\n<p>我们只需要在业务方法执行之前对所有的输入参数进行格式处理 ——trim ()</p>\n<ul>\n<li>是对所有的参数都需要去除空格么？<br />\n 也没有必要，一般只需要针对字符串处理即可</li>\n<li>以后涉及到需要去除前后空格的业务可能会有很多，这个去空格的代码是每个业务都写么？<br />\n 可以考虑使用 AOP 来统一处理。</li>\n<li>AOP 有五种通知类型，该使用哪种呢？<br />\n 我们的需求是将原始方法的参数处理后在参与原始方法的调用，能做这件事的就只有环绕通知。</li>\n</ul>\n<h4 id=\"环境准备-5\"><a class=\"anchor\" href=\"#环境准备-5\">#</a> 环境准备</h4>\n<ul>\n<li>\n<p>创建一个 Maven 项目</p>\n</li>\n<li>\n<p>pom.xml 添加 Spring 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aspectjweaver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.9.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>添加 ResourcesService，ResourcesServiceImpl,ResourcesDao 和 ResourcesDaoImpl 类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResourcesDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">readResources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourcesDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ResourcesDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">readResources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 模拟校验</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResourcesService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">openURL</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url <span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourcesServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ResourcesService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ResourcesDao</span> resourcesDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">openURL</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> resourcesDao<span class=\"token punctuation\">.</span><span class=\"token function\">readResources</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建 Spring 的配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 App 运行类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ResourcesService</span> resourcesService <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourcesService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> resourcesService<span class=\"token punctuation\">.</span><span class=\"token function\">openURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://pan.baidu.com/haha\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"具体实现\"><a class=\"anchor\" href=\"#具体实现\">#</a> 具体实现</h4>\n<blockquote>\n<p>步骤 1: 开启 SpringAOP 的注解功能</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 编写通知类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(boolean com.itheima.service.*Service.*(*,*))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">servicePt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 添加环绕通知</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(boolean com.itheima.service.*Service.*(*,*))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">servicePt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DataAdvice.servicePt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// @Around (\"servicePt ()\") 这两种写法都对</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">trimStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Object</span> ret <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 完成核心业务，处理参数中的空格</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(boolean com.itheima.service.*Service.*(*,*))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">servicePt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DataAdvice.servicePt()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// @Around (\"servicePt ()\") 这两种写法都对</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">trimStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 获取原始方法的参数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 判断参数是不是字符串</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 将修改后的参数传入到原始方法的执行中</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Object</span> ret <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 5: 运行程序</p>\n</blockquote>\n<p>不管密码 <code>root</code>  前后是否加空格，最终控制台打印的都是 true</p>\n<blockquote>\n<p>步骤 6: 优化测试</p>\n</blockquote>\n<p>为了能更好的看出 AOP 已经生效，我们可以修改 ResourcesImpl 类，在方法中将密码的长度进行打印</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourcesDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ResourcesDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">readResources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 模拟校验</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再次运行成功，就可以根据最终打印的长度来看看，字符串的空格有没有被去除掉。</p>\n<h2 id=\"aop总结\"><a class=\"anchor\" href=\"#aop总结\">#</a> AOP 总结</h2>\n<p>简化共性功能的开发</p>\n<h3 id=\"aop的核心概念\"><a class=\"anchor\" href=\"#aop的核心概念\">#</a> AOP 的核心概念</h3>\n<ul>\n<li>概念：AOP (Aspect Oriented Programming) 面向切面编程，一种编程范式</li>\n<li>作用：在不惊动原始设计的基础上为方法进行功能<mark>增强</mark></li>\n<li>核心概念\n<ul>\n<li>代理（Proxy）：SpringAOP 的核心本质是采用代理模式实现的</li>\n<li>连接点（JoinPoint）：在 SpringAOP 中，理解为任意方法的执行</li>\n<li>切入点（Pointcut）：匹配连接点的式子，也是具有共性功能的方法描述</li>\n<li>通知（Advice）：若干个方法的共性功能，在切入点处执行，最终体现为一个方法</li>\n<li>切面（Aspect）：描述通知与切入点的对应关系</li>\n<li>目标对象（Target）：被代理的原始对象成为目标对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"52-切入点表达式\"><a class=\"anchor\" href=\"#52-切入点表达式\">#</a> 5.2 切入点表达式</h3>\n<ul>\n<li>切入点表达式标准格式：动作关键字 (访问修饰符 返回值 包名。类 / 接口名。方法名（参数）异常名)<br />\nexecution(* com.itheima.service.<em>Service.</em>(..))</li>\n<li>切入点表达式描述通配符：\n<ul>\n<li>作用：用于快速描述，范围描述</li>\n<li><code>*</code> ：匹配任意符号（常用）</li>\n<li><code>..</code>  ：匹配多个连续的任意符号（常用）</li>\n<li><code>+</code> ：匹配子类类型</li>\n</ul>\n</li>\n<li>切入点表达式书写技巧\n<ol>\n<li>按<mark>标准规范</mark>开发</li>\n<li>查询操作的返回值建议使用 * 匹配</li>\n<li>减少使用.. 的形式描述包</li>\n<li><mark>对接口进行描述</mark>，使用<em>表示模块名，例如 UserService 的匹配描述为</em> Service</li>\n<li>方法名书写保留动词，例如 get，使用<em>表示名词，例如 getById 匹配描述为 getBy</em></li>\n<li>参数根据实际情况灵活调整</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"53-五种通知类型\"><a class=\"anchor\" href=\"#53-五种通知类型\">#</a> 5.3 五种通知类型</h3>\n<ul>\n<li>前置通知</li>\n<li>后置通知</li>\n<li>环绕通知（重点）\n<ul>\n<li>环绕通知依赖形参 ProceedingJoinPoint 才能实现对原始方法的调用</li>\n<li>环绕通知可以隔离原始方法的调用执行</li>\n<li>环绕通知返回值设置为 Object 类型</li>\n<li>环绕通知中可以对原始方法调用过程中出现的异常进行处理</li>\n</ul>\n</li>\n<li>返回后通知</li>\n<li>抛出异常后通知</li>\n</ul>\n<h3 id=\"54-通知中获取参数\"><a class=\"anchor\" href=\"#54-通知中获取参数\">#</a> 5.4 通知中获取参数</h3>\n<ul>\n<li>获取切入点方法的参数，所有的通知类型都可以获取参数\n<ul>\n<li>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</li>\n<li>ProceedingJoinPoint：适用于环绕通知</li>\n</ul>\n</li>\n<li>获取切入点方法返回值，前置和抛出异常后通知是没有返回值，后置通知可有可无，所以不做研究\n<ul>\n<li>返回后通知</li>\n<li>环绕通知</li>\n</ul>\n</li>\n<li>获取切入点方法运行异常信息，前置和返回后通知是不会有，后置通知可有可无，所以不做研究\n<ul>\n<li>抛出异常后通知</li>\n<li>环绕通知</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"spring-事务\"><a class=\"anchor\" href=\"#spring-事务\">#</a> Spring 事务</h1>\n<ul>\n<li>事务作用：在数据层保障一系列的数据库操作同成功同失败</li>\n<li>Spring 事务作用：在数据层或 <strong><mark>业务层</mark></strong> 保障一系列的数据库操作同成功同失败<br />\n Spring 为了管理事务，提供了一个平台事务管理器 <code>PlatformTransactionManager</code> <br />\n<img data-src=\"image-20240315142250869.png\" alt=\"\" /><br />\ncommit 是用来提交事务，rollback 是用来回滚事务。PlatformTransactionManager 只是一个接口，Spring 还为其提供了一个具体的实现:  <code>DataSourceTransactionManager</code> <br />\n 从名称上可以看出，我们只需要给它一个 DataSource 对象，它就可以帮你去在业务层管理事务。其内部采用的是 JDBC 的事务。所以说如果你持久层采用的是 JDBC 相关的技术，就可以采用这个事务管理器来管理你的事务。而 Mybatis 内部采用的就是 JDBC 的事务，所以后期我们 Spring 整合 Mybatis 就采用的这个 DataSourceTransactionManager 事务管理器。</li>\n</ul>\n<h2 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h2>\n<p>需求：实现任意两个账户间转账操作<br />\n需求微缩: A 账户减钱，B 账户加钱<br />\n为了实现上述的业务需求，我们可以按照下面步骤来实现下:</p>\n<ol>\n<li>数据层提供基础操作，指定账户减钱（outMoney），指定账户加钱（inMoney）</li>\n<li>业务层提供转账操作（transfer），调用减钱与加钱的操作</li>\n<li>提供 2 个账号和操作金额执行转账操作</li>\n<li>基于 Spring 整合 MyBatis 环境搭建上述操作</li>\n</ol>\n<h3 id=\"环境搭建\"><a class=\"anchor\" href=\"#环境搭建\">#</a> 环境搭建</h3>\n<blockquote>\n<p>步骤 1: 准备数据库表</p>\n</blockquote>\n<p>之前我们在整合 Mybatis 的时候已经创建了这个表，可以直接使用</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> spring_db <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">use</span> spring_db<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tbl_account<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    money <span class=\"token keyword\">double</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> tbl_account <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> tbl_account <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jerry'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 创建项目导入 jar 包</p>\n</blockquote>\n<p>项目的 pom.xml 添加相关依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.47<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 根据表创建模型类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//setter...getter...toString... 方法略    </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 创建 Dao 接口</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update tbl_account set money = money + #&#123;money&#125; where name = #&#123;name&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">inMoney</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"money\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update tbl_account set money = money - #&#123;money&#125; where name = #&#123;name&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">outMoney</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"money\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 5: 创建 Service 接口和实现类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 转账操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">out</span> 传出方</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">in</span> 转入方</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">money</span> 金额</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in <span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in <span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">outMoney</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">inMoney</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 6: 添加 jdbc.properties 文件</p>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">jdbc.driver</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">jdbc.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">jdbc.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">jdbc.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 7: 创建 JdbcConfig 配置类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.driver&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driver<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.url&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.username&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.password&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 8: 创建 MybatisConfig 配置类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactoryBean</span> <span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactoryBean</span> ssfb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ssfb<span class=\"token punctuation\">.</span><span class=\"token function\">setTypeAliasesPackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.domain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ssfb<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> ssfb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MapperScannerConfigurer</span> <span class=\"token function\">mapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">MapperScannerConfigurer</span> msc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MapperScannerConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        msc<span class=\"token punctuation\">.</span><span class=\"token function\">setBasePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.dao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> msc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 9: 创建 SpringConfig 配置类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:jdbc.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">JdbcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">MybatisConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 10: 编写测试类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountService</span> accountService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testTransfer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        accountService<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">100D</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述环境，运行单元测试类，会执行转账操作， <code>Tom</code>  的账户会减少 100， <code>Jerry</code>  的账户会加 100。<br />\n这是正常情况下的运行结果，但是如果在转账的过程中出现了异常，如:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in <span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">outMoney</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">inMoney</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于一个整体性但分为多步骤的业务，可能会：</p>\n<ol>\n<li>程序正常执行时，账户金额 A 减 B 加，没有问题</li>\n<li>程序出现异常后，转账失败，但是异常之前操作成功，异常之后操作失败，整体业务失败</li>\n</ol>\n<h3 id=\"具体实现-2\"><a class=\"anchor\" href=\"#具体实现-2\">#</a> 具体实现</h3>\n<blockquote>\n<p>步骤 1: 在需要被事务管理的方法上添加注解</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 转账操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">out</span> 传出方</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">in</span> 转入方</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">money</span> 金额</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 配置当前接口方法具有事务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in <span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in <span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">outMoney</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">inMoney</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><mark>注意:</mark></p>\n<p>@Transactional 可以写在接口类上、接口方法上、实现类上和实现类方法上</p>\n<ul>\n<li>写在接口类上，该接口的所有实现类的所有方法都会有事务</li>\n<li>写在接口方法上，该接口的所有实现类的该方法都会有事务</li>\n<li>写在实现类上，该类中的所有方法都会有事务</li>\n<li>写在实现类方法上，该方法上有事务<br />\n建议在接口上，避免耦合</li>\n</ul>\n<blockquote>\n<p>步骤 2: 在 JdbcConfig 类中配置事务管理器</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.driver&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driver<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.url&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.username&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.password&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">DruidDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 配置事务管理器，mybatis 使用的是 jdbc 事务</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">transactionManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">DataSourceTransactionManager</span> transactionManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> transactionManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>[注意].label .warning} ：事务管理器要根据使用技术进行选择，Mybatis 框架使用的是 JDBC 事务，可以直接使用 <code>DataSourceTransactionManager</code>  不同框架更改这个。同时形参中用 bean 的方式调用，而非 <code>setDataSource(dataSource())</code></p>\n<blockquote>\n<p>步骤 3：开启事务注解</p>\n</blockquote>\n<p>在 SpringConfig 的配置类中开启</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:jdbc.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">JdbcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">MybatisConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 开启注解式事务驱动</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@EnableTransactionManagement</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 运行测试类</p>\n</blockquote>\n<p>会发现在转换的业务出现错误后，事务就可以控制回顾，保证数据的正确性。开了后中间有异常就会都不执行。会同成功同失败</p>\n<ol>\n<li>config 上开注解</li>\n<li>接口 / 实现类 / 方法上开注解</li>\n<li>增加事务管理器</li>\n</ol>\n<h2 id=\"事务角色\"><a class=\"anchor\" href=\"#事务角色\">#</a> 事务角色</h2>\n<p>SqlSessionFactoryBean 本身单独语句会开一个事务，加入不开 spring 事务，则 int、out 是独立事务。开启后：<br />\n<img data-src=\"image-20240315145002885.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>transfer 上添加了 @Transactional 注解，在该方法上就会有一个事务 T</p>\n</li>\n<li>\n<p>AccountDao 的 outMoney 方法的事务 T1 加入到 transfer 的事务 T 中</p>\n</li>\n<li>\n<p>AccountDao 的 inMoney 方法的事务 T2 加入到 transfer 的事务 T 中</p>\n</li>\n<li>\n<p>这样就保证他们在同一个事务中，当业务层中出现异常，整个事务就会回滚，保证数据的准确性。</p>\n</li>\n<li>\n<p>事务管理员：发起事务方，在 Spring 中通常指代业务层开启事务的方法</p>\n</li>\n<li>\n<p>事务协调员：加入事务方，在 Spring 中通常指代数据层方法，也可以是业务层方法</p>\n</li>\n</ul>\n<p>注意 {.label .warning} : 目前的事务管理是基于 <code>DataSourceTransactionManager</code>  和 <code>SqlSessionFactoryBean</code>  使用的是同一个数据源。</p>\n<h2 id=\"事务属性\"><a class=\"anchor\" href=\"#事务属性\">#</a> 事务属性</h2>\n<p>三部分内容 <code>事务配置</code> 、 <code>转账业务追加日志</code> 、 <code>事务传播行为</code> 。</p>\n<h3 id=\"事务配置\"><a class=\"anchor\" href=\"#事务配置\">#</a> 事务配置</h3>\n<p><img data-src=\"image-20240315145337500.png\" alt=\"\" /></p>\n<p>上面这些属性都可以在 <code>@Transactional</code>  注解的参数上进行设置。</p>\n<ul>\n<li>\n<p>readOnly：true 只读事务，false 读写事务，增删改要设为 false, 查询设为 true。</p>\n</li>\n<li>\n<p>timeout: 设置超时时间单位秒，在多长时间之内事务没有提交成功就自动回滚，-1 表示不设置超时时间。</p>\n</li>\n<li>\n<p>rollbackFor: 当出现指定异常进行事务回滚</p>\n</li>\n<li>\n<p>noRollbackFor: 当出现指定异常不进行事务回滚</p>\n<ul>\n<li>思考：出现异常事务会自动回滚，这个是我们之前就已经知道的</li>\n<li>noRollbackFor 是设定对于指定的异常不回滚，这个好理解</li>\n<li>rollbackFor 是指定回滚异常，对于异常事务不应该都回滚么，为什么还要指定？\n<ul>\n<li>\n<p>这块需要更正一个知识点，并不是所有的异常都会回滚事务，比如下面的代码就不会回滚</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 转账操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">out</span> 传出方</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">in</span> 转入方</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">money</span> 金额</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 配置当前接口方法具有事务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in <span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in <span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">outMoney</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//int i = 1/0; // 这个异常事务会回滚</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这个异常事务就不会回滚</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">inMoney</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>出现这个问题的原因是，Spring 的事务只会对 <code>Error异常</code> 和 <code>RuntimeException异常</code> 及其子类进行事务回顾，其他的异常类型是不会回滚的，对应 IOException 不符合上述条件所以不回滚</p>\n<ul>\n<li>此时就可以使用 rollbackFor 属性来设置出现 IOException 异常不回滚<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in <span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">outMoney</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//int i = 1/0; // 这个异常事务会回滚</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这个异常事务就不会回滚</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">inMoney</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>rollbackForClassName 等同于 rollbackFor, 只不过属性为异常的类全名字符串</p>\n</li>\n<li>\n<p>noRollbackForClassName 等同于 noRollbackFor，只不过属性为异常的类全名字符串</p>\n</li>\n<li>\n<p>isolation 设置事务的隔离级别</p>\n<ul>\n<li>DEFAULT   : 默认隔离级别，会采用数据库的隔离级别</li>\n<li>READ_UNCOMMITTED : 读未提交</li>\n<li>READ_COMMITTED : 读已提交</li>\n<li>REPEATABLE_READ : 重复读取</li>\n<li>SERIALIZABLE: 串行化</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"进阶案例\"><a class=\"anchor\" href=\"#进阶案例\">#</a> 进阶案例</h2>\n<p>在前面的转案例的基础上添加新的需求，完成转账后记录日志。</p>\n<ul>\n<li>需求：实现任意两个账户间转账操作，并对每次转账操作在数据库进行留痕</li>\n<li>需求微缩：A 账户减钱，B 账户加钱，数据库记录日志</li>\n</ul>\n<p>基于上述的业务需求，我们来分析下该如何实现:</p>\n<ol>\n<li>基于转账操作案例添加日志模块，实现数据库中记录日志</li>\n<li>业务层转账操作（transfer），调用减钱、加钱与记录日志功能</li>\n</ol>\n<p>需要注意一点就是，我们这个案例的预期效果为:<mark> 无论转账操作是否成功，均进行转账操作的日志留痕</mark></p>\n<h3 id=\"环境准备-6\"><a class=\"anchor\" href=\"#环境准备-6\">#</a> 环境准备</h3>\n<p>该环境是基于转账环境来完成的，所以环境的准备可以参考 <code>6.1.3的环境搭建步骤</code> ，在其基础上，我们继续往下写</p>\n<blockquote>\n<p>步骤 1: 创建日志表</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tbl_log<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   info <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   createDate <span class=\"token keyword\">datetime</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 2: 添加 LogDao 接口</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">LogDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into tbl_log (info,createDate) values(#&#123;info&#125;,now())\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 3: 添加 LogService 接口与实现类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">LogService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> in<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LogService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LogDao</span> logDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in<span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        logDao<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转账操作由\"</span><span class=\"token operator\">+</span>out<span class=\"token operator\">+</span><span class=\"token string\">\"到\"</span><span class=\"token operator\">+</span>in<span class=\"token operator\">+</span><span class=\"token string\">\",金额：\"</span><span class=\"token operator\">+</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4: 在转账的业务中添加记录日志</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token doc-comment comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 转账操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">out</span> 传出方</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">in</span> 转入方</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">money</span> 金额</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 配置当前接口方法具有事务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in <span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LogService</span> logService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in <span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">outMoney</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">inMoney</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            logService<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span>in<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>当程序正常运行，tbl_account 表中转账成功，tbl_log 表中日志记录成功</li>\n<li>当转账业务之间出现异常 (int i =1/0), 转账失败，tbl_account 成功回滚，但是 tbl_log 表未添加数据</li>\n<li>这个结果和我们想要的不一样，什么原因？该如何解决？</li>\n<li>失败原因：日志的记录与转账操作隶属同一个事务，同成功同失败</li>\n<li>最终效果：无论转账操作是否成功，日志必须保留</li>\n</ul>\n<p>原因分析：</p>\n<ul>\n<li>log 方法、inMoney 方法和 outMoney 方法都属于增删改，分别有事务 T1,T2,T3</li>\n<li>transfer 因为加了 @Transactional 注解，也开启了事务 T</li>\n<li>前面我们讲过 Spring 事务会把 T1,T2,T3 都加入到事务 T 中</li>\n<li>所以当转账失败后，所有的事务都回滚，导致日志没有记录下来</li>\n<li>这和我们的需求不符，这个时候我们就想能不能让 log 方法单独是一个事务呢？</li>\n</ul>\n<p>要想解决这个问题，就需要用到事务传播行为</p>\n<h3 id=\"事务传播行为\"><a class=\"anchor\" href=\"#事务传播行为\">#</a> 事务传播行为</h3>\n<p>所谓的事务传播行为指的是：事务协调员对事务管理员所携带事务的处理态度</p>\n<p>就需要用到<a href=\"#%E4%BA%8B%E5%8A%A1%E5%B1%9E%E6%80%A7\">事务属性</a>没有说的 <code>propagation属性</code> ，修改 logService 改变事务的传播行为</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LogService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LogDao</span> logDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//propagation 设置事务属性：传播行为设置为当前操作需要新事务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRES_NEW</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> out<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> in<span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span> money <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        logDao<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转账操作由\"</span><span class=\"token operator\">+</span>out<span class=\"token operator\">+</span><span class=\"token string\">\"到\"</span><span class=\"token operator\">+</span>in<span class=\"token operator\">+</span><span class=\"token string\">\",金额：\"</span><span class=\"token operator\">+</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行后，就能实现我们想要的结果，不管转账是否成功，都会记录日志。</p>\n<p>事务传播行为的可选值:<br />\n<img data-src=\"image-20240315150854162.png\" alt=\"\" /><br />\n 对于我们开发实际中使用的话，因为默认值需要事务是常态的。根据开发过程选择其他的就可以了，例如案例中需要新事务就需要手工配置。其实入账和出账操作上也有事务，采用的就是默认值。</p>\n<p>至此，spring 的基本内容就都过了一遍：<a href=\"#IOC/DI%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91\">IOC/DI</a>、<a href=\"#AOP\">AOP</a>、<a href=\"#%E6%A1%88%E4%BE%8B\">事务处理</a></p>\n",
            "tags": [
                "spring复习",
                "JAVA"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/09/hexo%E4%BD%BF%E7%94%A8/%E7%95%8C%E9%9D%A2%E7%9B%B8%E5%85%B3/",
            "url": "https://zyakmd.github.io/2024/03/09/hexo%E4%BD%BF%E7%94%A8/%E7%95%8C%E9%9D%A2%E7%9B%B8%E5%85%B3/",
            "title": "界面相关",
            "date_published": "2024-03-09T05:15:17.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">Step.3 界面显示 - Theme Shoka Documentation - 二进制杂谈 - 计算机科学 | Yume Shoka = 優萌初華 = 有夢書架 (lostyu.me)</span></p>\n<h1 id=\"首页置顶文章\"><a class=\"anchor\" href=\"#首页置顶文章\">#</a> 首页置顶文章</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 置顶文章</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">sticky</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><h1 id=\"文章封面图\"><a class=\"anchor\" href=\"#文章封面图\">#</a> 文章封面图</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Images</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> assets/wallpaper<span class=\"token punctuation\">-</span>2572384.jpg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者写成</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//placehold.it/350x150.jpg</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><p>这里 cover 的值可以是位于 source 目录里的图片文件，此处是 /source/assets/wallpaper-2572384.jpg 文件，也可以是一个某网址。</p>\n<p>如果文章是一个 gallery post ，即 Front Matter 设置了 photos ，则会封面会显示设置的第一张图片。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Gallery Post </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">photos</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">-</span> assets/wallpaper<span class=\"token punctuation\">-</span>2572384.jpg </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">-</span> assets/wallpaper<span class=\"token punctuation\">-</span>2311325.jpg </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">-</span> assets/wallpaper<span class=\"token punctuation\">-</span>878514.jpg </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">-</span> http<span class=\"token punctuation\">:</span>//placehold.it/350x150.jpg </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><p>此时默认会显示第一个图片，即位于 /source/assets/ 目录里的 wallpaper-2572384.jpg 。<br />\n如果站点配置中设置了 post_asset_folder: true ，那么上述本地图片路径应为 /source/_posts/ 文章同名的文件夹 /assets/wallpaper-2572384.jpg ，当然此时 assets 目录可以省掉。</p>\n<h1 id=\"修改加载动画\"><a class=\"anchor\" href=\"#修改加载动画\">#</a> 修改加载动画</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qaWFua3ljaGVuLmdpdGh1Yi5pby9wb3N0cy9jNjFiOWE2MC8=\">参考</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly91aXZlcnNlLmlvL2xvYWRlcnM=\">资源网站 uiverse</span><br />\n 主要是修改 loading.styl 中的 css 内容，再在 layout.njk 中更改相应的 html 内容</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly91aXZlcnNlLmlvL05hd3NvbWUvY293YXJkbHktc3F1aWQtNTA=\">mark，回头试试</span></p>\n<h1 id=\"音乐播放\"><a class=\"anchor\" href=\"#音乐播放\">#</a> 音乐播放</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mMTAwNWFlMDllNWE=\">单个文章内添加歌曲</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb2MtY2FtZXJhLmdpdGh1Yi5pby9oZXhvL3Nob2thJUU0JUI4JUJCJUU5JUEyJTk4JUU5JTg1JThEJUU3JUJEJUFFJUU5JTlGJUIzJUU0JUI5JTkwJUU2JTkyJUFEJUU2JTk0JUJFJUU1JTk5JUE4Lw==\">参考</span><br />\n或者 Front Matter 中</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/song<span class=\"token punctuation\">?</span>id=1387098940</pre></td></tr></table></figure><h1 id=\"修改切换标签时更换标题\"><a class=\"anchor\" href=\"#修改切换标签时更换标题\">#</a> 修改切换标签时更换标题</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qaWFua3ljaGVuLmdpdGh1Yi5pby9wb3N0cy9jNjFiOWE2MC8=\">详细的</span><br />\n或者<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYXp1a2kubW9lL2hleG8vVGhlbWUuU2hva2EvMDFfU2hva2Ev\">简单</span> 修改 <code>themes/shoka/source/js/_app/global.js</code>  中  <code>visibilityListener</code></p>\n<h1 id=\"更改图床\"><a class=\"anchor\" href=\"#更改图床\">#</a> 更改图床</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly91aTEyMzQ1NmF4LmdpdGh1Yi5pby8yMDIzLzA2LzIzLzAyX1Nob2thJUU1JTlCJUJFJUU1JUJBJThBJUU0JUJGJUFFJUU1JUE0JThELw==\">详细</span><br />\n根本 js 在  <code>\\themes\\shoka\\scripts\\helpers\\engine.js</code>  中的  <code>parseImage</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">parseImage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img<span class=\"token punctuation\">,</span> size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> img<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword control-flow\">return</span> img</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">'https://tva'</span><span class=\"token operator\">+</span>randomServer<span class=\"token operator\">+</span><span class=\"token string\">'.sinaimg.cn/'</span><span class=\"token operator\">+</span>size<span class=\"token operator\">+</span><span class=\"token string\">'/'</span><span class=\"token operator\">+</span>img <span class=\"token comment\">// 替换成自己 Github 图床前链</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>换成本地要自行添加条件满足直接返回<br />\n更换图床则是 else 中的地址</p>\n<pre><code>注意：本地上传到github后虽然是静态资源但需要CDN加速（免费的有：jsdelivr/CloudFlare/腾讯云/百度云），不然要魔法才行\n</code></pre>\n<p>api 的话在 theme 的_config.yaml 中 image_server，如:<br />\n <code>image_server: https://acg.xydwz.cn/api/api.php</code> <br />\n 有些 api 不是 php 结尾也一样<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYW5zdWFueGwuY29tLzIwMjMvMDcvMTEvc2hva2EvJUU0JUJGJUFFJUU2JTk0JUI5JUU4JTg3JUFBJUU1JUFFJTlBJUU0JUI5JTg5JUU4JTgzJThDJUU2JTk5JUFGLw==\">更改背景图</span></p>\n<h1 id=\"添加看板\"><a class=\"anchor\" href=\"#添加看板\">#</a> 添加看板</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zYTYzNDJlMTZlNTc=\">参考</span></p>\n<h1 id=\"扩展显示\"><a class=\"anchor\" href=\"#扩展显示\">#</a> 扩展显示</h1>\n<p>如：隐藏文字，提醒块，折叠快等等<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9zcGVjaWFsLw==\">看这里</span></p>\n<h2 id=\"label标签快\"><a class=\"anchor\" href=\"#label标签快\">#</a> label 标签快</h2>\n<figure class=\"highlight md\"><figcaption data-lang=\"Markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[default]&#123;.label&#125; </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[primary]&#123;.label .primary&#125; </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>[info]&#123;.label .info&#125; </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[:heavy_check_mark:success]&#123;.label .success&#125; </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>[warning]&#123;.label .warning&#125; </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[:broken_heart:danger]&#123;.label .danger&#125;</pre></td></tr></table></figure><p><span class=\"label\">default</span><br />\n<span class=\"label primary\">primary</span><br />\n<span class=\"label info\">info</span><br />\n<span class=\"label success\">✔️success</span><br />\n<span class=\"label warning\">warning</span><br />\n<span class=\"label danger\">💔danger</span></p>\n<h2 id=\"标签卡\"><a class=\"anchor\" href=\"#标签卡\">#</a> 标签卡</h2>\n<pre><code>;;;&lt;id&gt; &lt;名称&gt;\n;;;\n</code></pre>\n<div class=\"tab\" data-id=\"1\" data-title=\"同一标签id\">\n<p>里面放什么</p>\n</div>\n<div class=\"tab\" data-id=\"1\" data-title=\"就会匹配在一起\">\n<p>都可以，如代码块并行</p>\n</div>\n<h2 id=\"折叠块\"><a class=\"anchor\" href=\"#折叠块\">#</a> 折叠块</h2>\n<p>基于 markdown-it-container</p>\n<figure class=\"highlight md\"><figcaption data-lang=\"Markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+++ 默认默认 这里是一段文字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>++ 下划线 ++</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>+++primary 紫色</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>:::info</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>参考信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">-</span> 第一行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">-</span> 第二行</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>+++info  蓝色</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>;;;id3 卡片 1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>;;;id3 卡片 2</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>+++success 绿色</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"><div class=\"links\"><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div></div></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>+++warning 黄色</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>!! 警告警告警告警告警告！！&#123;.bulr&#125;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>[label]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>+++danger 红色</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>[danger]&#123;.label .danger&#125;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+++</pre></td></tr></table></figure><details><summary>默认默认 这里是一段文字</summary><div>\n<p>++ 下划线 ++</p>\n</div></details>\n<details class=\"primary\"><summary>紫色</summary><div>\n<div class=\"note info\">\n<p>参考信息</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div></details>\n<details class=\"info\"><summary>蓝色</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片 1\">\n<p>这里是卡片 1 的内容</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片 2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n</div></details>\n<details class=\"success\"><summary>绿色</summary><div>\n<p><div class=\"links\"><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div></div></p>\n</div></details>\n<details class=\"warning\"><summary>黄色</summary><div>\n<p>!! 警告警告警告警告警告！！{.bulr}<br />\n<span class=\"label success\">label</span></p>\n</div></details>\n<details class=\"danger\"><summary>红色</summary><div>\n<p><span class=\"label danger\">danger</span></p>\n</div></details>\n<h2 id=\"提醒块\"><a class=\"anchor\" href=\"#提醒块\">#</a> 提醒块</h2>\n<figure class=\"highlight md\"><figcaption data-lang=\"Markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:::default</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>默认默认</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>:::primary</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>基本基本</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>:::info</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>提示提示</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>:::success</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>成功成功</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>:::warning</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>警告警告</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>:::danger no-icon</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>:::</pre></td></tr></table></figure><div class=\"note default\">\n<p>默认默认</p>\n</div>\n<div class=\"note primary\">\n<p>基本基本</p>\n</div>\n<div class=\"note info\">\n<p>提示提示</p>\n</div>\n<div class=\"note success\">\n<p>成功成功</p>\n</div>\n<div class=\"note warning\">\n<p>警告警告</p>\n</div>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<div class=\"note danger no-icon\">\n<p>危险危险</p>\n</div>\n<h2 id=\"隐藏文字\"><a class=\"anchor\" href=\"#隐藏文字\">#</a> 隐藏文字</h2>\n<pre><code>!!黑幕黑幕黑幕黑幕黑幕黑幕!!： 鼠标滑过显示内容\n!!模糊模糊模糊模糊模糊模糊!!&#123;.bulr&#125; ： 选中文字显示内容\n</code></pre>\n<p><span class=\"spoiler\" title=\"你知道得太多了\">黑幕黑幕黑幕黑幕黑幕黑幕</span> ： 鼠标滑过显示内容<br />\n<span class=\"spoiler bulr\" title=\"你知道得太多了\">模糊模糊模糊模糊模糊模糊</span> ： 选中文字显示内容<br />\n VuePress Theme Hope <span class=\"spoiler\" title=\"你知道得太多了\">十分强大</span>。</p>\n",
            "tags": [
                "hexo使用",
                "Hexo"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/07/hexo%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%AB%99%E6%A0%B7%E5%BC%8F/",
            "url": "https://zyakmd.github.io/2024/03/07/hexo%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%AB%99%E6%A0%B7%E5%BC%8F/",
            "title": "网站样式",
            "date_published": "2024-03-07T12:49:38.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">shoka</span> 样式，交互爽，好看又不乱（该关的还是得关，页面动画看多了腻），老早就馋了。</p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p><code>git clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</code></p>\n<h1 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h1>\n<ol>\n<li>卸载掉默认的  <code>hexo-renderer-marked</code>  (有默认的路径处理，不行就回退)\n<ul>\n<li><code>npm un hexo-renderer-marked --save</code></li>\n<li><img data-src=\"image-20240307211424587.png\" alt=\"\" /></li>\n</ul>\n</li>\n<li>安装  <code>npm i hexo-renderer-multi-markdown-it --save</code>\n<ul>\n<li>遇到 Error: read ECONNRESET，网上是： <code>npm config set registry http://registry.npmjs.org/</code>  更新代理</li>\n<li>后细读发现是 puppeteer 安装问题，原文有提及，不使用 mermaid，加上 --ignore-scripts 忽略即可</li>\n</ul>\n</li>\n<li>按原文<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kZXBlbmRlbnRzLw==\">依赖插件</span>安装插件，并且添加 / 更改相应的 yaml 配置</li>\n<li>theme: shoka # 默认：landscape<br />\n<img data-src=\"image-20240307214022436.png\" alt=\"\" /></li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWdwaWdsZXRzZ28uZ2l0aHViLmlvL2hleG8vc2hva2EvJUU5JTg1JThEJUU3JUJEJUFFc2hva2ElRTQlQjglQkIlRTklQTIlOTgv\">https://pigpigletsgo.github.io/hexo/shoka/ 配置 shoka 主题 /</span></p>\n<p>遇到了渲染错乱，c、g、s 都没问题，但网页显示一坨。<br />\n查到有说法是 js-yaml 版本不对，结果一看我都没这个，添加后好了<br />\n npm install js-yaml@3.14.1<br />\n 还包括 package.json 的替换</p>\n<h1 id=\"基本配置\"><a class=\"anchor\" href=\"#基本配置\">#</a> 基本配置</h1>\n<p>包含哪些插件和设置见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">基本配置</span><br />\n唯一要注意的文中推荐 theme 下自定义_config.[theme].yml 配置文件<br />\n官网也说：Hexo 在合并主题配置时，Hexo 配置文件中的 theme_config 的优先级最高，其次是_config.[theme].yml 文件，最后是位于主题目录下的_config.yml. 然而_config.[theme].</p>\n<p>然而 theme 下_config.[theme].yml 并没有覆盖_config.yml。最终还是都写在了_config.yml 中</p>\n<h1 id=\"界面配置\"><a class=\"anchor\" href=\"#界面配置\">#</a> 界面配置</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">界面设置</span></p>\n<h1 id=\"搜索功能\"><a class=\"anchor\" href=\"#搜索功能\">#</a> 搜索功能</h1>\n<p>按默认的</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Algolia Search 搜索功能</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># For more information: https://www.algolia.com</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">search</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  hits<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    per_page<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr></table></figure><p>还需要注册 algolia（mark：我用 GitHub 注册的）并配置相关设置（algolia 提供给个人用户上限 1 万条索引记录和每月 1 万次的搜索次数）<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTczNDA0L2FydGljbGUvZGV0YWlscy8xMjI4NjEzMjE=\">配置参考</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xOTM0MjE5\">参考</span></p>\n<p>更新： <code>hexo algolia</code> <br />\n 如下图就是成功了<br />\n<img data-src=\"image-20240308194948129.png\" alt=\"\" /></p>\n<p><img data-src=\"image-20240308195058606.png\" alt=\"\" /></p>\n<h1 id=\"站内跳转\"><a class=\"anchor\" href=\"#站内跳转\">#</a> 站内跳转</h1>\n<p>官方有标签插件实现站内文章链接，如下：<br />\n <code>&#123;% post_link 'title' %&#125;</code> <br />\n 样例： <code>&#123;% post_link hexo使用/在obisidian上使用 '在obisidian上使用' %&#125;</code>  要用相对路径<br />\n这儿优先使用文章 Front-matter 中的 <code>permalink</code>  字段，如果没有  <code>permalink</code>  ，则使用  <code>文件名字</code> ！</p>\n<p>官方文档还有一个  <code>post_path</code>  ，用于获取文章路径，结合 markdown 内置的链接方式，即可实现锚点超链接，如下：（这个一直没成，站内就用 post_link 了，外链用 <code>[]()</code> ）<br />\n <code>[hexo 安装](&#123;% post_path 'hexo blog' %&#125;#安装)</code></p>\n<p>也可以使用 html a 标签实现，如下：<br />\n <code>&lt;a href=&quot;&#123;% post_path 'hexo blog' %&#125;#安装&quot;&gt;hexo 安装&lt;/a&gt;</code></p>\n<p>页内标题跳转<br />\n <code>[](#标题名)</code> <br />\n 样例：<a href=\"#%E7%8E%AF%E5%A2%83\">环境</a>  ，实现 md <code>[环境](#环境)</code></p>\n<h1 id=\"评论\"><a class=\"anchor\" href=\"#评论\">#</a> 评论</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQuaHRtbA==\">Valine</span></p>\n<h1 id=\"图库\"><a class=\"anchor\" href=\"#图库\">#</a> 图库</h1>\n<p>说是：/themes/shoka/_images.yml  会被 /source/_data/images.yml 代替 (至少要有六个覆盖默认的列表) 。发现也并没，也可能是我的链接未生效，再看 ing</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmppeGlhb2IuY24vP3Bvc3Q9OTM=\">随机图床集合</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly90Lm13bS5tb2Uv\">随机二次元图床</span></p>\n<h1 id=\"关闭复制信息携带\"><a class=\"anchor\" href=\"#关闭复制信息携带\">#</a> 关闭复制信息携带</h1>\n<p>支持知识保护，但我想便捷 23333<br />\n 修改 <code>/theme/shoka/source/js/_app/page.js</code>  ：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">30</span> <span class=\"token operator\">&amp;&amp;</span> copyright<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      event<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// var author = \"# \" + copyright.child('.author').innerText</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// var link = \"# \" + copyright.child('.link').innerText</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// var license = \"# \" + copyright.child('.license').innerText</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">var</span> htmlData <span class=\"token operator\">=</span> author <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br>\"</span> <span class=\"token operator\">+</span> link <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br>\"</span> <span class=\"token operator\">+</span> license <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br>&lt;br>\"</span> <span class=\"token operator\">+</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\r\\n</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;br>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">var</span> textData <span class=\"token operator\">=</span> author <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> link <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> license <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\r\\n</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">clipboardData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          event<span class=\"token punctuation\">.</span><span class=\"token property-access\">clipboardData</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span> htmlData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          event<span class=\"token punctuation\">.</span><span class=\"token property-access\">clipboardData</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">,</span> textData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">clipboardData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token keyword control-flow\">return</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">clipboardData</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> textData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>直接注释掉作者、链接等其他信息。或者可以调下 if 里的限长，30 太少了，随便一句话 cv 了还要删半天</p>\n<h1 id=\"补充\"><a class=\"anchor\" href=\"#补充\">#</a> 补充</h1>\n<p>记录找到的使用 shoka 的各类问题 &amp; 解决方法 &amp; 功能扩展</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmV2ZXJzZXNhY2xlLmNvbS9zdXBwbGVtZW50LWZvci1zaG9rYS10aGVtZS8=\">1</span></p>\n",
            "tags": [
                "hexo使用",
                "Hexo"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/07/hexo%E4%BD%BF%E7%94%A8/%E5%9C%A8obisidian%E4%B8%8A%E4%BD%BF%E7%94%A8/",
            "url": "https://zyakmd.github.io/2024/03/07/hexo%E4%BD%BF%E7%94%A8/%E5%9C%A8obisidian%E4%B8%8A%E4%BD%BF%E7%94%A8/",
            "title": "在obisidian上使用",
            "date_published": "2024-03-07T08:44:47.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NTQzMzM4MDU=\">Obsidian+Git 完美维护 Hexo 博客 - 知乎</span></p>\n<h1 id=\"模板\"><a class=\"anchor\" href=\"#模板\">#</a> 模板</h1>\n<p>用 hexo 命令创建会自带文档属性，用 obisidian 就是空白文档，但可以写个模板，直接插入，也不费多少事，免得还要去根目录开 bash。</p>\n<p>创建一个模板文件夹如 Template，创建模板文件：<br />\n编辑源码模式下，输入以下。title 就是文章名，date 在 obisidian 设置中自定义的日期</p>\n<figure class=\"highlight md\"><figcaption data-lang=\"Markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token front-matter yaml language-yaml\">title: 在obisidian上使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>date: 1709801087000</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>categories: </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tags:</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">---</span></span></pre></td></tr></table></figure><p><img data-src=\"a.png\" alt=\"\" /></p>\n<h1 id=\"目录维护\"><a class=\"anchor\" href=\"#目录维护\">#</a> 目录维护</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTIwMTg5NjE0NjYwMjU1Nzgx\">Hexo + Obsidian + Git 完美的博客部署与编辑方案 - 掘金</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmVzb24ub3JnL3B1Yi9lMmY2ZTIzOS8=\">【Hexo 插件系列】日志的自动分类插件 hexo-auto-category | ESON</span></p>\n<p>使用 <code>hexo-auto-category</code>  根据文件目录自动生成 categories 信息。<br />\n对于博客  <code>source/_post/web/framework/hexo.md</code> ，该插件会自动生成以下 <code>categories</code></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> web  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">-</span> framework</pre></td></tr></table></figure><p>安装： <code>npm install hexo-auto-category --save</code> <br />\n 在  _config.yml 中添加</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Generate categories from directory-tree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Dependencies: https://github.com/xu-song/hexo-auto-category</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># depth: the depth of directory-tree you want to generate, should > 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">auto_category</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> depth<span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>如果只想生成第一级目录分类，可以设置 <code>depth</code>  属性为 1，以此内推。</p>\n<h1 id=\"图片\"><a class=\"anchor\" href=\"#图片\">#</a> 图片</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMzU3MjE3L2FydGljbGUvZGV0YWlscy8xMjc1NjIxNjM=\"># 如何让 Obsidian 的图片存储形式设置为 ./${filename}.assets</span><br />\n 头大的是这个，在上一篇文章中已经用了插件，相比自己手动更改 html 中的路径方便，但平时截图命名是用时间，待数字，其次 obsidian 默认存放位置固定，还需要手动移动文件和写引用。</p>\n<h2 id=\"位置\"><a class=\"anchor\" href=\"#位置\">#</a> 位置</h2>\n<ol>\n<li>关闭  <code>使用 Wiki 链接</code></li>\n<li>使用插件 Custom Attachment Location（里面还有自动为粘贴的图像重命名的功能）</li>\n<li filename=\"\">在↑设置中的 Location xx：./$</li>\n<li>设置 “文件与链接” 中附件选 “当前文件所在文件夹的子文件夹”，然后留空（由上面的插件自动填入了）</li>\n<li>设置 “文件与链接” 中内部链接类型选 “尽可能短的方式”</li>\n</ol>\n<p>Q：好像不支持中文，那就跟目录维护的冲突了，无法起中文名文件夹。不用 CATEGORIES，自行管理 categories？<br />\nA：但好像可以</p>\n<h2 id=\"路径\"><a class=\"anchor\" href=\"#路径\">#</a> 路径</h2>\n<p>改用<br />\n <code>npm install hexo-renderer-marked --save</code> <br />\n 可行，且极好用<br />\n见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLXJlbmRlcmVyLW1hcmtlZA==\">hexo-renderer-marked</span>，有丰富的扩展选项<br />\n_config 设置这两个。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">marked</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">prependRoot</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">postAsset</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><p><img data-src=\"image-20240307202119236.png\" alt=\"\" /></p>\n<h1 id=\"文内链接\"><a class=\"anchor\" href=\"#文内链接\">#</a> 文内链接</h1>\n<p>见 <a href=\"/2024/03/07/hexo%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%AB%99%E6%A0%B7%E5%BC%8F/\" title=\"网站样式\">网站样式</a> 的站内跳转</p>\n",
            "tags": [
                "hexo使用",
                "Hexo"
            ]
        },
        {
            "id": "https://zyakmd.github.io/2024/03/06/hexo%E4%BD%BF%E7%94%A8/hexo+github/",
            "url": "https://zyakmd.github.io/2024/03/06/hexo%E4%BD%BF%E7%94%A8/hexo+github/",
            "title": "hexo + github 博客搭建",
            "date_published": "2024-03-06T11:57:31.000Z",
            "content_html": "<blockquote>\n<p>Hexo 是一个快速、简洁且高效的 <strong>博客框架</strong>。它使用 Markdown（或其他渲染引擎）解析文章，在数秒内，即可使用靓丽的主题生成静态网页<br />\n参考：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1c2hpYm8xMjMvYXJ0aWNsZS9kZXRhaWxzLzEyNDYxOTEyMw==\">【2023 最新版】Hexo+github 搭建个人博客并绑定个人域名_hexo 部署 github 绑定自定义域名 - CSDN 博客</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzExOTg2NzM=\"> Hexo 系列 (一) 搭建博客网站 - 阿里云开发者社区</span></p>\n</blockquote>\n<h1 id=\"npm-设置\"><a class=\"anchor\" href=\"#npm-设置\">#</a> npm 设置</h1>\n<p>NPM 是随同 NodeJS 一起安装的包管理工具，能解决 NodeJS 代码部署上的很多问题，常见的使用场景有以下几种：</p>\n<ul>\n<li>允许用户从 NPM 服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从 NPM 服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到 NPM 服务器供别人使用。</li>\n</ul>\n<p><code>npm config set prefix &quot;C:\\Program Files\\nodejs\\node_global&quot;</code> <br />\n <code>npm config set cache &quot;C:\\Program Files\\nodejs\\node_cache&quot;</code> <br />\n 设置在这↑会有权限问题，麻烦。更改到外部↓<br />\n <code>npm config set prefix &quot;D:\\nodejs\\prefix&quot;</code> <br />\n <code>npm config set cache &quot;D:\\nodejs\\cache&quot;</code></p>\n<h1 id=\"hexo\"><a class=\"anchor\" href=\"#hexo\">#</a> Hexo</h1>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<p><code>npm install -g hexo</code></p>\n<p><img data-src=\"test.png\" alt=\"t\" /></p>\n<p>在 node 开发中使用 npm init 会生成一个 pakeage.json 文件，这个文件主要是用来记录这个项目的详细信息的，它会将我们在项目开发中所要用到的包，以及项目的详细信息等记录在这个项目中。<br />\n <code>hexo init</code>  命令可以将该文件夹初始化为 Hexo 根目录<br />\n <code>npm install</code>  命令可以自动安装依赖列表中列出的所有模块</p>\n<h2 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h2>\n<p>输入命令  <code>hexo s</code>  启动本地站点<br />\n在浏览器地址栏中输入 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==\">http://localhost:4000/</span>， 就可以看到站点在本地运行的结果了</p>\n<h2 id=\"部署github\"><a class=\"anchor\" href=\"#部署github\">#</a> 部署 github</h2>\n<p>GitHub 提供了一项名为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vemgvcGFnZXMvZ2V0dGluZy1zdGFydGVkLXdpdGgtZ2l0aHViLXBhZ2VzL2Fib3V0LWdpdGh1Yi1wYWdlcw==\">GitHub Pages</span> 的服务，它允许用户自定义项目首页替代默认的源码列表<br />\n因此，GitHub Pages 可以被认为是由用户编写的、托管在 GitHub 上的静态网页<br />\n而我们的目的，正是要把用 Hexo 在本地搭建的网站部署到 Github 上，使得站点可以被公共访问<br />\n有以下使用限制：</p>\n<ul>\n<li>GitHub Pages 源存储库的建议限制为 1 GB。 有关详细信息，请参阅 “<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vemgvcmVwb3NpdG9yaWVzL3dvcmtpbmctd2l0aC1maWxlcy9tYW5hZ2luZy1sYXJnZS1maWxlcy9hYm91dC1sYXJnZS1maWxlcy1vbi1naXRodWIjZmlsZS1hbmQtcmVwb3NpdG9yeS1zaXplLWxpbWl0YXRpb25z\">关于 GitHub 上的大文件</span>”</li>\n<li>发布的 GitHub Pages 站点不得超过 1 GB。</li>\n<li>如果花费的时间超过 10 分钟，GitHub Pages 部署将超时。</li>\n<li>GitHub Pages 站点的软带宽限制为每月 100 GB。</li>\n<li>GitHub Pages 站点的软限制为每小时 10 次生成。 如果使用自定义 GitHub Actions 工作流生成和发布站点，则此限制不适用</li>\n<li>为了为所有 GitHub Pages 站点提供一致的服务质量，可能会实施速率限制。 这些速率限制无意干扰 GitHub Pages 的合法使用。 如果你的请求触发了速率限制，你将收到相应响应，其中包含 HTTP 状态代码  <code>429</code>  以及信息性 HTML 正文。<br />\n1G 哪怕放不少静态图片资源都放不完，够用了，先白嫖着。</li>\n</ul>\n<h3 id=\"本地配置-个人信息\"><a class=\"anchor\" href=\"#本地配置-个人信息\">#</a> 本地配置 个人信息</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config user.name <span class=\"token string\">\"your-username\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config user.email <span class=\"token string\">\"your-email-address\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 都有时优先用本地，但全局必须有</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"your-username\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"your-email-address\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看配置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 获取默认配置，如果当前地址中仓库信息不存在，则查看全局，然后再读取系统配置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--list</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 本地仓库配置 高优先级</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--local</span> <span class=\"token parameter variable\">--list</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 全局用户配置 中优先级</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> <span class=\"token parameter variable\">--list</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 系统配置 低优先级</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--system</span> <span class=\"token parameter variable\">--list</span></pre></td></tr></table></figure><h3 id=\"安装插件\"><a class=\"anchor\" href=\"#安装插件\">#</a> 安装插件</h3>\n<p><code>npm install hexo-deployer-git --save</code></p>\n<h3 id=\"修改配置\"><a class=\"anchor\" href=\"#修改配置\">#</a> 修改配置</h3>\n<p><strong>根目录</strong> 下的  <code>_config.yml</code>  文件<br />\n属性与值之间需要留有一个空格</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/&lt;git_name<span class=\"token punctuation\">></span>/&lt;repositories_name<span class=\"token punctuation\">></span>.github.io.git</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\"># 设置默认的 main，不然会推到别的仓库去，只有在默认的才能在 xx.io 看到</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main</pre></td></tr></table></figure><h3 id=\"配置ssh\"><a class=\"anchor\" href=\"#配置ssh\">#</a> 配置 ssh</h3>\n<p>进入站点根文件夹，打开 git bash，输入  <code>ssh-keygen -t rsa -C &quot;your_email&quot;</code>  命令并一路回车获得密钥<br />\n完成后，根据提示信息中的文件地址  <code>/c/Users/user/.ssh/id_rsa.pub</code>  找到 id_rsa.pub 文件，复制文件里面的内容。<br />\n然后 g 在 ithub 设置中添加该 key，测试：</p>\n<p><img data-src=\"key.png\" alt=\"\" /></p>\n<h3 id=\"更换主题\"><a class=\"anchor\" href=\"#更换主题\">#</a> 更换主题</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzExOTg3NTY/c3BtPWEyYzZoLjI0ODc0NjMyLmV4cGVydC1wcm9maWxlLjMyLjM2Y2E0MDlhS2E0NGM4\">Hexo 系列 (四) NexT 主题配置 - 阿里云开发者社区</span></p>\n<h3 id=\"编译和发布网页\"><a class=\"anchor\" href=\"#编译和发布网页\">#</a> 编译和发布网页</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzExOTg3OTY/c3BtPWEyYzZoLjI0ODc0NjMyLmV4cGVydC1wcm9maWxlLjMxLjM2Y2E0MDlhS2E0NGM4\">Hexo 系列 (五) 撰写文章 - 阿里云开发者社区</span></p>\n<p>git bash 中输入命令  <code>hexo g</code>  生成静态文件，输入命令  <code>hexo d</code>  部署到 Github<br />\n 此时，打开 <span class=\"exturl\" data-url=\"aHR0cHM6Ly91c2VybmFtZS5naXRodWIuaW8=\">https://username.github.io</span> 就可以看见已经部署好的网站了，大功告成</p>\n<p>期间遇到了以下问题：</p>\n<p><img data-src=\"bushu.png\" alt=\"\" /></p>\n<p>产生原因：一般是因为服务器的 SSL 证书没有经过第三方机构的签署，所以才报错</p>\n<p><strong>解决方法 1：</strong><br />\n <code>git config --global http.sslVerify &quot;false&quot;</code>  好用，但魔法不好的时候就是不行</p>\n<p><strong>解决方法 2：</strong> 取消 git 的代理</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//取消http代理 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> <span class=\"token parameter variable\">--unset</span> http.proxy </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//取消https代理 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> <span class=\"token parameter variable\">--unset</span> https.proxy</pre></td></tr></table></figure><h2 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean <span class=\"token comment\">#用来清理缓存文件 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo generate <span class=\"token comment\">#生成文件 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo server <span class=\"token comment\">#运行本地服务器 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo deploy <span class=\"token comment\">#上传到服务器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hexo new <span class=\"token operator\">&lt;</span>paper_name<span class=\"token operator\">></span> <span class=\"token comment\">#新建文章</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">npm</span> list <span class=\"token comment\"># 查看已有插件</span></pre></td></tr></table></figure><h2 id=\"图片问题\"><a class=\"anchor\" href=\"#图片问题\">#</a> 图片问题</h2>\n<p>最终方案见<br />\n <a href=\"/2024/03/07/hexo%E4%BD%BF%E7%94%A8/%E5%9C%A8obisidian%E4%B8%8A%E4%BD%BF%E7%94%A8/\" title=\"在obisidian上使用\">在obisidian上使用</a></p>\n<p>一开始用的，但问题多多↓<br />\n参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lpeXVuZ2VudC9oZXhvLWFzc2V0LWltZy9pc3N1ZXMvMw==\">路径中有空格时，因为 markdown 需要 encode 空格的原因，会匹配失败・Issue #3・yiyungent/hexo-asset-img・GitHub</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lpeXVuZ2VudC9oZXhvLWFzc2V0LWltZw==\">GitHub - yiyungent/hexo-asset-img: 🍰 Hexo local image plugin. | Hexo 本地图片插件：转换 图片相对路径 为 asset_img</span></p>\n<p>安装 hexo-asset-img:   <code>npm install hexo-asset-img --save （过时了）</code> <br />\n用最新的： <code>npm install git://github.com/yiyungent/hexo-asset-img.git#main</code> <br />\n 在 md 文件目录下创建同名文件夹（添加该模块后 hexo g 也会自动生成）放图片。<br />\nmd 中调用：</p>\n<figure class=\"highlight md\"><figcaption data-lang=\"Markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">name</span>](<span class=\"token url\">md_name/pic_name.png</span>)</span></pre></td></tr></table></figure><p><strong>注意：</strong> 图片名字和 title 不能有数字，否则会导致图像宽度变成 1，见上面 github 中的第一个 issue。</p>\n<p>纯 html 格式，能调整大小、位置，但编译成静态资源路径有问题</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>center<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>650px</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>center<span class=\"token punctuation\">'</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span><span class=\"token value css language-css\"><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span><span class=\"token number\">15</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>kaiti<span class=\"token punctuation\">;</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span><span class=\"token color\">red</span></span><span class=\"token punctuation\">'</span></span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>",
            "tags": [
                "hexo使用",
                "Hexo"
            ]
        }
    ]
}